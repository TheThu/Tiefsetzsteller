
Tiefsetzsteller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08007c98  08007c98  00017c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc4  08007fc4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007fc4  08007fc4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fc4  08007fc4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001e4  080081b0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  080081b0  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d87b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d1c  00000000  00000000  0002da8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  0002f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca0  00000000  00000000  00030548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019049  00000000  00000000  000311e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b0f3  00000000  00000000  0004a231  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000937aa  00000000  00000000  00055324  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8ace  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa0  00000000  00000000  000e8b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c7c 	.word	0x08007c7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007c7c 	.word	0x08007c7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b598      	push	{r3, r4, r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4c:	f000 fc8e 	bl	800156c <HAL_Init>

  /* USER CODE BEGIN Init */
  initialise_monitor_handles();
 8000c50:	f006 ff9a 	bl	8007b88 <initialise_monitor_handles>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 f860 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f000 fa6c 	bl	8001134 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c5c:	f000 fa3a 	bl	80010d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c60:	f000 f9aa 	bl	8000fb8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000c64:	f000 f8b4 	bl	8000dd0 <MX_ADC1_Init>
  MX_OPAMP2_Init();
 8000c68:	f000 f980 	bl	8000f6c <MX_OPAMP2_Init>
  MX_ADC2_Init();
 8000c6c:	f000 f920 	bl	8000eb0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc2);
 8000c70:	4823      	ldr	r0, [pc, #140]	; (8000d00 <main+0xb8>)
 8000c72:	f000 fe73 	bl	800195c <HAL_ADC_Start>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000c76:	2100      	movs	r1, #0
 8000c78:	4822      	ldr	r0, [pc, #136]	; (8000d04 <main+0xbc>)
 8000c7a:	f003 f939 	bl	8003ef0 <HAL_TIM_PWM_Start>

  HAL_OPAMP_Start(&hopamp2);
 8000c7e:	4822      	ldr	r0, [pc, #136]	; (8000d08 <main+0xc0>)
 8000c80:	f001 fe74 	bl	800296c <HAL_OPAMP_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ADC_value1 = ( HAL_ADC_GetValue(&hadc2)/ (4095.0 * 2) )*3.3 *1000;
 8000c84:	481e      	ldr	r0, [pc, #120]	; (8000d00 <main+0xb8>)
 8000c86:	f000 ff1f 	bl	8001ac8 <HAL_ADC_GetValue>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fc39 	bl	8000504 <__aeabi_ui2d>
 8000c92:	a317      	add	r3, pc, #92	; (adr r3, 8000cf0 <main+0xa8>)
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	f7ff fdd8 	bl	800084c <__aeabi_ddiv>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	4621      	mov	r1, r4
 8000ca4:	a314      	add	r3, pc, #80	; (adr r3, 8000cf8 <main+0xb0>)
 8000ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000caa:	f7ff fca5 	bl	80005f8 <__aeabi_dmul>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460c      	mov	r4, r1
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <main+0xc4>)
 8000cbc:	f7ff fc9c 	bl	80005f8 <__aeabi_dmul>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	4621      	mov	r1, r4
 8000cc8:	f7ff ff6e 	bl	8000ba8 <__aeabi_d2f>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <main+0xc8>)
 8000cd0:	601a      	str	r2, [r3, #0]
	  printf("Ladestrom I [mA] %f \n", ADC_value1);
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <main+0xc8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fc36 	bl	8000548 <__aeabi_f2d>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	460c      	mov	r4, r1
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <main+0xcc>)
 8000ce6:	f004 fe57 	bl	8005998 <iprintf>
  {
 8000cea:	e7cb      	b.n	8000c84 <main+0x3c>
 8000cec:	f3af 8000 	nop.w
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	40bffe00 	.word	0x40bffe00
 8000cf8:	66666666 	.word	0x66666666
 8000cfc:	400a6666 	.word	0x400a6666
 8000d00:	200002f0 	.word	0x200002f0
 8000d04:	20000390 	.word	0x20000390
 8000d08:	200002bc 	.word	0x200002bc
 8000d0c:	408f4000 	.word	0x408f4000
 8000d10:	200003d0 	.word	0x200003d0
 8000d14:	08007c98 	.word	0x08007c98

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b096      	sub	sp, #88	; 0x58
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d22:	2228      	movs	r2, #40	; 0x28
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f004 f9d2 	bl	80050d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d50:	2301      	movs	r3, #1
 8000d52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d54:	2310      	movs	r3, #16
 8000d56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000d60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fe30 	bl	80029d0 <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d76:	f000 fa01 	bl	800117c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 fd23 	bl	80037e0 <HAL_RCC_ClockConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000da0:	f000 f9ec 	bl	800117c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000da4:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000da8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dae:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 ff48 	bl	8003c4c <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dc2:	f000 f9db 	bl	800117c <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3758      	adds	r7, #88	; 0x58
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000df4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000df8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e00:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e0c:	4b27      	ldr	r3, [pc, #156]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1a:	4b24      	ldr	r3, [pc, #144]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e4c:	4817      	ldr	r0, [pc, #92]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e4e:	f000 fbf3 	bl	8001638 <HAL_ADC_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e58:	f000 f990 	bl	800117c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4811      	ldr	r0, [pc, #68]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e68:	f001 f8fe 	bl	8002068 <HAL_ADCEx_MultiModeConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e72:	f000 f983 	bl	800117c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_ADC1_Init+0xdc>)
 8000e94:	f000 fe26 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000e9e:	f000 f96d 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000340 	.word	0x20000340

08000eb0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000ec6:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000ec8:	4a27      	ldr	r2, [pc, #156]	; (8000f68 <MX_ADC2_Init+0xb8>)
 8000eca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000f0e:	2204      	movs	r2, #4
 8000f10:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f1e:	4811      	ldr	r0, [pc, #68]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000f20:	f000 fb8a 	bl	8001638 <HAL_ADC_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000f2a:	f000 f927 	bl	800117c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <MX_ADC2_Init+0xb4>)
 8000f4c:	f000 fdca 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000f56:	f000 f911 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200002f0 	.word	0x200002f0
 8000f68:	50000100 	.word	0x50000100

08000f6c <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_OPAMP2_Init+0x44>)
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <MX_OPAMP2_Init+0x48>)
 8000f74:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_OPAMP2_Init+0x44>)
 8000f78:	2240      	movs	r2, #64	; 0x40
 8000f7a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_OPAMP2_Init+0x44>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	60da      	str	r2, [r3, #12]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_OPAMP2_Init+0x44>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_OPAMP2_Init+0x44>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_OPAMP2_Init+0x44>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_OPAMP2_Init+0x44>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_OPAMP2_Init+0x44>)
 8000f9c:	f001 fc40 	bl	8002820 <HAL_OPAMP_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_OPAMP2_Init+0x3e>
  {
    Error_Handler();
 8000fa6:	f000 f8e9 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200002bc 	.word	0x200002bc
 8000fb4:	4001003c 	.word	0x4001003c

08000fb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b096      	sub	sp, #88	; 0x58
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	615a      	str	r2, [r3, #20]
 8000fdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	222c      	movs	r2, #44	; 0x2c
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f004 f873 	bl	80050d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <MX_TIM1_Init+0x114>)
 8000fec:	4a38      	ldr	r2, [pc, #224]	; (80010d0 <MX_TIM1_Init+0x118>)
 8000fee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <MX_TIM1_Init+0x114>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <MX_TIM1_Init+0x114>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 57;
 8000ffc:	4b33      	ldr	r3, [pc, #204]	; (80010cc <MX_TIM1_Init+0x114>)
 8000ffe:	2239      	movs	r2, #57	; 0x39
 8001000:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001002:	4b32      	ldr	r3, [pc, #200]	; (80010cc <MX_TIM1_Init+0x114>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <MX_TIM1_Init+0x114>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <MX_TIM1_Init+0x114>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001014:	482d      	ldr	r0, [pc, #180]	; (80010cc <MX_TIM1_Init+0x114>)
 8001016:	f002 ff3f 	bl	8003e98 <HAL_TIM_PWM_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001020:	f000 f8ac 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001030:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001034:	4619      	mov	r1, r3
 8001036:	4825      	ldr	r0, [pc, #148]	; (80010cc <MX_TIM1_Init+0x114>)
 8001038:	f003 fc08 	bl	800484c <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001042:	f000 f89b 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001046:	2360      	movs	r3, #96	; 0x60
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104e:	2300      	movs	r3, #0
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001052:	2300      	movs	r3, #0
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	4818      	ldr	r0, [pc, #96]	; (80010cc <MX_TIM1_Init+0x114>)
 800106c:	f002 ff92 	bl	8003f94 <HAL_TIM_PWM_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001076:	f000 f881 	bl	800117c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800108e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001092:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800109c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <MX_TIM1_Init+0x114>)
 80010b0:	f003 fc3a 	bl	8004928 <HAL_TIMEx_ConfigBreakDeadTime>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80010ba:	f000 f85f 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <MX_TIM1_Init+0x114>)
 80010c0:	f000 f93e 	bl	8001340 <HAL_TIM_MspPostInit>

}
 80010c4:	bf00      	nop
 80010c6:	3758      	adds	r7, #88	; 0x58
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000390 	.word	0x20000390
 80010d0:	40012c00 	.word	0x40012c00

080010d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <MX_USART2_UART_Init+0x5c>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80010e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART2_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART2_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART2_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART2_UART_Init+0x58>)
 8001118:	f003 fc7e 	bl	8004a18 <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001122:	f000 f82b 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200003d4 	.word	0x200003d4
 8001130:	40004400 	.word	0x40004400

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_GPIO_Init+0x44>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <MX_GPIO_Init+0x44>)
 8001140:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_GPIO_Init+0x44>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_GPIO_Init+0x44>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <MX_GPIO_Init+0x44>)
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	6153      	str	r3, [r2, #20]
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_GPIO_Init+0x44>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]

}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_MspInit+0x44>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_MspInit+0x44>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6193      	str	r3, [r2, #24]
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_MspInit+0x44>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x44>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x44>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x44>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011f4:	d12e      	bne.n	8001254 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_ADC_MspInit+0xbc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a24      	ldr	r2, [pc, #144]	; (8001290 <HAL_ADC_MspInit+0xbc>)
 80011fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_ADC_MspInit+0xbc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d10b      	bne.n	8001220 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_ADC_MspInit+0xc0>)
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	4a21      	ldr	r2, [pc, #132]	; (8001294 <HAL_ADC_MspInit+0xc0>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001212:	6153      	str	r3, [r2, #20]
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_ADC_MspInit+0xc0>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_ADC_MspInit+0xc0>)
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_ADC_MspInit+0xc0>)
 8001226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122a:	6153      	str	r3, [r2, #20]
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_ADC_MspInit+0xc0>)
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001238:	2301      	movs	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123c:	2303      	movs	r3, #3
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f001 f975 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001252:	e019      	b.n	8001288 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_ADC_MspInit+0xc4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d114      	bne.n	8001288 <HAL_ADC_MspInit+0xb4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_ADC_MspInit+0xbc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_ADC_MspInit+0xbc>)
 8001266:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_ADC_MspInit+0xbc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_ADC_MspInit+0xc0>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_ADC_MspInit+0xc0>)
 8001276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127a:	6153      	str	r3, [r2, #20]
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_ADC_MspInit+0xc0>)
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000200 	.word	0x20000200
 8001294:	40021000 	.word	0x40021000
 8001298:	50000100 	.word	0x50000100

0800129c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <HAL_OPAMP_MspInit+0x5c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d118      	bne.n	80012f0 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_OPAMP_MspInit+0x60>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_OPAMP_MspInit+0x60>)
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	6153      	str	r3, [r2, #20]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_OPAMP_MspInit+0x60>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration    
    PA6     ------> OPAMP2_VOUT
    PA7     ------> OPAMP2_VINP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d6:	23c0      	movs	r3, #192	; 0xc0
 80012d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012da:	2303      	movs	r3, #3
 80012dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ec:	f001 f926 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	4001003c 	.word	0x4001003c
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_TIM_PWM_MspInit+0x38>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10b      	bne.n	800132a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_TIM_PWM_MspInit+0x3c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a09      	ldr	r2, [pc, #36]	; (800133c <HAL_TIM_PWM_MspInit+0x3c>)
 8001318:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_TIM_PWM_MspInit+0x3c>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40012c00 	.word	0x40012c00
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_TIM_MspPostInit+0x68>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d11d      	bne.n	800139e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800137a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800138c:	2306      	movs	r3, #6
 800138e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f001 f8cf 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800139e:	bf00      	nop
 80013a0:	3720      	adds	r7, #32
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a18      	ldr	r2, [pc, #96]	; (8001430 <HAL_UART_MspInit+0x80>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d129      	bne.n	8001426 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_UART_MspInit+0x84>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_UART_MspInit+0x84>)
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_UART_MspInit+0x84>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_UART_MspInit+0x84>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_UART_MspInit+0x84>)
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	6153      	str	r3, [r2, #20]
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_UART_MspInit+0x84>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001402:	f248 0304 	movw	r3, #32772	; 0x8004
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001414:	2307      	movs	r3, #7
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f001 f88b 	bl	800253c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40004400 	.word	0x40004400
 8001434:	40021000 	.word	0x40021000

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f8b4 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <_sbrk+0x50>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x16>
		heap_end = &end;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <_sbrk+0x50>)
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <_sbrk+0x54>)
 80014a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <_sbrk+0x50>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <_sbrk+0x50>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	466a      	mov	r2, sp
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d907      	bls.n	80014ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014be:	f003 fddd 	bl	800507c <__errno>
 80014c2:	4602      	mov	r2, r0
 80014c4:	230c      	movs	r3, #12
 80014c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014cc:	e006      	b.n	80014dc <_sbrk+0x48>
	}

	heap_end += incr;
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <_sbrk+0x50>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <_sbrk+0x50>)
 80014d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000204 	.word	0x20000204
 80014e8:	20000460 	.word	0x20000460

080014ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <SystemInit+0x28>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f6:	4a07      	ldr	r2, [pc, #28]	; (8001514 <SystemInit+0x28>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SystemInit+0x28>)
 8001502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001506:	609a      	str	r2, [r3, #8]
#endif
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001550 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800151c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800151e:	e003      	b.n	8001528 <LoopCopyDataInit>

08001520 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001522:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001524:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001526:	3104      	adds	r1, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <LoopForever+0xa>)
	ldr	r3, =_edata
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <LoopForever+0xe>)
	adds	r2, r0, r1
 800152c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800152e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001530:	d3f6      	bcc.n	8001520 <CopyDataInit>
	ldr	r2, =_sbss
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001534:	e002      	b.n	800153c <LoopFillZerobss>

08001536 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001536:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001538:	f842 3b04 	str.w	r3, [r2], #4

0800153c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <LoopForever+0x16>)
	cmp	r2, r3
 800153e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001540:	d3f9      	bcc.n	8001536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001542:	f7ff ffd3 	bl	80014ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001546:	f003 fd9f 	bl	8005088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800154a:	f7ff fb7d 	bl	8000c48 <main>

0800154e <LoopForever>:

LoopForever:
    b LoopForever
 800154e:	e7fe      	b.n	800154e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001550:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001554:	08007fcc 	.word	0x08007fcc
	ldr	r0, =_sdata
 8001558:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800155c:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8001560:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8001564:	2000045c 	.word	0x2000045c

08001568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC1_2_IRQHandler>
	...

0800156c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x28>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x28>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 ffa9 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fe00 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000

08001598 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 ffb3 	bl	8002522 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d4:	f000 ff89 	bl	80024ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	20000454 	.word	0x20000454

08001620 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;  
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000454 	.word	0x20000454

08001638 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b09a      	sub	sp, #104	; 0x68
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e172      	b.n	800193e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d176      	bne.n	8001758 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d152      	bne.n	8001718 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fda1 	bl	80011d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d13b      	bne.n	8001718 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fe05 	bl	80022b0 <ADC_Disable>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d12f      	bne.n	8001718 <HAL_ADC_Init+0xe0>
 80016b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d12b      	bne.n	8001718 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016c8:	f023 0302 	bic.w	r3, r3, #2
 80016cc:	f043 0202 	orr.w	r2, r3, #2
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016f4:	4b94      	ldr	r3, [pc, #592]	; (8001948 <HAL_ADC_Init+0x310>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a94      	ldr	r2, [pc, #592]	; (800194c <HAL_ADC_Init+0x314>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0c9a      	lsrs	r2, r3, #18
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800170a:	e002      	b.n	8001712 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3b01      	subs	r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f9      	bne.n	800170c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001734:	d110      	bne.n	8001758 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f023 0312 	bic.w	r3, r3, #18
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 80df 	bne.w	8001924 <HAL_ADC_Init+0x2ec>
 8001766:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 80da 	bne.w	8001924 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 80d2 	bne.w	8001924 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001788:	f043 0202 	orr.w	r2, r3, #2
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001790:	4b6f      	ldr	r3, [pc, #444]	; (8001950 <HAL_ADC_Init+0x318>)
 8001792:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800179c:	d102      	bne.n	80017a4 <HAL_ADC_Init+0x16c>
 800179e:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <HAL_ADC_Init+0x31c>)
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	e002      	b.n	80017aa <HAL_ADC_Init+0x172>
 80017a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017a8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d108      	bne.n	80017ca <HAL_ADC_Init+0x192>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <HAL_ADC_Init+0x192>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_ADC_Init+0x194>
 80017ca:	2300      	movs	r3, #0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d11c      	bne.n	800180a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d010      	beq.n	80017f8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_ADC_Init+0x1ba>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_Init+0x1ba>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_ADC_Init+0x1bc>
 80017f2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d108      	bne.n	800180a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80017f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	431a      	orrs	r2, r3
 8001806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001808:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7e5b      	ldrb	r3, [r3, #25]
 800180e:	035b      	lsls	r3, r3, #13
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001814:	2a01      	cmp	r2, #1
 8001816:	d002      	beq.n	800181e <HAL_ADC_Init+0x1e6>
 8001818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800181c:	e000      	b.n	8001820 <HAL_ADC_Init+0x1e8>
 800181e:	2200      	movs	r2, #0
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4313      	orrs	r3, r2
 800182e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001830:	4313      	orrs	r3, r2
 8001832:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d11b      	bne.n	8001876 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7e5b      	ldrb	r3, [r3, #25]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	3b01      	subs	r3, #1
 800184c:	045a      	lsls	r2, r3, #17
 800184e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001850:	4313      	orrs	r3, r2
 8001852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001856:	663b      	str	r3, [r7, #96]	; 0x60
 8001858:	e00d      	b.n	8001876 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001862:	f043 0220 	orr.w	r2, r3, #32
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f043 0201 	orr.w	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	2b01      	cmp	r3, #1
 800187c:	d007      	beq.n	800188e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	4313      	orrs	r3, r2
 8001888:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800188a:	4313      	orrs	r3, r2
 800188c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b00      	cmp	r3, #0
 800189a:	d114      	bne.n	80018c6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018aa:	f023 0302 	bic.w	r3, r3, #2
 80018ae:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7e1b      	ldrb	r3, [r3, #24]
 80018b4:	039a      	lsls	r2, r3, #14
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4313      	orrs	r3, r2
 80018c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018c2:	4313      	orrs	r3, r2
 80018c4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_ADC_Init+0x320>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018d6:	430b      	orrs	r3, r1
 80018d8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10c      	bne.n	80018fc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f023 010f 	bic.w	r1, r3, #15
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	1e5a      	subs	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
 80018fa:	e007      	b.n	800190c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 020f 	bic.w	r2, r2, #15
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
 8001922:	e00a      	b.n	800193a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f023 0312 	bic.w	r3, r3, #18
 800192c:	f043 0210 	orr.w	r2, r3, #16
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001934:	2301      	movs	r3, #1
 8001936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800193a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800193e:	4618      	mov	r0, r3
 8001940:	3768      	adds	r7, #104	; 0x68
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000
 800194c:	431bde83 	.word	0x431bde83
 8001950:	50000300 	.word	0x50000300
 8001954:	50000100 	.word	0x50000100
 8001958:	fff0c007 	.word	0xfff0c007

0800195c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 809c 	bne.w	8001ab0 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_ADC_Start+0x2a>
 8001982:	2302      	movs	r3, #2
 8001984:	e097      	b.n	8001ab6 <HAL_ADC_Start+0x15a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fc30 	bl	80021f4 <ADC_Enable>
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 8083 	bne.w	8001aa6 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019b4:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <HAL_ADC_Start+0x164>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_ADC_Start+0x6e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c8:	d115      	bne.n	80019f6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d027      	beq.n	8001a34 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019f4:	e01e      	b.n	8001a34 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a0a:	d004      	beq.n	8001a16 <HAL_ADC_Start+0xba>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2c      	ldr	r2, [pc, #176]	; (8001ac4 <HAL_ADC_Start+0x168>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10e      	bne.n	8001a34 <HAL_ADC_Start+0xd8>
 8001a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a40:	d106      	bne.n	8001a50 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f023 0206 	bic.w	r2, r3, #6
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a4e:	e002      	b.n	8001a56 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	221c      	movs	r2, #28
 8001a64:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_ADC_Start+0x164>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d010      	beq.n	8001a94 <HAL_ADC_Start+0x138>
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_ADC_Start+0x164>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d00a      	beq.n	8001a94 <HAL_ADC_Start+0x138>
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_ADC_Start+0x164>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2b09      	cmp	r3, #9
 8001a88:	d004      	beq.n	8001a94 <HAL_ADC_Start+0x138>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a92:	d10f      	bne.n	8001ab4 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0204 	orr.w	r2, r2, #4
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	e006      	b.n	8001ab4 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001aae:	e001      	b.n	8001ab4 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	50000300 	.word	0x50000300
 8001ac4:	50000100 	.word	0x50000100

08001ac8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b09b      	sub	sp, #108	; 0x6c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x22>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e2a5      	b.n	8002052 <HAL_ADC_ConfigChannel+0x56e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 8289 	bne.w	8002030 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d81c      	bhi.n	8001b60 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	461a      	mov	r2, r3
 8001b3a:	231f      	movs	r3, #31
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4019      	ands	r1, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa00 f203 	lsl.w	r2, r0, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b5e:	e063      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d81e      	bhi.n	8001ba6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	3b1e      	subs	r3, #30
 8001b7c:	221f      	movs	r2, #31
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	4019      	ands	r1, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba4:	e040      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b0e      	cmp	r3, #14
 8001bac:	d81e      	bhi.n	8001bec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	3b3c      	subs	r3, #60	; 0x3c
 8001bc2:	221f      	movs	r2, #31
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4019      	ands	r1, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	3b3c      	subs	r3, #60	; 0x3c
 8001bde:	fa00 f203 	lsl.w	r2, r0, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38
 8001bea:	e01d      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	3b5a      	subs	r3, #90	; 0x5a
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4019      	ands	r1, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	3b5a      	subs	r3, #90	; 0x5a
 8001c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 80e5 	bne.w	8001e02 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	d91c      	bls.n	8001c7a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6999      	ldr	r1, [r3, #24]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b1e      	subs	r3, #30
 8001c52:	2207      	movs	r2, #7
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4019      	ands	r1, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6898      	ldr	r0, [r3, #8]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b1e      	subs	r3, #30
 8001c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	619a      	str	r2, [r3, #24]
 8001c78:	e019      	b.n	8001cae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6959      	ldr	r1, [r3, #20]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4019      	ands	r1, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6898      	ldr	r0, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d84f      	bhi.n	8001d70 <HAL_ADC_ConfigChannel+0x28c>
 8001cd0:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001d0b 	.word	0x08001d0b
 8001ce0:	08001d2d 	.word	0x08001d2d
 8001ce4:	08001d4f 	.word	0x08001d4f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cee:	4b9e      	ldr	r3, [pc, #632]	; (8001f68 <HAL_ADC_ConfigChannel+0x484>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	0691      	lsls	r1, r2, #26
 8001cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d06:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d08:	e07e      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d10:	4b95      	ldr	r3, [pc, #596]	; (8001f68 <HAL_ADC_ConfigChannel+0x484>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	0691      	lsls	r1, r2, #26
 8001d1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d28:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d2a:	e06d      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d32:	4b8d      	ldr	r3, [pc, #564]	; (8001f68 <HAL_ADC_ConfigChannel+0x484>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	0691      	lsls	r1, r2, #26
 8001d3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d4a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d4c:	e05c      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d54:	4b84      	ldr	r3, [pc, #528]	; (8001f68 <HAL_ADC_ConfigChannel+0x484>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	0691      	lsls	r1, r2, #26
 8001d5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d60:	430a      	orrs	r2, r1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d6c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d6e:	e04b      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	069b      	lsls	r3, r3, #26
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d107      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d92:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	069b      	lsls	r3, r3, #26
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d107      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001db6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	069b      	lsls	r3, r3, #26
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d107      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dda:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	069b      	lsls	r3, r3, #26
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d10a      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dfe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e00:	e001      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001e02:	bf00      	nop
 8001e04:	e000      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001e06:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d108      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x344>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x344>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x346>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f040 810b 	bne.w	8002046 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d00f      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	400a      	ands	r2, r1
 8001e52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e56:	e049      	b.n	8001eec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	409a      	lsls	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b09      	cmp	r3, #9
 8001e78:	d91c      	bls.n	8001eb4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6999      	ldr	r1, [r3, #24]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b1b      	subs	r3, #27
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4019      	ands	r1, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6898      	ldr	r0, [r3, #8]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b1b      	subs	r3, #27
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	619a      	str	r2, [r3, #24]
 8001eb2:	e01b      	b.n	8001eec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6959      	ldr	r1, [r3, #20]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4019      	ands	r1, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eec:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <HAL_ADC_ConfigChannel+0x488>)
 8001eee:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b10      	cmp	r3, #16
 8001ef6:	d105      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d015      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f08:	2b11      	cmp	r3, #17
 8001f0a:	d105      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f1c:	2b12      	cmp	r3, #18
 8001f1e:	f040 8092 	bne.w	8002046 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 808b 	bne.w	8002046 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f38:	d102      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x45c>
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_ADC_ConfigChannel+0x48c>)
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	e002      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x462>
 8001f40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f44:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10f      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x490>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x490>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e007      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x492>
 8001f66:	bf00      	nop
 8001f68:	83fff000 	.word	0x83fff000
 8001f6c:	50000300 	.word	0x50000300
 8001f70:	50000100 	.word	0x50000100
 8001f74:	2300      	movs	r3, #0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d150      	bne.n	800201c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f7a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d010      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d107      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x4b8>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x4b8>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x4ba>
 8001f9c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d13c      	bne.n	800201c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d11d      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x502>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb2:	d118      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbe:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_ADC_ConfigChannel+0x57c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a27      	ldr	r2, [pc, #156]	; (8002064 <HAL_ADC_ConfigChannel+0x580>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9a      	lsrs	r2, r3, #18
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fd6:	e002      	b.n	8001fde <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f9      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fe4:	e02e      	b.n	8002044 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b11      	cmp	r3, #17
 8001fec:	d10b      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x522>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ff6:	d106      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002002:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002004:	e01e      	b.n	8002044 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b12      	cmp	r3, #18
 800200c:	d11a      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800200e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002018:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800201a:	e013      	b.n	8002044 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800202e:	e00a      	b.n	8002046 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f043 0220 	orr.w	r2, r3, #32
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002042:	e000      	b.n	8002046 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002044:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800204e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002052:	4618      	mov	r0, r3
 8002054:	376c      	adds	r7, #108	; 0x6c
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000
 8002064:	431bde83 	.word	0x431bde83

08002068 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002068:	b480      	push	{r7}
 800206a:	b099      	sub	sp, #100	; 0x64
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002080:	d102      	bne.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002082:	4b5a      	ldr	r3, [pc, #360]	; (80021ec <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	e002      	b.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002088:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800208c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0a2      	b.n	80021de <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e09b      	b.n	80021de <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d17f      	bne.n	80021bc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d179      	bne.n	80021bc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c8:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80020ca:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d040      	beq.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e6:	035b      	lsls	r3, r3, #13
 80020e8:	430b      	orrs	r3, r1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ee:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d108      	bne.n	8002110 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002110:	2300      	movs	r3, #0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d15c      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002132:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002134:	2b00      	cmp	r3, #0
 8002136:	d14b      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002140:	f023 030f 	bic.w	r3, r3, #15
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	6811      	ldr	r1, [r2, #0]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	6892      	ldr	r2, [r2, #8]
 800214c:	430a      	orrs	r2, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002152:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002154:	e03c      	b.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800215e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002160:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d108      	bne.n	8002182 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d123      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d107      	bne.n	80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80021a4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d112      	bne.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80021aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021b2:	f023 030f 	bic.w	r3, r3, #15
 80021b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021b8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021ba:	e009      	b.n	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80021ce:	e000      	b.n	80021d2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021d0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80021de:	4618      	mov	r0, r3
 80021e0:	3764      	adds	r7, #100	; 0x64
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	50000100 	.word	0x50000100
 80021f0:	50000300 	.word	0x50000300

080021f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <ADC_Enable+0x2c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <ADC_Enable+0x2c>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <ADC_Enable+0x2e>
 8002220:	2300      	movs	r3, #0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d13c      	bne.n	80022a0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <ADC_Enable+0xb8>)
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00d      	beq.n	8002250 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f043 0210 	orr.w	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e028      	b.n	80022a2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002260:	f7ff f9de 	bl	8001620 <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002266:	e014      	b.n	8002292 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002268:	f7ff f9da 	bl	8001620 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d90d      	bls.n	8002292 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f043 0210 	orr.w	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e007      	b.n	80022a2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d1e3      	bne.n	8002268 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	8000003f 	.word	0x8000003f

080022b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d108      	bne.n	80022dc <ADC_Disable+0x2c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <ADC_Disable+0x2c>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <ADC_Disable+0x2e>
 80022dc:	2300      	movs	r3, #0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d040      	beq.n	8002364 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 030d 	and.w	r3, r3, #13
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10f      	bne.n	8002310 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0202 	orr.w	r2, r2, #2
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2203      	movs	r2, #3
 8002306:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002308:	f7ff f98a 	bl	8001620 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800230e:	e022      	b.n	8002356 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f043 0210 	orr.w	r2, r3, #16
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e01c      	b.n	8002366 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800232c:	f7ff f978 	bl	8001620 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d90d      	bls.n	8002356 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f043 0210 	orr.w	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e007      	b.n	8002366 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d0e3      	beq.n	800232c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	; (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	; (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a0:	d301      	bcc.n	80024a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <SysTick_Config+0x40>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ae:	210f      	movs	r1, #15
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b4:	f7ff ff8e 	bl	80023d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <SysTick_Config+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <SysTick_Config+0x40>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff47 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024fc:	f7ff ff5c 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 8002500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	6978      	ldr	r0, [r7, #20]
 8002508:	f7ff ff8e 	bl	8002428 <NVIC_EncodePriority>
 800250c:	4602      	mov	r2, r0
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff5d 	bl	80023d4 <__NVIC_SetPriority>
}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffb0 	bl	8002490 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254a:	e14e      	b.n	80027ea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2101      	movs	r1, #1
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8140 	beq.w	80027e4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d00b      	beq.n	8002584 <HAL_GPIO_Init+0x48>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d007      	beq.n	8002584 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002578:	2b11      	cmp	r3, #17
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b12      	cmp	r3, #18
 8002582:	d130      	bne.n	80025e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ba:	2201      	movs	r2, #1
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 0201 	and.w	r2, r3, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0xea>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b12      	cmp	r3, #18
 8002624:	d123      	bne.n	800266e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	6939      	ldr	r1, [r7, #16]
 800266a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0203 	and.w	r2, r3, #3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 809a 	beq.w	80027e4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b0:	4b55      	ldr	r3, [pc, #340]	; (8002808 <HAL_GPIO_Init+0x2cc>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a54      	ldr	r2, [pc, #336]	; (8002808 <HAL_GPIO_Init+0x2cc>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b52      	ldr	r3, [pc, #328]	; (8002808 <HAL_GPIO_Init+0x2cc>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026c8:	4a50      	ldr	r2, [pc, #320]	; (800280c <HAL_GPIO_Init+0x2d0>)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026f2:	d013      	beq.n	800271c <HAL_GPIO_Init+0x1e0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a46      	ldr	r2, [pc, #280]	; (8002810 <HAL_GPIO_Init+0x2d4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00d      	beq.n	8002718 <HAL_GPIO_Init+0x1dc>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a45      	ldr	r2, [pc, #276]	; (8002814 <HAL_GPIO_Init+0x2d8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <HAL_GPIO_Init+0x1d8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a44      	ldr	r2, [pc, #272]	; (8002818 <HAL_GPIO_Init+0x2dc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_GPIO_Init+0x1d4>
 800270c:	2303      	movs	r3, #3
 800270e:	e006      	b.n	800271e <HAL_GPIO_Init+0x1e2>
 8002710:	2305      	movs	r3, #5
 8002712:	e004      	b.n	800271e <HAL_GPIO_Init+0x1e2>
 8002714:	2302      	movs	r3, #2
 8002716:	e002      	b.n	800271e <HAL_GPIO_Init+0x1e2>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_GPIO_Init+0x1e2>
 800271c:	2300      	movs	r3, #0
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	f002 0203 	and.w	r2, r2, #3
 8002724:	0092      	lsls	r2, r2, #2
 8002726:	4093      	lsls	r3, r2
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800272e:	4937      	ldr	r1, [pc, #220]	; (800280c <HAL_GPIO_Init+0x2d0>)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800273c:	4b37      	ldr	r3, [pc, #220]	; (800281c <HAL_GPIO_Init+0x2e0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	43db      	mvns	r3, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002760:	4a2e      	ldr	r2, [pc, #184]	; (800281c <HAL_GPIO_Init+0x2e0>)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002766:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_GPIO_Init+0x2e0>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	43db      	mvns	r3, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800278a:	4a24      	ldr	r2, [pc, #144]	; (800281c <HAL_GPIO_Init+0x2e0>)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_GPIO_Init+0x2e0>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	43db      	mvns	r3, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027b4:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_GPIO_Init+0x2e0>)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_GPIO_Init+0x2e0>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027de:	4a0f      	ldr	r2, [pc, #60]	; (800281c <HAL_GPIO_Init+0x2e0>)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3301      	adds	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f aea9 	bne.w	800254c <HAL_GPIO_Init+0x10>
  }
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	40010000 	.word	0x40010000
 8002810:	48000400 	.word	0x48000400
 8002814:	48000800 	.word	0x48000800
 8002818:	48000c00 	.word	0x48000c00
 800281c:	40010400 	.word	0x40010400

08002820 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e092      	b.n	800295c <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b05      	cmp	r3, #5
 8002840:	d101      	bne.n	8002846 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e08a      	b.n	800295c <HAL_OPAMP_Init+0x13c>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d101      	bne.n	8002856 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e082      	b.n	800295c <HAL_OPAMP_Init+0x13c>

    /* Set OPAMP parameters */
    assert_param(IS_OPAMP_FUNCTIONAL_NORMALMODE(hopamp->Init.Mode));
    assert_param(IS_OPAMP_NONINVERTING_INPUT(hopamp->Init.NonInvertingInput));

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	4b40      	ldr	r3, [pc, #256]	; (8002964 <HAL_OPAMP_Init+0x144>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4a3f      	ldr	r2, [pc, #252]	; (8002964 <HAL_OPAMP_Init+0x144>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6193      	str	r3, [r2, #24]
 800286e:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <HAL_OPAMP_Init+0x144>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_OPAMP_Init+0x6e>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fd04 	bl	800129c <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b40      	cmp	r3, #64	; 0x40
 800289a:	d003      	beq.n	80028a4 <HAL_OPAMP_Init+0x84>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d125      	bne.n	80028f0 <HAL_OPAMP_Init+0xd0>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <HAL_OPAMP_Init+0x148>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6851      	ldr	r1, [r2, #4]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6912      	ldr	r2, [r2, #16]
 80028bc:	4311      	orrs	r1, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6992      	ldr	r2, [r2, #24]
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	69d2      	ldr	r2, [r2, #28]
 80028c8:	4311      	orrs	r1, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6a12      	ldr	r2, [r2, #32]
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d4:	4311      	orrs	r1, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028da:	04d2      	lsls	r2, r2, #19
 80028dc:	4311      	orrs	r1, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028e2:	0612      	lsls	r2, r2, #24
 80028e4:	4311      	orrs	r1, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	430b      	orrs	r3, r1
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e02a      	b.n	8002946 <HAL_OPAMP_Init+0x126>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_OPAMP_Init+0x148>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6851      	ldr	r1, [r2, #4]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6892      	ldr	r2, [r2, #8]
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68d2      	ldr	r2, [r2, #12]
 8002908:	4311      	orrs	r1, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6912      	ldr	r2, [r2, #16]
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6952      	ldr	r2, [r2, #20]
 8002914:	4311      	orrs	r1, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6992      	ldr	r2, [r2, #24]
 800291a:	4311      	orrs	r1, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	69d2      	ldr	r2, [r2, #28]
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6a12      	ldr	r2, [r2, #32]
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002932:	04d2      	lsls	r2, r2, #19
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800293a:	0612      	lsls	r2, r2, #24
 800293c:	4311      	orrs	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	430b      	orrs	r3, r1
 8002944:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <HAL_OPAMP_Init+0x13a>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	e0003811 	.word	0xe0003811

0800296c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	e01d      	b.n	80029c0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b05      	cmp	r3, #5
 800298e:	d102      	bne.n	8002996 <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	e014      	b.n	80029c0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10c      	bne.n	80029bc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2204      	movs	r2, #4
 80029b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80029ba:	e001      	b.n	80029c0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f000 bef4 	b.w	80037d2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 816a 	beq.w	8002cce <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029fa:	4bb3      	ldr	r3, [pc, #716]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d00c      	beq.n	8002a20 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a06:	4bb0      	ldr	r3, [pc, #704]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d159      	bne.n	8002ac6 <HAL_RCC_OscConfig+0xf6>
 8002a12:	4bad      	ldr	r3, [pc, #692]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1e:	d152      	bne.n	8002ac6 <HAL_RCC_OscConfig+0xf6>
 8002a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a24:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a34:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d102      	bne.n	8002a52 <HAL_RCC_OscConfig+0x82>
 8002a4c:	4b9e      	ldr	r3, [pc, #632]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	e015      	b.n	8002a7e <HAL_RCC_OscConfig+0xae>
 8002a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a56:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a6e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a7a:	4b93      	ldr	r3, [pc, #588]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a82:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a86:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a8a:	fa92 f2a2 	rbit	r2, r2
 8002a8e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a92:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 810c 	beq.w	8002ccc <HAL_RCC_OscConfig+0x2fc>
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 8106 	bne.w	8002ccc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f000 be86 	b.w	80037d2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x110>
 8002ad2:	4b7d      	ldr	r3, [pc, #500]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7c      	ldr	r2, [pc, #496]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e030      	b.n	8002b42 <HAL_RCC_OscConfig+0x172>
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x134>
 8002aea:	4b77      	ldr	r3, [pc, #476]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a76      	ldr	r2, [pc, #472]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b74      	ldr	r3, [pc, #464]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a73      	ldr	r2, [pc, #460]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01e      	b.n	8002b42 <HAL_RCC_OscConfig+0x172>
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCC_OscConfig+0x15a>
 8002b10:	4b6d      	ldr	r3, [pc, #436]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a6c      	ldr	r2, [pc, #432]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a69      	ldr	r2, [pc, #420]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	e00b      	b.n	8002b42 <HAL_RCC_OscConfig+0x172>
 8002b2a:	4b67      	ldr	r3, [pc, #412]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a66      	ldr	r2, [pc, #408]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b64      	ldr	r3, [pc, #400]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a63      	ldr	r2, [pc, #396]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b42:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	f023 020f 	bic.w	r2, r3, #15
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	495d      	ldr	r1, [pc, #372]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d059      	beq.n	8002c14 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fd5e 	bl	8001620 <HAL_GetTick>
 8002b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6a:	f7fe fd59 	bl	8001620 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d902      	bls.n	8002b80 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	f000 be29 	b.w	80037d2 <HAL_RCC_OscConfig+0xe02>
 8002b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b84:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b94:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d102      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x1e2>
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x20e>
 8002bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bce:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002be2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002be6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bea:	fa92 f2a2 	rbit	r2, r2
 8002bee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bf2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0ab      	beq.n	8002b6a <HAL_RCC_OscConfig+0x19a>
 8002c12:	e05c      	b.n	8002cce <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fd04 	bl	8001620 <HAL_GetTick>
 8002c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1e:	f7fe fcff 	bl	8001620 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d902      	bls.n	8002c34 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	f000 bdcf 	b.w	80037d2 <HAL_RCC_OscConfig+0xe02>
 8002c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c38:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c48:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_OscConfig+0x296>
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	e015      	b.n	8002c92 <HAL_RCC_OscConfig+0x2c2>
 8002c66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c7e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c82:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <HAL_RCC_OscConfig+0x2f8>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c96:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c9a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c9e:	fa92 f2a2 	rbit	r2, r2
 8002ca2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ca6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002caa:	fab2 f282 	clz	r2, r2
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f042 0220 	orr.w	r2, r2, #32
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f002 021f 	and.w	r2, r2, #31
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ab      	bne.n	8002c1e <HAL_RCC_OscConfig+0x24e>
 8002cc6:	e002      	b.n	8002cce <HAL_RCC_OscConfig+0x2fe>
 8002cc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 816f 	beq.w	8002fbc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cde:	4bd0      	ldr	r3, [pc, #832]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cea:	4bcd      	ldr	r3, [pc, #820]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d16c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x400>
 8002cf6:	4bca      	ldr	r3, [pc, #808]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d166      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x400>
 8002d02:	2302      	movs	r3, #2
 8002d04:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d14:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_OscConfig+0x362>
 8002d2c:	4bbc      	ldr	r3, [pc, #752]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	e013      	b.n	8002d5a <HAL_RCC_OscConfig+0x38a>
 8002d32:	2302      	movs	r3, #2
 8002d34:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d4a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d56:	4bb2      	ldr	r3, [pc, #712]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d60:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d64:	fa92 f2a2 	rbit	r2, r2
 8002d68:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d6c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d70:	fab2 f282 	clz	r2, r2
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	f042 0220 	orr.w	r2, r2, #32
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	f002 021f 	and.w	r2, r2, #31
 8002d80:	2101      	movs	r1, #1
 8002d82:	fa01 f202 	lsl.w	r2, r1, r2
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_RCC_OscConfig+0x3cc>
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d002      	beq.n	8002d9c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f000 bd1b 	b.w	80037d2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9c:	4ba0      	ldr	r3, [pc, #640]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	21f8      	movs	r1, #248	; 0xf8
 8002dac:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002db4:	fa91 f1a1 	rbit	r1, r1
 8002db8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002dbc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002dc0:	fab1 f181 	clz	r1, r1
 8002dc4:	b2c9      	uxtb	r1, r1
 8002dc6:	408b      	lsls	r3, r1
 8002dc8:	4995      	ldr	r1, [pc, #596]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	e0f5      	b.n	8002fbc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8085 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x516>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002dee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	461a      	mov	r2, r3
 8002e04:	2301      	movs	r3, #1
 8002e06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fc0a 	bl	8001620 <HAL_GetTick>
 8002e0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e12:	f7fe fc05 	bl	8001620 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	f000 bcd5 	b.w	80037d2 <HAL_RCC_OscConfig+0xe02>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e3a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d102      	bne.n	8002e58 <HAL_RCC_OscConfig+0x488>
 8002e52:	4b73      	ldr	r3, [pc, #460]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	e013      	b.n	8002e80 <HAL_RCC_OscConfig+0x4b0>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e7c:	4b68      	ldr	r3, [pc, #416]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	2202      	movs	r2, #2
 8002e82:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e86:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e8a:	fa92 f2a2 	rbit	r2, r2
 8002e8e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e92:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e96:	fab2 f282 	clz	r2, r2
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	f042 0220 	orr.w	r2, r2, #32
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f002 021f 	and.w	r2, r2, #31
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0af      	beq.n	8002e12 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b5b      	ldr	r3, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	21f8      	movs	r1, #248	; 0xf8
 8002ec2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002eca:	fa91 f1a1 	rbit	r1, r1
 8002ece:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ed2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ed6:	fab1 f181 	clz	r1, r1
 8002eda:	b2c9      	uxtb	r1, r1
 8002edc:	408b      	lsls	r3, r1
 8002ede:	4950      	ldr	r1, [pc, #320]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]
 8002ee4:	e06a      	b.n	8002fbc <HAL_RCC_OscConfig+0x5ec>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ef8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f12:	f7fe fb85 	bl	8001620 <HAL_GetTick>
 8002f16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fe fb80 	bl	8001620 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d902      	bls.n	8002f32 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	f000 bc50 	b.w	80037d2 <HAL_RCC_OscConfig+0xe02>
 8002f32:	2302      	movs	r3, #2
 8002f34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d102      	bne.n	8002f62 <HAL_RCC_OscConfig+0x592>
 8002f5c:	4b30      	ldr	r3, [pc, #192]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	e013      	b.n	8002f8a <HAL_RCC_OscConfig+0x5ba>
 8002f62:	2302      	movs	r3, #2
 8002f64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f74:	2302      	movs	r3, #2
 8002f76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f86:	4b26      	ldr	r3, [pc, #152]	; (8003020 <HAL_RCC_OscConfig+0x650>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f90:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f94:	fa92 f2a2 	rbit	r2, r2
 8002f98:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f9c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fa0:	fab2 f282 	clz	r2, r2
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f042 0220 	orr.w	r2, r2, #32
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f002 021f 	and.w	r2, r2, #31
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1af      	bne.n	8002f1c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80da 	beq.w	8003180 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d069      	beq.n	80030aa <HAL_RCC_OscConfig+0x6da>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_OscConfig+0x654>)
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003000:	f7fe fb0e 	bl	8001620 <HAL_GetTick>
 8003004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003008:	e00e      	b.n	8003028 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300a:	f7fe fb09 	bl	8001620 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d906      	bls.n	8003028 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e3d9      	b.n	80037d2 <HAL_RCC_OscConfig+0xe02>
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000
 8003024:	10908120 	.word	0x10908120
 8003028:	2302      	movs	r3, #2
 800302a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800303a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800303e:	2202      	movs	r2, #2
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	fa93 f2a3 	rbit	r2, r3
 800304c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003056:	2202      	movs	r2, #2
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fa93 f2a3 	rbit	r2, r3
 8003064:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003068:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	4ba5      	ldr	r3, [pc, #660]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 800306c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800306e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003072:	2102      	movs	r1, #2
 8003074:	6019      	str	r1, [r3, #0]
 8003076:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	fa93 f1a3 	rbit	r1, r3
 8003080:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003084:	6019      	str	r1, [r3, #0]
  return result;
 8003086:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0b0      	beq.n	800300a <HAL_RCC_OscConfig+0x63a>
 80030a8:	e06a      	b.n	8003180 <HAL_RCC_OscConfig+0x7b0>
 80030aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030c0:	601a      	str	r2, [r3, #0]
  return result;
 80030c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030c6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b8c      	ldr	r3, [pc, #560]	; (8003304 <HAL_RCC_OscConfig+0x934>)
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	461a      	mov	r2, r3
 80030d8:	2300      	movs	r3, #0
 80030da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fe faa0 	bl	8001620 <HAL_GetTick>
 80030e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	e009      	b.n	80030fa <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e6:	f7fe fa9b 	bl	8001620 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e36b      	b.n	80037d2 <HAL_RCC_OscConfig+0xe02>
 80030fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030fe:	2202      	movs	r2, #2
 8003100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	fa93 f2a3 	rbit	r2, r3
 800310c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003116:	2202      	movs	r2, #2
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	fa93 f2a3 	rbit	r2, r3
 8003124:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800312e:	2202      	movs	r2, #2
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	fa93 f2a3 	rbit	r2, r3
 800313c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003140:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003142:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 8003144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003146:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800314a:	2102      	movs	r1, #2
 800314c:	6019      	str	r1, [r3, #0]
 800314e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	fa93 f1a3 	rbit	r1, r3
 8003158:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800315c:	6019      	str	r1, [r3, #0]
  return result;
 800315e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1b2      	bne.n	80030e6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8158 	beq.w	8003440 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003190:	2300      	movs	r3, #0
 8003192:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b5a      	ldr	r3, [pc, #360]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d112      	bne.n	80031c8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b57      	ldr	r3, [pc, #348]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a56      	ldr	r2, [pc, #344]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]
 80031ae:	4b54      	ldr	r3, [pc, #336]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031b6:	f107 0308 	add.w	r3, r7, #8
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	f107 0308 	add.w	r3, r7, #8
 80031c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <HAL_RCC_OscConfig+0x938>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11a      	bne.n	800320a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d4:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <HAL_RCC_OscConfig+0x938>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a4b      	ldr	r2, [pc, #300]	; (8003308 <HAL_RCC_OscConfig+0x938>)
 80031da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e0:	f7fe fa1e 	bl	8001620 <HAL_GetTick>
 80031e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e8:	e009      	b.n	80031fe <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ea:	f7fe fa19 	bl	8001620 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e2e9      	b.n	80037d2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b42      	ldr	r3, [pc, #264]	; (8003308 <HAL_RCC_OscConfig+0x938>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ef      	beq.n	80031ea <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320a:	1d3b      	adds	r3, r7, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x852>
 8003214:	4b3a      	ldr	r3, [pc, #232]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a39      	ldr	r2, [pc, #228]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e02f      	b.n	8003282 <HAL_RCC_OscConfig+0x8b2>
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10c      	bne.n	8003246 <HAL_RCC_OscConfig+0x876>
 800322c:	4b34      	ldr	r3, [pc, #208]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a33      	ldr	r2, [pc, #204]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a30      	ldr	r2, [pc, #192]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 800323e:	f023 0304 	bic.w	r3, r3, #4
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	e01d      	b.n	8003282 <HAL_RCC_OscConfig+0x8b2>
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b05      	cmp	r3, #5
 800324e:	d10c      	bne.n	800326a <HAL_RCC_OscConfig+0x89a>
 8003250:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4a2a      	ldr	r2, [pc, #168]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6213      	str	r3, [r2, #32]
 800325c:	4b28      	ldr	r3, [pc, #160]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a27      	ldr	r2, [pc, #156]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6213      	str	r3, [r2, #32]
 8003268:	e00b      	b.n	8003282 <HAL_RCC_OscConfig+0x8b2>
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6213      	str	r3, [r2, #32]
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d06b      	beq.n	8003364 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328c:	f7fe f9c8 	bl	8001620 <HAL_GetTick>
 8003290:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	e00b      	b.n	80032ae <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe f9c3 	bl	8001620 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e291      	b.n	80037d2 <HAL_RCC_OscConfig+0xe02>
 80032ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032b2:	2202      	movs	r2, #2
 80032b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	fa93 f2a3 	rbit	r2, r3
 80032c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032ca:	2202      	movs	r2, #2
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	fa93 f2a3 	rbit	r2, r3
 80032d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032dc:	601a      	str	r2, [r3, #0]
  return result;
 80032de:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d109      	bne.n	800330c <HAL_RCC_OscConfig+0x93c>
 80032f8:	4b01      	ldr	r3, [pc, #4]	; (8003300 <HAL_RCC_OscConfig+0x930>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x958>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	10908120 	.word	0x10908120
 8003308:	40007000 	.word	0x40007000
 800330c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003310:	2202      	movs	r2, #2
 8003312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	fa93 f2a3 	rbit	r2, r3
 800331e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	4bbb      	ldr	r3, [pc, #748]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800332c:	2102      	movs	r1, #2
 800332e:	6011      	str	r1, [r2, #0]
 8003330:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	fa92 f1a2 	rbit	r1, r2
 800333a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800333e:	6011      	str	r1, [r2, #0]
  return result;
 8003340:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	fab2 f282 	clz	r2, r2
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f002 021f 	and.w	r2, r2, #31
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f202 	lsl.w	r2, r1, r2
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d099      	beq.n	8003296 <HAL_RCC_OscConfig+0x8c6>
 8003362:	e063      	b.n	800342c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003364:	f7fe f95c 	bl	8001620 <HAL_GetTick>
 8003368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336c:	e00b      	b.n	8003386 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe f957 	bl	8001620 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e225      	b.n	80037d2 <HAL_RCC_OscConfig+0xe02>
 8003386:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800338a:	2202      	movs	r2, #2
 800338c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	fa93 f2a3 	rbit	r2, r3
 8003398:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033a2:	2202      	movs	r2, #2
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	fa93 f2a3 	rbit	r2, r3
 80033b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033b4:	601a      	str	r2, [r3, #0]
  return result;
 80033b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f043 0302 	orr.w	r3, r3, #2
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d102      	bne.n	80033d6 <HAL_RCC_OscConfig+0xa06>
 80033d0:	4b90      	ldr	r3, [pc, #576]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	e00d      	b.n	80033f2 <HAL_RCC_OscConfig+0xa22>
 80033d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033da:	2202      	movs	r2, #2
 80033dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	fa93 f2a3 	rbit	r2, r3
 80033e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	4b89      	ldr	r3, [pc, #548]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033f6:	2102      	movs	r1, #2
 80033f8:	6011      	str	r1, [r2, #0]
 80033fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	fa92 f1a2 	rbit	r1, r2
 8003404:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003408:	6011      	str	r1, [r2, #0]
  return result;
 800340a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	fab2 f282 	clz	r2, r2
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	f002 021f 	and.w	r2, r2, #31
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f202 	lsl.w	r2, r1, r2
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1a0      	bne.n	800336e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800342c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003430:	2b01      	cmp	r3, #1
 8003432:	d105      	bne.n	8003440 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003434:	4b77      	ldr	r3, [pc, #476]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	4a76      	ldr	r2, [pc, #472]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 800343a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 81c2 	beq.w	80037d0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800344c:	4b71      	ldr	r3, [pc, #452]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	f000 819c 	beq.w	8003792 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	2b02      	cmp	r3, #2
 8003462:	f040 8114 	bne.w	800368e <HAL_RCC_OscConfig+0xcbe>
 8003466:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800346a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800346e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f2a3 	rbit	r2, r3
 800347a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800347e:	601a      	str	r2, [r3, #0]
  return result;
 8003480:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003484:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003490:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	461a      	mov	r2, r3
 8003498:	2300      	movs	r3, #0
 800349a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe f8c0 	bl	8001620 <HAL_GetTick>
 80034a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a4:	e009      	b.n	80034ba <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe f8bb 	bl	8001620 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e18b      	b.n	80037d2 <HAL_RCC_OscConfig+0xe02>
 80034ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	fa93 f2a3 	rbit	r2, r3
 80034ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034d2:	601a      	str	r2, [r3, #0]
  return result;
 80034d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d102      	bne.n	80034f4 <HAL_RCC_OscConfig+0xb24>
 80034ee:	4b49      	ldr	r3, [pc, #292]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	e01b      	b.n	800352c <HAL_RCC_OscConfig+0xb5c>
 80034f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003530:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003534:	6011      	str	r1, [r2, #0]
 8003536:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	fa92 f1a2 	rbit	r1, r2
 8003540:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003544:	6011      	str	r1, [r2, #0]
  return result;
 8003546:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	fab2 f282 	clz	r2, r2
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	f042 0220 	orr.w	r2, r2, #32
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	f002 021f 	and.w	r2, r2, #31
 800355c:	2101      	movs	r1, #1
 800355e:	fa01 f202 	lsl.w	r2, r1, r2
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d19e      	bne.n	80034a6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003568:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	430b      	orrs	r3, r1
 800357e:	4925      	ldr	r1, [pc, #148]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
 8003584:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003588:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800358c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	fa93 f2a3 	rbit	r2, r3
 8003598:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800359c:	601a      	str	r2, [r3, #0]
  return result;
 800359e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035a2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	461a      	mov	r2, r3
 80035b6:	2301      	movs	r3, #1
 80035b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ba:	f7fe f831 	bl	8001620 <HAL_GetTick>
 80035be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035c2:	e009      	b.n	80035d8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe f82c 	bl	8001620 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0fc      	b.n	80037d2 <HAL_RCC_OscConfig+0xe02>
 80035d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035f0:	601a      	str	r2, [r3, #0]
  return result;
 80035f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d105      	bne.n	8003618 <HAL_RCC_OscConfig+0xc48>
 800360c:	4b01      	ldr	r3, [pc, #4]	; (8003614 <HAL_RCC_OscConfig+0xc44>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	e01e      	b.n	8003650 <HAL_RCC_OscConfig+0xc80>
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800361c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	fa93 f2a3 	rbit	r2, r3
 800362c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003636:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fa93 f2a3 	rbit	r2, r3
 8003646:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	4b63      	ldr	r3, [pc, #396]	; (80037dc <HAL_RCC_OscConfig+0xe0c>)
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003654:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003658:	6011      	str	r1, [r2, #0]
 800365a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	fa92 f1a2 	rbit	r1, r2
 8003664:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003668:	6011      	str	r1, [r2, #0]
  return result;
 800366a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	fab2 f282 	clz	r2, r2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	f042 0220 	orr.w	r2, r2, #32
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	f002 021f 	and.w	r2, r2, #31
 8003680:	2101      	movs	r1, #1
 8003682:	fa01 f202 	lsl.w	r2, r1, r2
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d09b      	beq.n	80035c4 <HAL_RCC_OscConfig+0xbf4>
 800368c:	e0a0      	b.n	80037d0 <HAL_RCC_OscConfig+0xe00>
 800368e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003692:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	fa93 f2a3 	rbit	r2, r3
 80036a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036a6:	601a      	str	r2, [r3, #0]
  return result;
 80036a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	461a      	mov	r2, r3
 80036c0:	2300      	movs	r3, #0
 80036c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fd ffac 	bl	8001620 <HAL_GetTick>
 80036c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036cc:	e009      	b.n	80036e2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fd ffa7 	bl	8001620 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e077      	b.n	80037d2 <HAL_RCC_OscConfig+0xe02>
 80036e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	fa93 f2a3 	rbit	r2, r3
 80036f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036fa:	601a      	str	r2, [r3, #0]
  return result;
 80036fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003700:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d102      	bne.n	800371c <HAL_RCC_OscConfig+0xd4c>
 8003716:	4b31      	ldr	r3, [pc, #196]	; (80037dc <HAL_RCC_OscConfig+0xe0c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	e01b      	b.n	8003754 <HAL_RCC_OscConfig+0xd84>
 800371c:	f107 0320 	add.w	r3, r7, #32
 8003720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f107 0320 	add.w	r3, r7, #32
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	fa93 f2a3 	rbit	r2, r3
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f107 0318 	add.w	r3, r7, #24
 800373a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	f107 0318 	add.w	r3, r7, #24
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f107 0314 	add.w	r3, r7, #20
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_RCC_OscConfig+0xe0c>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f107 0210 	add.w	r2, r7, #16
 8003758:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800375c:	6011      	str	r1, [r2, #0]
 800375e:	f107 0210 	add.w	r2, r7, #16
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	fa92 f1a2 	rbit	r1, r2
 8003768:	f107 020c 	add.w	r2, r7, #12
 800376c:	6011      	str	r1, [r2, #0]
  return result;
 800376e:	f107 020c 	add.w	r2, r7, #12
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	fab2 f282 	clz	r2, r2
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f042 0220 	orr.w	r2, r2, #32
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f002 021f 	and.w	r2, r2, #31
 8003784:	2101      	movs	r1, #1
 8003786:	fa01 f202 	lsl.w	r2, r1, r2
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d19e      	bne.n	80036ce <HAL_RCC_OscConfig+0xcfe>
 8003790:	e01e      	b.n	80037d0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e018      	b.n	80037d2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_RCC_OscConfig+0xe0c>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037a8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037b0:	1d3b      	adds	r3, r7, #4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d108      	bne.n	80037cc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000

080037e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b09e      	sub	sp, #120	; 0x78
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e162      	b.n	8003abe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b90      	ldr	r3, [pc, #576]	; (8003a3c <HAL_RCC_ClockConfig+0x25c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d910      	bls.n	8003828 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b8d      	ldr	r3, [pc, #564]	; (8003a3c <HAL_RCC_ClockConfig+0x25c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 0207 	bic.w	r2, r3, #7
 800380e:	498b      	ldr	r1, [pc, #556]	; (8003a3c <HAL_RCC_ClockConfig+0x25c>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b89      	ldr	r3, [pc, #548]	; (8003a3c <HAL_RCC_ClockConfig+0x25c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e14a      	b.n	8003abe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b82      	ldr	r3, [pc, #520]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	497f      	ldr	r1, [pc, #508]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80dc 	beq.w	8003a0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d13c      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xf6>
 800385c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003860:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800386a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d102      	bne.n	8003886 <HAL_RCC_ClockConfig+0xa6>
 8003880:	4b6f      	ldr	r3, [pc, #444]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	e00f      	b.n	80038a6 <HAL_RCC_ClockConfig+0xc6>
 8003886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	667b      	str	r3, [r7, #100]	; 0x64
 8003894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003898:	663b      	str	r3, [r7, #96]	; 0x60
 800389a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038a2:	4b67      	ldr	r3, [pc, #412]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80038ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ae:	fa92 f2a2 	rbit	r2, r2
 80038b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038b6:	fab2 f282 	clz	r2, r2
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	f042 0220 	orr.w	r2, r2, #32
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	f002 021f 	and.w	r2, r2, #31
 80038c6:	2101      	movs	r1, #1
 80038c8:	fa01 f202 	lsl.w	r2, r1, r2
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d17b      	bne.n	80039ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0f3      	b.n	8003abe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d13c      	bne.n	8003958 <HAL_RCC_ClockConfig+0x178>
 80038de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_RCC_ClockConfig+0x128>
 8003902:	4b4f      	ldr	r3, [pc, #316]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	e00f      	b.n	8003928 <HAL_RCC_ClockConfig+0x148>
 8003908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	647b      	str	r3, [r7, #68]	; 0x44
 8003916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800391a:	643b      	str	r3, [r7, #64]	; 0x40
 800391c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003924:	4b46      	ldr	r3, [pc, #280]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800392c:	63ba      	str	r2, [r7, #56]	; 0x38
 800392e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003930:	fa92 f2a2 	rbit	r2, r2
 8003934:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003938:	fab2 f282 	clz	r2, r2
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	f042 0220 	orr.w	r2, r2, #32
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	f002 021f 	and.w	r2, r2, #31
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d13a      	bne.n	80039ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0b2      	b.n	8003abe <HAL_RCC_ClockConfig+0x2de>
 8003958:	2302      	movs	r3, #2
 800395a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d102      	bne.n	8003980 <HAL_RCC_ClockConfig+0x1a0>
 800397a:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	e00d      	b.n	800399c <HAL_RCC_ClockConfig+0x1bc>
 8003980:	2302      	movs	r3, #2
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
 800398c:	2302      	movs	r3, #2
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	fa93 f3a3 	rbit	r3, r3
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	2202      	movs	r2, #2
 800399e:	61ba      	str	r2, [r7, #24]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	fa92 f2a2 	rbit	r2, r2
 80039a6:	617a      	str	r2, [r7, #20]
  return result;
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	fab2 f282 	clz	r2, r2
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	f042 0220 	orr.w	r2, r2, #32
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	f002 021f 	and.w	r2, r2, #31
 80039ba:	2101      	movs	r1, #1
 80039bc:	fa01 f202 	lsl.w	r2, r1, r2
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e079      	b.n	8003abe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ca:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f023 0203 	bic.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	491a      	ldr	r1, [pc, #104]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039dc:	f7fd fe20 	bl	8001620 <HAL_GetTick>
 80039e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e4:	f7fd fe1c 	bl	8001620 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e061      	b.n	8003abe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_RCC_ClockConfig+0x260>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 020c 	and.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d1eb      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_ClockConfig+0x25c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d214      	bcs.n	8003a44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <HAL_RCC_ClockConfig+0x25c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 0207 	bic.w	r2, r3, #7
 8003a22:	4906      	ldr	r1, [pc, #24]	; (8003a3c <HAL_RCC_ClockConfig+0x25c>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <HAL_RCC_ClockConfig+0x25c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e040      	b.n	8003abe <HAL_RCC_ClockConfig+0x2de>
 8003a3c:	40022000 	.word	0x40022000
 8003a40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a50:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	491a      	ldr	r1, [pc, #104]	; (8003ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a6e:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4912      	ldr	r1, [pc, #72]	; (8003ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a82:	f000 f829 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003a86:	4601      	mov	r1, r0
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a90:	22f0      	movs	r2, #240	; 0xf0
 8003a92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	fa92 f2a2 	rbit	r2, r2
 8003a9a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	fab2 f282 	clz	r2, r2
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	40d3      	lsrs	r3, r2
 8003aa6:	4a09      	ldr	r2, [pc, #36]	; (8003acc <HAL_RCC_ClockConfig+0x2ec>)
 8003aa8:	5cd3      	ldrb	r3, [r2, r3]
 8003aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8003aae:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <HAL_RCC_ClockConfig+0x2f0>)
 8003ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <HAL_RCC_ClockConfig+0x2f4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd fd6e 	bl	8001598 <HAL_InitTick>
  
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3778      	adds	r7, #120	; 0x78
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	08007cb0 	.word	0x08007cb0
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000004 	.word	0x20000004

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b08b      	sub	sp, #44	; 0x2c
 8003adc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003af2:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d002      	beq.n	8003b08 <HAL_RCC_GetSysClockFreq+0x30>
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d003      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x36>
 8003b06:	e03c      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b08:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b0a:	623b      	str	r3, [r7, #32]
      break;
 8003b0c:	e03c      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	fa92 f2a2 	rbit	r2, r2
 8003b20:	607a      	str	r2, [r7, #4]
  return result;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	fab2 f282 	clz	r2, r2
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	40d3      	lsrs	r3, r2
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b32:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	220f      	movs	r2, #15
 8003b3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	fa92 f2a2 	rbit	r2, r2
 8003b44:	60fa      	str	r2, [r7, #12]
  return result;
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	fab2 f282 	clz	r2, r2
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	40d3      	lsrs	r3, r2
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b52:	5cd3      	ldrb	r3, [r2, r3]
 8003b54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b60:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b70:	e004      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	623b      	str	r3, [r7, #32]
      break;
 8003b80:	e002      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b84:	623b      	str	r3, [r7, #32]
      break;
 8003b86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b88:	6a3b      	ldr	r3, [r7, #32]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	372c      	adds	r7, #44	; 0x2c
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	007a1200 	.word	0x007a1200
 8003ba0:	08007cc8 	.word	0x08007cc8
 8003ba4:	08007cd8 	.word	0x08007cd8
 8003ba8:	003d0900 	.word	0x003d0900

08003bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000000 	.word	0x20000000

08003bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003bca:	f7ff ffef 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bce:	4601      	mov	r1, r0
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	fa92 f2a2 	rbit	r2, r2
 8003be4:	603a      	str	r2, [r7, #0]
  return result;
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	fab2 f282 	clz	r2, r2
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	40d3      	lsrs	r3, r2
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bf2:	5cd3      	ldrb	r3, [r2, r3]
 8003bf4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	08007cc0 	.word	0x08007cc0

08003c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c0e:	f7ff ffcd 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003c12:	4601      	mov	r1, r0
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	fa92 f2a2 	rbit	r2, r2
 8003c28:	603a      	str	r2, [r7, #0]
  return result;
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	fab2 f282 	clz	r2, r2
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	40d3      	lsrs	r3, r2
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c36:	5cd3      	ldrb	r3, [r2, r3]
 8003c38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	08007cc0 	.word	0x08007cc0

08003c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b092      	sub	sp, #72	; 0x48
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80d0 	beq.w	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c70:	4b86      	ldr	r3, [pc, #536]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10e      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7c:	4b83      	ldr	r3, [pc, #524]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	4a82      	ldr	r2, [pc, #520]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c86:	61d3      	str	r3, [r2, #28]
 8003c88:	4b80      	ldr	r3, [pc, #512]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9a:	4b7d      	ldr	r3, [pc, #500]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d118      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca6:	4b7a      	ldr	r3, [pc, #488]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a79      	ldr	r2, [pc, #484]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fcb5 	bl	8001620 <HAL_GetTick>
 8003cb6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	e008      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cba:	f7fd fcb1 	bl	8001620 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b64      	cmp	r3, #100	; 0x64
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e0db      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ccc:	4b70      	ldr	r3, [pc, #448]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cd8:	4b6c      	ldr	r3, [pc, #432]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d07d      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d076      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cf6:	4b65      	ldr	r3, [pc, #404]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d04:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d10:	fab3 f383 	clz	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	4b5e      	ldr	r3, [pc, #376]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2301      	movs	r3, #1
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d34:	fab3 f383 	clz	r3, r3
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b55      	ldr	r3, [pc, #340]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	461a      	mov	r2, r3
 8003d44:	2300      	movs	r3, #0
 8003d46:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d48:	4a50      	ldr	r2, [pc, #320]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d045      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd fc62 	bl	8001620 <HAL_GetTick>
 8003d5c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fd fc5e 	bl	8001620 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e086      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003d76:	2302      	movs	r3, #2
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
 8003d82:	2302      	movs	r3, #2
 8003d84:	623b      	str	r3, [r7, #32]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	fa93 f3a3 	rbit	r3, r3
 8003d8c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f043 0302 	orr.w	r3, r3, #2
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d102      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003da4:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	e007      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003daa:	2302      	movs	r3, #2
 8003dac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	2202      	movs	r2, #2
 8003dbc:	613a      	str	r2, [r7, #16]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	fa92 f2a2 	rbit	r2, r2
 8003dc4:	60fa      	str	r2, [r7, #12]
  return result;
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	fab2 f282 	clz	r2, r2
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	f002 021f 	and.w	r2, r2, #31
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f202 	lsl.w	r2, r1, r2
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0bd      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003de4:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4926      	ldr	r1, [pc, #152]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003df6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	f023 0203 	bic.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	491a      	ldr	r1, [pc, #104]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e34:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	f023 0210 	bic.w	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4912      	ldr	r1, [pc, #72]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	490b      	ldr	r1, [pc, #44]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	4903      	ldr	r1, [pc, #12]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3748      	adds	r7, #72	; 0x48
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40007000 	.word	0x40007000
 8003e94:	10908100 	.word	0x10908100

08003e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e01d      	b.n	8003ee6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fd fa1e 	bl	8001300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f000 f974 	bl	80041c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2201      	movs	r2, #1
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fc7c 	bl	8004800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1c      	ldr	r2, [pc, #112]	; (8003f80 <HAL_TIM_PWM_Start+0x90>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00e      	beq.n	8003f30 <HAL_TIM_PWM_Start+0x40>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <HAL_TIM_PWM_Start+0x94>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d009      	beq.n	8003f30 <HAL_TIM_PWM_Start+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <HAL_TIM_PWM_Start+0x98>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d004      	beq.n	8003f30 <HAL_TIM_PWM_Start+0x40>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <HAL_TIM_PWM_Start+0x9c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_TIM_PWM_Start+0x44>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_TIM_PWM_Start+0x46>
 8003f34:	2300      	movs	r3, #0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <HAL_TIM_PWM_Start+0xa0>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b06      	cmp	r3, #6
 8003f5a:	d00b      	beq.n	8003f74 <HAL_TIM_PWM_Start+0x84>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f62:	d007      	beq.n	8003f74 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800
 8003f90:	00010007 	.word	0x00010007

08003f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e105      	b.n	80041ba <HAL_TIM_PWM_ConfigChannel+0x226>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b14      	cmp	r3, #20
 8003fc2:	f200 80f0 	bhi.w	80041a6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	080041a7 	.word	0x080041a7
 8003fd4:	080041a7 	.word	0x080041a7
 8003fd8:	080041a7 	.word	0x080041a7
 8003fdc:	08004061 	.word	0x08004061
 8003fe0:	080041a7 	.word	0x080041a7
 8003fe4:	080041a7 	.word	0x080041a7
 8003fe8:	080041a7 	.word	0x080041a7
 8003fec:	080040a3 	.word	0x080040a3
 8003ff0:	080041a7 	.word	0x080041a7
 8003ff4:	080041a7 	.word	0x080041a7
 8003ff8:	080041a7 	.word	0x080041a7
 8003ffc:	080040e3 	.word	0x080040e3
 8004000:	080041a7 	.word	0x080041a7
 8004004:	080041a7 	.word	0x080041a7
 8004008:	080041a7 	.word	0x080041a7
 800400c:	08004125 	.word	0x08004125
 8004010:	080041a7 	.word	0x080041a7
 8004014:	080041a7 	.word	0x080041a7
 8004018:	080041a7 	.word	0x080041a7
 800401c:	08004165 	.word	0x08004165
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f944 	bl	80042b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0208 	orr.w	r2, r2, #8
 800403a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0204 	bic.w	r2, r2, #4
 800404a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	619a      	str	r2, [r3, #24]
      break;
 800405e:	e0a3      	b.n	80041a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f9aa 	bl	80043c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	021a      	lsls	r2, r3, #8
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	619a      	str	r2, [r3, #24]
      break;
 80040a0:	e082      	b.n	80041a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fa09 	bl	80044c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0208 	orr.w	r2, r2, #8
 80040bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0204 	bic.w	r2, r2, #4
 80040cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69d9      	ldr	r1, [r3, #28]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	61da      	str	r2, [r3, #28]
      break;
 80040e0:	e062      	b.n	80041a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fa67 	bl	80045bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69d9      	ldr	r1, [r3, #28]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	61da      	str	r2, [r3, #28]
      break;
 8004122:	e041      	b.n	80041a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 faaa 	bl	8004684 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0208 	orr.w	r2, r2, #8
 800413e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0204 	bic.w	r2, r2, #4
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004162:	e021      	b.n	80041a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fae8 	bl	8004740 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	021a      	lsls	r2, r3, #8
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041a4:	e000      	b.n	80041a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80041a6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop

080041c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a32      	ldr	r2, [pc, #200]	; (80042a0 <TIM_Base_SetConfig+0xdc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_Base_SetConfig+0x28>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0x28>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <TIM_Base_SetConfig+0xe0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d108      	bne.n	80041fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <TIM_Base_SetConfig+0xdc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <TIM_Base_SetConfig+0x6a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d00f      	beq.n	800422e <TIM_Base_SetConfig+0x6a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a24      	ldr	r2, [pc, #144]	; (80042a4 <TIM_Base_SetConfig+0xe0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00b      	beq.n	800422e <TIM_Base_SetConfig+0x6a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a23      	ldr	r2, [pc, #140]	; (80042a8 <TIM_Base_SetConfig+0xe4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d007      	beq.n	800422e <TIM_Base_SetConfig+0x6a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a22      	ldr	r2, [pc, #136]	; (80042ac <TIM_Base_SetConfig+0xe8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d003      	beq.n	800422e <TIM_Base_SetConfig+0x6a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a21      	ldr	r2, [pc, #132]	; (80042b0 <TIM_Base_SetConfig+0xec>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d108      	bne.n	8004240 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a0e      	ldr	r2, [pc, #56]	; (80042a0 <TIM_Base_SetConfig+0xdc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00b      	beq.n	8004284 <TIM_Base_SetConfig+0xc0>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a0e      	ldr	r2, [pc, #56]	; (80042a8 <TIM_Base_SetConfig+0xe4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_Base_SetConfig+0xc0>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a0d      	ldr	r2, [pc, #52]	; (80042ac <TIM_Base_SetConfig+0xe8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0xc0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0c      	ldr	r2, [pc, #48]	; (80042b0 <TIM_Base_SetConfig+0xec>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800

080042b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f023 0201 	bic.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f023 0302 	bic.w	r3, r3, #2
 8004300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a28      	ldr	r2, [pc, #160]	; (80043b0 <TIM_OC1_SetConfig+0xfc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_OC1_SetConfig+0x78>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <TIM_OC1_SetConfig+0x100>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <TIM_OC1_SetConfig+0x78>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <TIM_OC1_SetConfig+0x104>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_OC1_SetConfig+0x78>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <TIM_OC1_SetConfig+0x108>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d10c      	bne.n	8004346 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0308 	bic.w	r3, r3, #8
 8004332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f023 0304 	bic.w	r3, r3, #4
 8004344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <TIM_OC1_SetConfig+0xfc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00b      	beq.n	8004366 <TIM_OC1_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <TIM_OC1_SetConfig+0x100>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d007      	beq.n	8004366 <TIM_OC1_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <TIM_OC1_SetConfig+0x104>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <TIM_OC1_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a16      	ldr	r2, [pc, #88]	; (80043bc <TIM_OC1_SetConfig+0x108>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d111      	bne.n	800438a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800436c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	621a      	str	r2, [r3, #32]
}
 80043a4:	bf00      	nop
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	40012c00 	.word	0x40012c00
 80043b4:	40014000 	.word	0x40014000
 80043b8:	40014400 	.word	0x40014400
 80043bc:	40014800 	.word	0x40014800

080043c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0210 	bic.w	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 0320 	bic.w	r3, r3, #32
 800440e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a24      	ldr	r2, [pc, #144]	; (80044b0 <TIM_OC2_SetConfig+0xf0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d10d      	bne.n	8004440 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800442a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <TIM_OC2_SetConfig+0xf0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00b      	beq.n	8004460 <TIM_OC2_SetConfig+0xa0>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a1a      	ldr	r2, [pc, #104]	; (80044b4 <TIM_OC2_SetConfig+0xf4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d007      	beq.n	8004460 <TIM_OC2_SetConfig+0xa0>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <TIM_OC2_SetConfig+0xf8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_OC2_SetConfig+0xa0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a18      	ldr	r2, [pc, #96]	; (80044bc <TIM_OC2_SetConfig+0xfc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d113      	bne.n	8004488 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004466:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800446e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40012c00 	.word	0x40012c00
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40014400 	.word	0x40014400
 80044bc:	40014800 	.word	0x40014800

080044c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800450c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a23      	ldr	r2, [pc, #140]	; (80045ac <TIM_OC3_SetConfig+0xec>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10d      	bne.n	800453e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1a      	ldr	r2, [pc, #104]	; (80045ac <TIM_OC3_SetConfig+0xec>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_OC3_SetConfig+0x9e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <TIM_OC3_SetConfig+0xf0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_OC3_SetConfig+0x9e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <TIM_OC3_SetConfig+0xf4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_OC3_SetConfig+0x9e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <TIM_OC3_SetConfig+0xf8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d113      	bne.n	8004586 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800

080045bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800460a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	031b      	lsls	r3, r3, #12
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a16      	ldr	r2, [pc, #88]	; (8004674 <TIM_OC4_SetConfig+0xb8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_OC4_SetConfig+0x7c>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a15      	ldr	r2, [pc, #84]	; (8004678 <TIM_OC4_SetConfig+0xbc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_OC4_SetConfig+0x7c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a14      	ldr	r2, [pc, #80]	; (800467c <TIM_OC4_SetConfig+0xc0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC4_SetConfig+0x7c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a13      	ldr	r2, [pc, #76]	; (8004680 <TIM_OC4_SetConfig+0xc4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d109      	bne.n	800464c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800463e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	019b      	lsls	r3, r3, #6
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40014000 	.word	0x40014000
 800467c:	40014400 	.word	0x40014400
 8004680:	40014800 	.word	0x40014800

08004684 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80046c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <TIM_OC5_SetConfig+0xac>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00b      	beq.n	80046f6 <TIM_OC5_SetConfig+0x72>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <TIM_OC5_SetConfig+0xb0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d007      	beq.n	80046f6 <TIM_OC5_SetConfig+0x72>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a13      	ldr	r2, [pc, #76]	; (8004738 <TIM_OC5_SetConfig+0xb4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_OC5_SetConfig+0x72>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a12      	ldr	r2, [pc, #72]	; (800473c <TIM_OC5_SetConfig+0xb8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d109      	bne.n	800470a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	621a      	str	r2, [r3, #32]
}
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800

08004740 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	051b      	lsls	r3, r3, #20
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <TIM_OC6_SetConfig+0xb0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00b      	beq.n	80047b4 <TIM_OC6_SetConfig+0x74>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <TIM_OC6_SetConfig+0xb4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_OC6_SetConfig+0x74>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <TIM_OC6_SetConfig+0xb8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_OC6_SetConfig+0x74>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a13      	ldr	r2, [pc, #76]	; (80047fc <TIM_OC6_SetConfig+0xbc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d109      	bne.n	80047c8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	029b      	lsls	r3, r3, #10
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800

08004800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	2201      	movs	r2, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1a      	ldr	r2, [r3, #32]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	43db      	mvns	r3, r3
 8004822:	401a      	ands	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	431a      	orrs	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004860:	2302      	movs	r3, #2
 8004862:	e054      	b.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a24      	ldr	r2, [pc, #144]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d108      	bne.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004894:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a17      	ldr	r2, [pc, #92]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d009      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a13      	ldr	r2, [pc, #76]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a11      	ldr	r2, [pc, #68]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10c      	bne.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40012c00 	.word	0x40012c00
 8004920:	40000400 	.word	0x40000400
 8004924:	40014000 	.word	0x40014000

08004928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004940:	2302      	movs	r3, #2
 8004942:	e060      	b.n	8004a06 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	041b      	lsls	r3, r3, #16
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d115      	bne.n	80049f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	051b      	lsls	r3, r3, #20
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40012c00 	.word	0x40012c00

08004a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e040      	b.n	8004aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fc fcb8 	bl	80013b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2224      	movs	r2, #36	; 0x24
 8004a44:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f82c 	bl	8004ab4 <UART_SetConfig>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e022      	b.n	8004aac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9a2 	bl	8004db8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fa29 	bl	8004efc <UART_CheckIdleState>
 8004aaa:	4603      	mov	r3, r0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4ba2      	ldr	r3, [pc, #648]	; (8004d6c <UART_SetConfig+0x2b8>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	6939      	ldr	r1, [r7, #16]
 8004aec:	430b      	orrs	r3, r1
 8004aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a90      	ldr	r2, [pc, #576]	; (8004d70 <UART_SetConfig+0x2bc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d121      	bne.n	8004b78 <UART_SetConfig+0xc4>
 8004b34:	4b8f      	ldr	r3, [pc, #572]	; (8004d74 <UART_SetConfig+0x2c0>)
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d817      	bhi.n	8004b70 <UART_SetConfig+0xbc>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x94>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004b65 	.word	0x08004b65
 8004b50:	08004b6b 	.word	0x08004b6b
 8004b54:	08004b5f 	.word	0x08004b5f
 8004b58:	2300      	movs	r3, #0
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e01e      	b.n	8004b9c <UART_SetConfig+0xe8>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e01b      	b.n	8004b9c <UART_SetConfig+0xe8>
 8004b64:	2304      	movs	r3, #4
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e018      	b.n	8004b9c <UART_SetConfig+0xe8>
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e015      	b.n	8004b9c <UART_SetConfig+0xe8>
 8004b70:	2310      	movs	r3, #16
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	bf00      	nop
 8004b76:	e011      	b.n	8004b9c <UART_SetConfig+0xe8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7e      	ldr	r2, [pc, #504]	; (8004d78 <UART_SetConfig+0x2c4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d102      	bne.n	8004b88 <UART_SetConfig+0xd4>
 8004b82:	2300      	movs	r3, #0
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e009      	b.n	8004b9c <UART_SetConfig+0xe8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a7b      	ldr	r2, [pc, #492]	; (8004d7c <UART_SetConfig+0x2c8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d102      	bne.n	8004b98 <UART_SetConfig+0xe4>
 8004b92:	2300      	movs	r3, #0
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e001      	b.n	8004b9c <UART_SetConfig+0xe8>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba4:	f040 8082 	bne.w	8004cac <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004ba8:	7ffb      	ldrb	r3, [r7, #31]
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d85e      	bhi.n	8004c6c <UART_SetConfig+0x1b8>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <UART_SetConfig+0x100>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004c19 	.word	0x08004c19
 8004bc0:	08004c6d 	.word	0x08004c6d
 8004bc4:	08004c35 	.word	0x08004c35
 8004bc8:	08004c6d 	.word	0x08004c6d
 8004bcc:	08004c6d 	.word	0x08004c6d
 8004bd0:	08004c6d 	.word	0x08004c6d
 8004bd4:	08004c55 	.word	0x08004c55
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f7fe fff4 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8004bdc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	005a      	lsls	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	441a      	add	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	61bb      	str	r3, [r7, #24]
        break;
 8004bf6:	e03c      	b.n	8004c72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7ff f806 	bl	8003c08 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	005a      	lsls	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	441a      	add	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	61bb      	str	r3, [r7, #24]
        break;
 8004c16:	e02c      	b.n	8004c72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004c22:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6852      	ldr	r2, [r2, #4]
 8004c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	61bb      	str	r3, [r7, #24]
        break;
 8004c32:	e01e      	b.n	8004c72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c34:	f7fe ff50 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8004c38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	005a      	lsls	r2, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	441a      	add	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	61bb      	str	r3, [r7, #24]
        break;
 8004c52:	e00e      	b.n	8004c72 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	61bb      	str	r3, [r7, #24]
        break;
 8004c6a:	e002      	b.n	8004c72 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	75fb      	strb	r3, [r7, #23]
        break;
 8004c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b0f      	cmp	r3, #15
 8004c76:	d916      	bls.n	8004ca6 <UART_SetConfig+0x1f2>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7e:	d212      	bcs.n	8004ca6 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f023 030f 	bic.w	r3, r3, #15
 8004c88:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	897b      	ldrh	r3, [r7, #10]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	897a      	ldrh	r2, [r7, #10]
 8004ca2:	60da      	str	r2, [r3, #12]
 8004ca4:	e07d      	b.n	8004da2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
 8004caa:	e07a      	b.n	8004da2 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8004cac:	7ffb      	ldrb	r3, [r7, #31]
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d866      	bhi.n	8004d80 <UART_SetConfig+0x2cc>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0x204>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cfb 	.word	0x08004cfb
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004d81 	.word	0x08004d81
 8004cc8:	08004d35 	.word	0x08004d35
 8004ccc:	08004d81 	.word	0x08004d81
 8004cd0:	08004d81 	.word	0x08004d81
 8004cd4:	08004d81 	.word	0x08004d81
 8004cd8:	08004d53 	.word	0x08004d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7fe ff72 	bl	8003bc4 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	085a      	lsrs	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	441a      	add	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	61bb      	str	r3, [r7, #24]
        break;
 8004cf8:	e045      	b.n	8004d86 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cfa:	f7fe ff85 	bl	8003c08 <HAL_RCC_GetPCLK2Freq>
 8004cfe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	085a      	lsrs	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	61bb      	str	r3, [r7, #24]
        break;
 8004d16:	e036      	b.n	8004d86 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004d22:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6852      	ldr	r2, [r2, #4]
 8004d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	61bb      	str	r3, [r7, #24]
        break;
 8004d32:	e028      	b.n	8004d86 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d34:	f7fe fed0 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8004d38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	085a      	lsrs	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	441a      	add	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	61bb      	str	r3, [r7, #24]
        break;
 8004d50:	e019      	b.n	8004d86 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	61bb      	str	r3, [r7, #24]
        break;
 8004d68:	e00d      	b.n	8004d86 <UART_SetConfig+0x2d2>
 8004d6a:	bf00      	nop
 8004d6c:	efff69f3 	.word	0xefff69f3
 8004d70:	40013800 	.word	0x40013800
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40004400 	.word	0x40004400
 8004d7c:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
        break;
 8004d84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b0f      	cmp	r3, #15
 8004d8a:	d908      	bls.n	8004d9e <UART_SetConfig+0x2ea>
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d92:	d204      	bcs.n	8004d9e <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	60da      	str	r2, [r3, #12]
 8004d9c:	e001      	b.n	8004da2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01a      	beq.n	8004ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb6:	d10a      	bne.n	8004ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004f0a:	f7fc fb89 	bl	8001620 <HAL_GetTick>
 8004f0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d10e      	bne.n	8004f3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f82a 	bl	8004f86 <UART_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e020      	b.n	8004f7e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d10e      	bne.n	8004f68 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f814 	bl	8004f86 <UART_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e00a      	b.n	8004f7e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f96:	e05d      	b.n	8005054 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9e:	d059      	beq.n	8005054 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa0:	f7fc fb3e 	bl	8001620 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d11b      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fc4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e042      	b.n	8005074 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d02b      	beq.n	8005054 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800500a:	d123      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005014:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005024:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e00f      	b.n	8005074 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	429a      	cmp	r2, r3
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	429a      	cmp	r2, r3
 8005070:	d092      	beq.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <__errno>:
 800507c:	4b01      	ldr	r3, [pc, #4]	; (8005084 <__errno+0x8>)
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	2000000c 	.word	0x2000000c

08005088 <__libc_init_array>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	4e0d      	ldr	r6, [pc, #52]	; (80050c0 <__libc_init_array+0x38>)
 800508c:	4c0d      	ldr	r4, [pc, #52]	; (80050c4 <__libc_init_array+0x3c>)
 800508e:	1ba4      	subs	r4, r4, r6
 8005090:	10a4      	asrs	r4, r4, #2
 8005092:	2500      	movs	r5, #0
 8005094:	42a5      	cmp	r5, r4
 8005096:	d109      	bne.n	80050ac <__libc_init_array+0x24>
 8005098:	4e0b      	ldr	r6, [pc, #44]	; (80050c8 <__libc_init_array+0x40>)
 800509a:	4c0c      	ldr	r4, [pc, #48]	; (80050cc <__libc_init_array+0x44>)
 800509c:	f002 fdee 	bl	8007c7c <_init>
 80050a0:	1ba4      	subs	r4, r4, r6
 80050a2:	10a4      	asrs	r4, r4, #2
 80050a4:	2500      	movs	r5, #0
 80050a6:	42a5      	cmp	r5, r4
 80050a8:	d105      	bne.n	80050b6 <__libc_init_array+0x2e>
 80050aa:	bd70      	pop	{r4, r5, r6, pc}
 80050ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050b0:	4798      	blx	r3
 80050b2:	3501      	adds	r5, #1
 80050b4:	e7ee      	b.n	8005094 <__libc_init_array+0xc>
 80050b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050ba:	4798      	blx	r3
 80050bc:	3501      	adds	r5, #1
 80050be:	e7f2      	b.n	80050a6 <__libc_init_array+0x1e>
 80050c0:	08007fc4 	.word	0x08007fc4
 80050c4:	08007fc4 	.word	0x08007fc4
 80050c8:	08007fc4 	.word	0x08007fc4
 80050cc:	08007fc8 	.word	0x08007fc8

080050d0 <memset>:
 80050d0:	4402      	add	r2, r0
 80050d2:	4603      	mov	r3, r0
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d100      	bne.n	80050da <memset+0xa>
 80050d8:	4770      	bx	lr
 80050da:	f803 1b01 	strb.w	r1, [r3], #1
 80050de:	e7f9      	b.n	80050d4 <memset+0x4>

080050e0 <__cvt>:
 80050e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e4:	ec55 4b10 	vmov	r4, r5, d0
 80050e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80050ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	460e      	mov	r6, r1
 80050f2:	4691      	mov	r9, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	bfb8      	it	lt
 80050f8:	4622      	movlt	r2, r4
 80050fa:	462b      	mov	r3, r5
 80050fc:	f027 0720 	bic.w	r7, r7, #32
 8005100:	bfbb      	ittet	lt
 8005102:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005106:	461d      	movlt	r5, r3
 8005108:	2300      	movge	r3, #0
 800510a:	232d      	movlt	r3, #45	; 0x2d
 800510c:	bfb8      	it	lt
 800510e:	4614      	movlt	r4, r2
 8005110:	2f46      	cmp	r7, #70	; 0x46
 8005112:	700b      	strb	r3, [r1, #0]
 8005114:	d004      	beq.n	8005120 <__cvt+0x40>
 8005116:	2f45      	cmp	r7, #69	; 0x45
 8005118:	d100      	bne.n	800511c <__cvt+0x3c>
 800511a:	3601      	adds	r6, #1
 800511c:	2102      	movs	r1, #2
 800511e:	e000      	b.n	8005122 <__cvt+0x42>
 8005120:	2103      	movs	r1, #3
 8005122:	ab03      	add	r3, sp, #12
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	ab02      	add	r3, sp, #8
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	4632      	mov	r2, r6
 800512c:	4653      	mov	r3, sl
 800512e:	ec45 4b10 	vmov	d0, r4, r5
 8005132:	f000 fcd5 	bl	8005ae0 <_dtoa_r>
 8005136:	2f47      	cmp	r7, #71	; 0x47
 8005138:	4680      	mov	r8, r0
 800513a:	d102      	bne.n	8005142 <__cvt+0x62>
 800513c:	f019 0f01 	tst.w	r9, #1
 8005140:	d026      	beq.n	8005190 <__cvt+0xb0>
 8005142:	2f46      	cmp	r7, #70	; 0x46
 8005144:	eb08 0906 	add.w	r9, r8, r6
 8005148:	d111      	bne.n	800516e <__cvt+0x8e>
 800514a:	f898 3000 	ldrb.w	r3, [r8]
 800514e:	2b30      	cmp	r3, #48	; 0x30
 8005150:	d10a      	bne.n	8005168 <__cvt+0x88>
 8005152:	2200      	movs	r2, #0
 8005154:	2300      	movs	r3, #0
 8005156:	4620      	mov	r0, r4
 8005158:	4629      	mov	r1, r5
 800515a:	f7fb fcb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800515e:	b918      	cbnz	r0, 8005168 <__cvt+0x88>
 8005160:	f1c6 0601 	rsb	r6, r6, #1
 8005164:	f8ca 6000 	str.w	r6, [sl]
 8005168:	f8da 3000 	ldr.w	r3, [sl]
 800516c:	4499      	add	r9, r3
 800516e:	2200      	movs	r2, #0
 8005170:	2300      	movs	r3, #0
 8005172:	4620      	mov	r0, r4
 8005174:	4629      	mov	r1, r5
 8005176:	f7fb fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 800517a:	b938      	cbnz	r0, 800518c <__cvt+0xac>
 800517c:	2230      	movs	r2, #48	; 0x30
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	454b      	cmp	r3, r9
 8005182:	d205      	bcs.n	8005190 <__cvt+0xb0>
 8005184:	1c59      	adds	r1, r3, #1
 8005186:	9103      	str	r1, [sp, #12]
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e7f8      	b.n	800517e <__cvt+0x9e>
 800518c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005194:	eba3 0308 	sub.w	r3, r3, r8
 8005198:	4640      	mov	r0, r8
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	b004      	add	sp, #16
 800519e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080051a2 <__exponent>:
 80051a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051a4:	2900      	cmp	r1, #0
 80051a6:	4604      	mov	r4, r0
 80051a8:	bfba      	itte	lt
 80051aa:	4249      	neglt	r1, r1
 80051ac:	232d      	movlt	r3, #45	; 0x2d
 80051ae:	232b      	movge	r3, #43	; 0x2b
 80051b0:	2909      	cmp	r1, #9
 80051b2:	f804 2b02 	strb.w	r2, [r4], #2
 80051b6:	7043      	strb	r3, [r0, #1]
 80051b8:	dd20      	ble.n	80051fc <__exponent+0x5a>
 80051ba:	f10d 0307 	add.w	r3, sp, #7
 80051be:	461f      	mov	r7, r3
 80051c0:	260a      	movs	r6, #10
 80051c2:	fb91 f5f6 	sdiv	r5, r1, r6
 80051c6:	fb06 1115 	mls	r1, r6, r5, r1
 80051ca:	3130      	adds	r1, #48	; 0x30
 80051cc:	2d09      	cmp	r5, #9
 80051ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051d2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80051d6:	4629      	mov	r1, r5
 80051d8:	dc09      	bgt.n	80051ee <__exponent+0x4c>
 80051da:	3130      	adds	r1, #48	; 0x30
 80051dc:	3b02      	subs	r3, #2
 80051de:	f802 1c01 	strb.w	r1, [r2, #-1]
 80051e2:	42bb      	cmp	r3, r7
 80051e4:	4622      	mov	r2, r4
 80051e6:	d304      	bcc.n	80051f2 <__exponent+0x50>
 80051e8:	1a10      	subs	r0, r2, r0
 80051ea:	b003      	add	sp, #12
 80051ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ee:	4613      	mov	r3, r2
 80051f0:	e7e7      	b.n	80051c2 <__exponent+0x20>
 80051f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051f6:	f804 2b01 	strb.w	r2, [r4], #1
 80051fa:	e7f2      	b.n	80051e2 <__exponent+0x40>
 80051fc:	2330      	movs	r3, #48	; 0x30
 80051fe:	4419      	add	r1, r3
 8005200:	7083      	strb	r3, [r0, #2]
 8005202:	1d02      	adds	r2, r0, #4
 8005204:	70c1      	strb	r1, [r0, #3]
 8005206:	e7ef      	b.n	80051e8 <__exponent+0x46>

08005208 <_printf_float>:
 8005208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	b08d      	sub	sp, #52	; 0x34
 800520e:	460c      	mov	r4, r1
 8005210:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005214:	4616      	mov	r6, r2
 8005216:	461f      	mov	r7, r3
 8005218:	4605      	mov	r5, r0
 800521a:	f001 fae3 	bl	80067e4 <_localeconv_r>
 800521e:	6803      	ldr	r3, [r0, #0]
 8005220:	9304      	str	r3, [sp, #16]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fa ffd4 	bl	80001d0 <strlen>
 8005228:	2300      	movs	r3, #0
 800522a:	930a      	str	r3, [sp, #40]	; 0x28
 800522c:	f8d8 3000 	ldr.w	r3, [r8]
 8005230:	9005      	str	r0, [sp, #20]
 8005232:	3307      	adds	r3, #7
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	f103 0208 	add.w	r2, r3, #8
 800523c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005240:	f8d4 b000 	ldr.w	fp, [r4]
 8005244:	f8c8 2000 	str.w	r2, [r8]
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005250:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005254:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005258:	9307      	str	r3, [sp, #28]
 800525a:	f8cd 8018 	str.w	r8, [sp, #24]
 800525e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005262:	4ba7      	ldr	r3, [pc, #668]	; (8005500 <_printf_float+0x2f8>)
 8005264:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005268:	f7fb fc60 	bl	8000b2c <__aeabi_dcmpun>
 800526c:	bb70      	cbnz	r0, 80052cc <_printf_float+0xc4>
 800526e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005272:	4ba3      	ldr	r3, [pc, #652]	; (8005500 <_printf_float+0x2f8>)
 8005274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005278:	f7fb fc3a 	bl	8000af0 <__aeabi_dcmple>
 800527c:	bb30      	cbnz	r0, 80052cc <_printf_float+0xc4>
 800527e:	2200      	movs	r2, #0
 8005280:	2300      	movs	r3, #0
 8005282:	4640      	mov	r0, r8
 8005284:	4649      	mov	r1, r9
 8005286:	f7fb fc29 	bl	8000adc <__aeabi_dcmplt>
 800528a:	b110      	cbz	r0, 8005292 <_printf_float+0x8a>
 800528c:	232d      	movs	r3, #45	; 0x2d
 800528e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005292:	4a9c      	ldr	r2, [pc, #624]	; (8005504 <_printf_float+0x2fc>)
 8005294:	4b9c      	ldr	r3, [pc, #624]	; (8005508 <_printf_float+0x300>)
 8005296:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800529a:	bf8c      	ite	hi
 800529c:	4690      	movhi	r8, r2
 800529e:	4698      	movls	r8, r3
 80052a0:	2303      	movs	r3, #3
 80052a2:	f02b 0204 	bic.w	r2, fp, #4
 80052a6:	6123      	str	r3, [r4, #16]
 80052a8:	6022      	str	r2, [r4, #0]
 80052aa:	f04f 0900 	mov.w	r9, #0
 80052ae:	9700      	str	r7, [sp, #0]
 80052b0:	4633      	mov	r3, r6
 80052b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80052b4:	4621      	mov	r1, r4
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 f9e6 	bl	8005688 <_printf_common>
 80052bc:	3001      	adds	r0, #1
 80052be:	f040 808d 	bne.w	80053dc <_printf_float+0x1d4>
 80052c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052c6:	b00d      	add	sp, #52	; 0x34
 80052c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	4640      	mov	r0, r8
 80052d2:	4649      	mov	r1, r9
 80052d4:	f7fb fc2a 	bl	8000b2c <__aeabi_dcmpun>
 80052d8:	b110      	cbz	r0, 80052e0 <_printf_float+0xd8>
 80052da:	4a8c      	ldr	r2, [pc, #560]	; (800550c <_printf_float+0x304>)
 80052dc:	4b8c      	ldr	r3, [pc, #560]	; (8005510 <_printf_float+0x308>)
 80052de:	e7da      	b.n	8005296 <_printf_float+0x8e>
 80052e0:	6861      	ldr	r1, [r4, #4]
 80052e2:	1c4b      	adds	r3, r1, #1
 80052e4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80052e8:	a80a      	add	r0, sp, #40	; 0x28
 80052ea:	d13e      	bne.n	800536a <_printf_float+0x162>
 80052ec:	2306      	movs	r3, #6
 80052ee:	6063      	str	r3, [r4, #4]
 80052f0:	2300      	movs	r3, #0
 80052f2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80052f6:	ab09      	add	r3, sp, #36	; 0x24
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	ec49 8b10 	vmov	d0, r8, r9
 80052fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005302:	6022      	str	r2, [r4, #0]
 8005304:	f8cd a004 	str.w	sl, [sp, #4]
 8005308:	6861      	ldr	r1, [r4, #4]
 800530a:	4628      	mov	r0, r5
 800530c:	f7ff fee8 	bl	80050e0 <__cvt>
 8005310:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005314:	2b47      	cmp	r3, #71	; 0x47
 8005316:	4680      	mov	r8, r0
 8005318:	d109      	bne.n	800532e <_printf_float+0x126>
 800531a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800531c:	1cd8      	adds	r0, r3, #3
 800531e:	db02      	blt.n	8005326 <_printf_float+0x11e>
 8005320:	6862      	ldr	r2, [r4, #4]
 8005322:	4293      	cmp	r3, r2
 8005324:	dd47      	ble.n	80053b6 <_printf_float+0x1ae>
 8005326:	f1aa 0a02 	sub.w	sl, sl, #2
 800532a:	fa5f fa8a 	uxtb.w	sl, sl
 800532e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005332:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005334:	d824      	bhi.n	8005380 <_printf_float+0x178>
 8005336:	3901      	subs	r1, #1
 8005338:	4652      	mov	r2, sl
 800533a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800533e:	9109      	str	r1, [sp, #36]	; 0x24
 8005340:	f7ff ff2f 	bl	80051a2 <__exponent>
 8005344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005346:	1813      	adds	r3, r2, r0
 8005348:	2a01      	cmp	r2, #1
 800534a:	4681      	mov	r9, r0
 800534c:	6123      	str	r3, [r4, #16]
 800534e:	dc02      	bgt.n	8005356 <_printf_float+0x14e>
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	07d1      	lsls	r1, r2, #31
 8005354:	d501      	bpl.n	800535a <_printf_float+0x152>
 8005356:	3301      	adds	r3, #1
 8005358:	6123      	str	r3, [r4, #16]
 800535a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0a5      	beq.n	80052ae <_printf_float+0xa6>
 8005362:	232d      	movs	r3, #45	; 0x2d
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005368:	e7a1      	b.n	80052ae <_printf_float+0xa6>
 800536a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800536e:	f000 8177 	beq.w	8005660 <_printf_float+0x458>
 8005372:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005376:	d1bb      	bne.n	80052f0 <_printf_float+0xe8>
 8005378:	2900      	cmp	r1, #0
 800537a:	d1b9      	bne.n	80052f0 <_printf_float+0xe8>
 800537c:	2301      	movs	r3, #1
 800537e:	e7b6      	b.n	80052ee <_printf_float+0xe6>
 8005380:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005384:	d119      	bne.n	80053ba <_printf_float+0x1b2>
 8005386:	2900      	cmp	r1, #0
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	dd0c      	ble.n	80053a6 <_printf_float+0x19e>
 800538c:	6121      	str	r1, [r4, #16]
 800538e:	b913      	cbnz	r3, 8005396 <_printf_float+0x18e>
 8005390:	6822      	ldr	r2, [r4, #0]
 8005392:	07d2      	lsls	r2, r2, #31
 8005394:	d502      	bpl.n	800539c <_printf_float+0x194>
 8005396:	3301      	adds	r3, #1
 8005398:	440b      	add	r3, r1
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539e:	65a3      	str	r3, [r4, #88]	; 0x58
 80053a0:	f04f 0900 	mov.w	r9, #0
 80053a4:	e7d9      	b.n	800535a <_printf_float+0x152>
 80053a6:	b913      	cbnz	r3, 80053ae <_printf_float+0x1a6>
 80053a8:	6822      	ldr	r2, [r4, #0]
 80053aa:	07d0      	lsls	r0, r2, #31
 80053ac:	d501      	bpl.n	80053b2 <_printf_float+0x1aa>
 80053ae:	3302      	adds	r3, #2
 80053b0:	e7f3      	b.n	800539a <_printf_float+0x192>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e7f1      	b.n	800539a <_printf_float+0x192>
 80053b6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80053ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80053be:	4293      	cmp	r3, r2
 80053c0:	db05      	blt.n	80053ce <_printf_float+0x1c6>
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	6123      	str	r3, [r4, #16]
 80053c6:	07d1      	lsls	r1, r2, #31
 80053c8:	d5e8      	bpl.n	800539c <_printf_float+0x194>
 80053ca:	3301      	adds	r3, #1
 80053cc:	e7e5      	b.n	800539a <_printf_float+0x192>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bfd4      	ite	le
 80053d2:	f1c3 0302 	rsble	r3, r3, #2
 80053d6:	2301      	movgt	r3, #1
 80053d8:	4413      	add	r3, r2
 80053da:	e7de      	b.n	800539a <_printf_float+0x192>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	055a      	lsls	r2, r3, #21
 80053e0:	d407      	bmi.n	80053f2 <_printf_float+0x1ea>
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	4642      	mov	r2, r8
 80053e6:	4631      	mov	r1, r6
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b8      	blx	r7
 80053ec:	3001      	adds	r0, #1
 80053ee:	d12b      	bne.n	8005448 <_printf_float+0x240>
 80053f0:	e767      	b.n	80052c2 <_printf_float+0xba>
 80053f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80053f6:	f240 80dc 	bls.w	80055b2 <_printf_float+0x3aa>
 80053fa:	2200      	movs	r2, #0
 80053fc:	2300      	movs	r3, #0
 80053fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005402:	f7fb fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8005406:	2800      	cmp	r0, #0
 8005408:	d033      	beq.n	8005472 <_printf_float+0x26a>
 800540a:	2301      	movs	r3, #1
 800540c:	4a41      	ldr	r2, [pc, #260]	; (8005514 <_printf_float+0x30c>)
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	f43f af54 	beq.w	80052c2 <_printf_float+0xba>
 800541a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800541e:	429a      	cmp	r2, r3
 8005420:	db02      	blt.n	8005428 <_printf_float+0x220>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	07d8      	lsls	r0, r3, #31
 8005426:	d50f      	bpl.n	8005448 <_printf_float+0x240>
 8005428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800542c:	4631      	mov	r1, r6
 800542e:	4628      	mov	r0, r5
 8005430:	47b8      	blx	r7
 8005432:	3001      	adds	r0, #1
 8005434:	f43f af45 	beq.w	80052c2 <_printf_float+0xba>
 8005438:	f04f 0800 	mov.w	r8, #0
 800543c:	f104 091a 	add.w	r9, r4, #26
 8005440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005442:	3b01      	subs	r3, #1
 8005444:	4543      	cmp	r3, r8
 8005446:	dc09      	bgt.n	800545c <_printf_float+0x254>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	079b      	lsls	r3, r3, #30
 800544c:	f100 8103 	bmi.w	8005656 <_printf_float+0x44e>
 8005450:	68e0      	ldr	r0, [r4, #12]
 8005452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005454:	4298      	cmp	r0, r3
 8005456:	bfb8      	it	lt
 8005458:	4618      	movlt	r0, r3
 800545a:	e734      	b.n	80052c6 <_printf_float+0xbe>
 800545c:	2301      	movs	r3, #1
 800545e:	464a      	mov	r2, r9
 8005460:	4631      	mov	r1, r6
 8005462:	4628      	mov	r0, r5
 8005464:	47b8      	blx	r7
 8005466:	3001      	adds	r0, #1
 8005468:	f43f af2b 	beq.w	80052c2 <_printf_float+0xba>
 800546c:	f108 0801 	add.w	r8, r8, #1
 8005470:	e7e6      	b.n	8005440 <_printf_float+0x238>
 8005472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	dc2b      	bgt.n	80054d0 <_printf_float+0x2c8>
 8005478:	2301      	movs	r3, #1
 800547a:	4a26      	ldr	r2, [pc, #152]	; (8005514 <_printf_float+0x30c>)
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f af1d 	beq.w	80052c2 <_printf_float+0xba>
 8005488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548a:	b923      	cbnz	r3, 8005496 <_printf_float+0x28e>
 800548c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800548e:	b913      	cbnz	r3, 8005496 <_printf_float+0x28e>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	07d9      	lsls	r1, r3, #31
 8005494:	d5d8      	bpl.n	8005448 <_printf_float+0x240>
 8005496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800549a:	4631      	mov	r1, r6
 800549c:	4628      	mov	r0, r5
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	f43f af0e 	beq.w	80052c2 <_printf_float+0xba>
 80054a6:	f04f 0900 	mov.w	r9, #0
 80054aa:	f104 0a1a 	add.w	sl, r4, #26
 80054ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b0:	425b      	negs	r3, r3
 80054b2:	454b      	cmp	r3, r9
 80054b4:	dc01      	bgt.n	80054ba <_printf_float+0x2b2>
 80054b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054b8:	e794      	b.n	80053e4 <_printf_float+0x1dc>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4652      	mov	r2, sl
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f aefc 	beq.w	80052c2 <_printf_float+0xba>
 80054ca:	f109 0901 	add.w	r9, r9, #1
 80054ce:	e7ee      	b.n	80054ae <_printf_float+0x2a6>
 80054d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054d4:	429a      	cmp	r2, r3
 80054d6:	bfa8      	it	ge
 80054d8:	461a      	movge	r2, r3
 80054da:	2a00      	cmp	r2, #0
 80054dc:	4691      	mov	r9, r2
 80054de:	dd07      	ble.n	80054f0 <_printf_float+0x2e8>
 80054e0:	4613      	mov	r3, r2
 80054e2:	4631      	mov	r1, r6
 80054e4:	4642      	mov	r2, r8
 80054e6:	4628      	mov	r0, r5
 80054e8:	47b8      	blx	r7
 80054ea:	3001      	adds	r0, #1
 80054ec:	f43f aee9 	beq.w	80052c2 <_printf_float+0xba>
 80054f0:	f104 031a 	add.w	r3, r4, #26
 80054f4:	f04f 0b00 	mov.w	fp, #0
 80054f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054fc:	9306      	str	r3, [sp, #24]
 80054fe:	e015      	b.n	800552c <_printf_float+0x324>
 8005500:	7fefffff 	.word	0x7fefffff
 8005504:	08007cf0 	.word	0x08007cf0
 8005508:	08007cec 	.word	0x08007cec
 800550c:	08007cf8 	.word	0x08007cf8
 8005510:	08007cf4 	.word	0x08007cf4
 8005514:	08007cfc 	.word	0x08007cfc
 8005518:	2301      	movs	r3, #1
 800551a:	9a06      	ldr	r2, [sp, #24]
 800551c:	4631      	mov	r1, r6
 800551e:	4628      	mov	r0, r5
 8005520:	47b8      	blx	r7
 8005522:	3001      	adds	r0, #1
 8005524:	f43f aecd 	beq.w	80052c2 <_printf_float+0xba>
 8005528:	f10b 0b01 	add.w	fp, fp, #1
 800552c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005530:	ebaa 0309 	sub.w	r3, sl, r9
 8005534:	455b      	cmp	r3, fp
 8005536:	dcef      	bgt.n	8005518 <_printf_float+0x310>
 8005538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800553c:	429a      	cmp	r2, r3
 800553e:	44d0      	add	r8, sl
 8005540:	db15      	blt.n	800556e <_printf_float+0x366>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	07da      	lsls	r2, r3, #31
 8005546:	d412      	bmi.n	800556e <_printf_float+0x366>
 8005548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800554a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800554c:	eba3 020a 	sub.w	r2, r3, sl
 8005550:	eba3 0a01 	sub.w	sl, r3, r1
 8005554:	4592      	cmp	sl, r2
 8005556:	bfa8      	it	ge
 8005558:	4692      	movge	sl, r2
 800555a:	f1ba 0f00 	cmp.w	sl, #0
 800555e:	dc0e      	bgt.n	800557e <_printf_float+0x376>
 8005560:	f04f 0800 	mov.w	r8, #0
 8005564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005568:	f104 091a 	add.w	r9, r4, #26
 800556c:	e019      	b.n	80055a2 <_printf_float+0x39a>
 800556e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	d1e5      	bne.n	8005548 <_printf_float+0x340>
 800557c:	e6a1      	b.n	80052c2 <_printf_float+0xba>
 800557e:	4653      	mov	r3, sl
 8005580:	4642      	mov	r2, r8
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	d1e9      	bne.n	8005560 <_printf_float+0x358>
 800558c:	e699      	b.n	80052c2 <_printf_float+0xba>
 800558e:	2301      	movs	r3, #1
 8005590:	464a      	mov	r2, r9
 8005592:	4631      	mov	r1, r6
 8005594:	4628      	mov	r0, r5
 8005596:	47b8      	blx	r7
 8005598:	3001      	adds	r0, #1
 800559a:	f43f ae92 	beq.w	80052c2 <_printf_float+0xba>
 800559e:	f108 0801 	add.w	r8, r8, #1
 80055a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	eba3 030a 	sub.w	r3, r3, sl
 80055ac:	4543      	cmp	r3, r8
 80055ae:	dcee      	bgt.n	800558e <_printf_float+0x386>
 80055b0:	e74a      	b.n	8005448 <_printf_float+0x240>
 80055b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055b4:	2a01      	cmp	r2, #1
 80055b6:	dc01      	bgt.n	80055bc <_printf_float+0x3b4>
 80055b8:	07db      	lsls	r3, r3, #31
 80055ba:	d53a      	bpl.n	8005632 <_printf_float+0x42a>
 80055bc:	2301      	movs	r3, #1
 80055be:	4642      	mov	r2, r8
 80055c0:	4631      	mov	r1, r6
 80055c2:	4628      	mov	r0, r5
 80055c4:	47b8      	blx	r7
 80055c6:	3001      	adds	r0, #1
 80055c8:	f43f ae7b 	beq.w	80052c2 <_printf_float+0xba>
 80055cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d0:	4631      	mov	r1, r6
 80055d2:	4628      	mov	r0, r5
 80055d4:	47b8      	blx	r7
 80055d6:	3001      	adds	r0, #1
 80055d8:	f108 0801 	add.w	r8, r8, #1
 80055dc:	f43f ae71 	beq.w	80052c2 <_printf_float+0xba>
 80055e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e2:	2200      	movs	r2, #0
 80055e4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80055e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055ec:	2300      	movs	r3, #0
 80055ee:	f7fb fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80055f2:	b9c8      	cbnz	r0, 8005628 <_printf_float+0x420>
 80055f4:	4653      	mov	r3, sl
 80055f6:	4642      	mov	r2, r8
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	d10e      	bne.n	8005620 <_printf_float+0x418>
 8005602:	e65e      	b.n	80052c2 <_printf_float+0xba>
 8005604:	2301      	movs	r3, #1
 8005606:	4652      	mov	r2, sl
 8005608:	4631      	mov	r1, r6
 800560a:	4628      	mov	r0, r5
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	f43f ae57 	beq.w	80052c2 <_printf_float+0xba>
 8005614:	f108 0801 	add.w	r8, r8, #1
 8005618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561a:	3b01      	subs	r3, #1
 800561c:	4543      	cmp	r3, r8
 800561e:	dcf1      	bgt.n	8005604 <_printf_float+0x3fc>
 8005620:	464b      	mov	r3, r9
 8005622:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005626:	e6de      	b.n	80053e6 <_printf_float+0x1de>
 8005628:	f04f 0800 	mov.w	r8, #0
 800562c:	f104 0a1a 	add.w	sl, r4, #26
 8005630:	e7f2      	b.n	8005618 <_printf_float+0x410>
 8005632:	2301      	movs	r3, #1
 8005634:	e7df      	b.n	80055f6 <_printf_float+0x3ee>
 8005636:	2301      	movs	r3, #1
 8005638:	464a      	mov	r2, r9
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f ae3e 	beq.w	80052c2 <_printf_float+0xba>
 8005646:	f108 0801 	add.w	r8, r8, #1
 800564a:	68e3      	ldr	r3, [r4, #12]
 800564c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	4543      	cmp	r3, r8
 8005652:	dcf0      	bgt.n	8005636 <_printf_float+0x42e>
 8005654:	e6fc      	b.n	8005450 <_printf_float+0x248>
 8005656:	f04f 0800 	mov.w	r8, #0
 800565a:	f104 0919 	add.w	r9, r4, #25
 800565e:	e7f4      	b.n	800564a <_printf_float+0x442>
 8005660:	2900      	cmp	r1, #0
 8005662:	f43f ae8b 	beq.w	800537c <_printf_float+0x174>
 8005666:	2300      	movs	r3, #0
 8005668:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800566c:	ab09      	add	r3, sp, #36	; 0x24
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	ec49 8b10 	vmov	d0, r8, r9
 8005674:	6022      	str	r2, [r4, #0]
 8005676:	f8cd a004 	str.w	sl, [sp, #4]
 800567a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800567e:	4628      	mov	r0, r5
 8005680:	f7ff fd2e 	bl	80050e0 <__cvt>
 8005684:	4680      	mov	r8, r0
 8005686:	e648      	b.n	800531a <_printf_float+0x112>

08005688 <_printf_common>:
 8005688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	4691      	mov	r9, r2
 800568e:	461f      	mov	r7, r3
 8005690:	688a      	ldr	r2, [r1, #8]
 8005692:	690b      	ldr	r3, [r1, #16]
 8005694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005698:	4293      	cmp	r3, r2
 800569a:	bfb8      	it	lt
 800569c:	4613      	movlt	r3, r2
 800569e:	f8c9 3000 	str.w	r3, [r9]
 80056a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056a6:	4606      	mov	r6, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	b112      	cbz	r2, 80056b2 <_printf_common+0x2a>
 80056ac:	3301      	adds	r3, #1
 80056ae:	f8c9 3000 	str.w	r3, [r9]
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	0699      	lsls	r1, r3, #26
 80056b6:	bf42      	ittt	mi
 80056b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80056bc:	3302      	addmi	r3, #2
 80056be:	f8c9 3000 	strmi.w	r3, [r9]
 80056c2:	6825      	ldr	r5, [r4, #0]
 80056c4:	f015 0506 	ands.w	r5, r5, #6
 80056c8:	d107      	bne.n	80056da <_printf_common+0x52>
 80056ca:	f104 0a19 	add.w	sl, r4, #25
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	f8d9 2000 	ldr.w	r2, [r9]
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	42ab      	cmp	r3, r5
 80056d8:	dc28      	bgt.n	800572c <_printf_common+0xa4>
 80056da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	3300      	adds	r3, #0
 80056e2:	bf18      	it	ne
 80056e4:	2301      	movne	r3, #1
 80056e6:	0692      	lsls	r2, r2, #26
 80056e8:	d42d      	bmi.n	8005746 <_printf_common+0xbe>
 80056ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ee:	4639      	mov	r1, r7
 80056f0:	4630      	mov	r0, r6
 80056f2:	47c0      	blx	r8
 80056f4:	3001      	adds	r0, #1
 80056f6:	d020      	beq.n	800573a <_printf_common+0xb2>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	68e5      	ldr	r5, [r4, #12]
 80056fc:	f8d9 2000 	ldr.w	r2, [r9]
 8005700:	f003 0306 	and.w	r3, r3, #6
 8005704:	2b04      	cmp	r3, #4
 8005706:	bf08      	it	eq
 8005708:	1aad      	subeq	r5, r5, r2
 800570a:	68a3      	ldr	r3, [r4, #8]
 800570c:	6922      	ldr	r2, [r4, #16]
 800570e:	bf0c      	ite	eq
 8005710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005714:	2500      	movne	r5, #0
 8005716:	4293      	cmp	r3, r2
 8005718:	bfc4      	itt	gt
 800571a:	1a9b      	subgt	r3, r3, r2
 800571c:	18ed      	addgt	r5, r5, r3
 800571e:	f04f 0900 	mov.w	r9, #0
 8005722:	341a      	adds	r4, #26
 8005724:	454d      	cmp	r5, r9
 8005726:	d11a      	bne.n	800575e <_printf_common+0xd6>
 8005728:	2000      	movs	r0, #0
 800572a:	e008      	b.n	800573e <_printf_common+0xb6>
 800572c:	2301      	movs	r3, #1
 800572e:	4652      	mov	r2, sl
 8005730:	4639      	mov	r1, r7
 8005732:	4630      	mov	r0, r6
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d103      	bne.n	8005742 <_printf_common+0xba>
 800573a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800573e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005742:	3501      	adds	r5, #1
 8005744:	e7c3      	b.n	80056ce <_printf_common+0x46>
 8005746:	18e1      	adds	r1, r4, r3
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	2030      	movs	r0, #48	; 0x30
 800574c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005750:	4422      	add	r2, r4
 8005752:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005756:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800575a:	3302      	adds	r3, #2
 800575c:	e7c5      	b.n	80056ea <_printf_common+0x62>
 800575e:	2301      	movs	r3, #1
 8005760:	4622      	mov	r2, r4
 8005762:	4639      	mov	r1, r7
 8005764:	4630      	mov	r0, r6
 8005766:	47c0      	blx	r8
 8005768:	3001      	adds	r0, #1
 800576a:	d0e6      	beq.n	800573a <_printf_common+0xb2>
 800576c:	f109 0901 	add.w	r9, r9, #1
 8005770:	e7d8      	b.n	8005724 <_printf_common+0x9c>
	...

08005774 <_printf_i>:
 8005774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005778:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800577c:	460c      	mov	r4, r1
 800577e:	7e09      	ldrb	r1, [r1, #24]
 8005780:	b085      	sub	sp, #20
 8005782:	296e      	cmp	r1, #110	; 0x6e
 8005784:	4617      	mov	r7, r2
 8005786:	4606      	mov	r6, r0
 8005788:	4698      	mov	r8, r3
 800578a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800578c:	f000 80b3 	beq.w	80058f6 <_printf_i+0x182>
 8005790:	d822      	bhi.n	80057d8 <_printf_i+0x64>
 8005792:	2963      	cmp	r1, #99	; 0x63
 8005794:	d036      	beq.n	8005804 <_printf_i+0x90>
 8005796:	d80a      	bhi.n	80057ae <_printf_i+0x3a>
 8005798:	2900      	cmp	r1, #0
 800579a:	f000 80b9 	beq.w	8005910 <_printf_i+0x19c>
 800579e:	2958      	cmp	r1, #88	; 0x58
 80057a0:	f000 8083 	beq.w	80058aa <_printf_i+0x136>
 80057a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80057ac:	e032      	b.n	8005814 <_printf_i+0xa0>
 80057ae:	2964      	cmp	r1, #100	; 0x64
 80057b0:	d001      	beq.n	80057b6 <_printf_i+0x42>
 80057b2:	2969      	cmp	r1, #105	; 0x69
 80057b4:	d1f6      	bne.n	80057a4 <_printf_i+0x30>
 80057b6:	6820      	ldr	r0, [r4, #0]
 80057b8:	6813      	ldr	r3, [r2, #0]
 80057ba:	0605      	lsls	r5, r0, #24
 80057bc:	f103 0104 	add.w	r1, r3, #4
 80057c0:	d52a      	bpl.n	8005818 <_printf_i+0xa4>
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6011      	str	r1, [r2, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	da03      	bge.n	80057d2 <_printf_i+0x5e>
 80057ca:	222d      	movs	r2, #45	; 0x2d
 80057cc:	425b      	negs	r3, r3
 80057ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057d2:	486f      	ldr	r0, [pc, #444]	; (8005990 <_printf_i+0x21c>)
 80057d4:	220a      	movs	r2, #10
 80057d6:	e039      	b.n	800584c <_printf_i+0xd8>
 80057d8:	2973      	cmp	r1, #115	; 0x73
 80057da:	f000 809d 	beq.w	8005918 <_printf_i+0x1a4>
 80057de:	d808      	bhi.n	80057f2 <_printf_i+0x7e>
 80057e0:	296f      	cmp	r1, #111	; 0x6f
 80057e2:	d020      	beq.n	8005826 <_printf_i+0xb2>
 80057e4:	2970      	cmp	r1, #112	; 0x70
 80057e6:	d1dd      	bne.n	80057a4 <_printf_i+0x30>
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	f043 0320 	orr.w	r3, r3, #32
 80057ee:	6023      	str	r3, [r4, #0]
 80057f0:	e003      	b.n	80057fa <_printf_i+0x86>
 80057f2:	2975      	cmp	r1, #117	; 0x75
 80057f4:	d017      	beq.n	8005826 <_printf_i+0xb2>
 80057f6:	2978      	cmp	r1, #120	; 0x78
 80057f8:	d1d4      	bne.n	80057a4 <_printf_i+0x30>
 80057fa:	2378      	movs	r3, #120	; 0x78
 80057fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005800:	4864      	ldr	r0, [pc, #400]	; (8005994 <_printf_i+0x220>)
 8005802:	e055      	b.n	80058b0 <_printf_i+0x13c>
 8005804:	6813      	ldr	r3, [r2, #0]
 8005806:	1d19      	adds	r1, r3, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6011      	str	r1, [r2, #0]
 800580c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005814:	2301      	movs	r3, #1
 8005816:	e08c      	b.n	8005932 <_printf_i+0x1be>
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6011      	str	r1, [r2, #0]
 800581c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005820:	bf18      	it	ne
 8005822:	b21b      	sxthne	r3, r3
 8005824:	e7cf      	b.n	80057c6 <_printf_i+0x52>
 8005826:	6813      	ldr	r3, [r2, #0]
 8005828:	6825      	ldr	r5, [r4, #0]
 800582a:	1d18      	adds	r0, r3, #4
 800582c:	6010      	str	r0, [r2, #0]
 800582e:	0628      	lsls	r0, r5, #24
 8005830:	d501      	bpl.n	8005836 <_printf_i+0xc2>
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	e002      	b.n	800583c <_printf_i+0xc8>
 8005836:	0668      	lsls	r0, r5, #25
 8005838:	d5fb      	bpl.n	8005832 <_printf_i+0xbe>
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	4854      	ldr	r0, [pc, #336]	; (8005990 <_printf_i+0x21c>)
 800583e:	296f      	cmp	r1, #111	; 0x6f
 8005840:	bf14      	ite	ne
 8005842:	220a      	movne	r2, #10
 8005844:	2208      	moveq	r2, #8
 8005846:	2100      	movs	r1, #0
 8005848:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800584c:	6865      	ldr	r5, [r4, #4]
 800584e:	60a5      	str	r5, [r4, #8]
 8005850:	2d00      	cmp	r5, #0
 8005852:	f2c0 8095 	blt.w	8005980 <_printf_i+0x20c>
 8005856:	6821      	ldr	r1, [r4, #0]
 8005858:	f021 0104 	bic.w	r1, r1, #4
 800585c:	6021      	str	r1, [r4, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d13d      	bne.n	80058de <_printf_i+0x16a>
 8005862:	2d00      	cmp	r5, #0
 8005864:	f040 808e 	bne.w	8005984 <_printf_i+0x210>
 8005868:	4665      	mov	r5, ip
 800586a:	2a08      	cmp	r2, #8
 800586c:	d10b      	bne.n	8005886 <_printf_i+0x112>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	07db      	lsls	r3, r3, #31
 8005872:	d508      	bpl.n	8005886 <_printf_i+0x112>
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	6862      	ldr	r2, [r4, #4]
 8005878:	429a      	cmp	r2, r3
 800587a:	bfde      	ittt	le
 800587c:	2330      	movle	r3, #48	; 0x30
 800587e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005882:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005886:	ebac 0305 	sub.w	r3, ip, r5
 800588a:	6123      	str	r3, [r4, #16]
 800588c:	f8cd 8000 	str.w	r8, [sp]
 8005890:	463b      	mov	r3, r7
 8005892:	aa03      	add	r2, sp, #12
 8005894:	4621      	mov	r1, r4
 8005896:	4630      	mov	r0, r6
 8005898:	f7ff fef6 	bl	8005688 <_printf_common>
 800589c:	3001      	adds	r0, #1
 800589e:	d14d      	bne.n	800593c <_printf_i+0x1c8>
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058a4:	b005      	add	sp, #20
 80058a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058aa:	4839      	ldr	r0, [pc, #228]	; (8005990 <_printf_i+0x21c>)
 80058ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80058b0:	6813      	ldr	r3, [r2, #0]
 80058b2:	6821      	ldr	r1, [r4, #0]
 80058b4:	1d1d      	adds	r5, r3, #4
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6015      	str	r5, [r2, #0]
 80058ba:	060a      	lsls	r2, r1, #24
 80058bc:	d50b      	bpl.n	80058d6 <_printf_i+0x162>
 80058be:	07ca      	lsls	r2, r1, #31
 80058c0:	bf44      	itt	mi
 80058c2:	f041 0120 	orrmi.w	r1, r1, #32
 80058c6:	6021      	strmi	r1, [r4, #0]
 80058c8:	b91b      	cbnz	r3, 80058d2 <_printf_i+0x15e>
 80058ca:	6822      	ldr	r2, [r4, #0]
 80058cc:	f022 0220 	bic.w	r2, r2, #32
 80058d0:	6022      	str	r2, [r4, #0]
 80058d2:	2210      	movs	r2, #16
 80058d4:	e7b7      	b.n	8005846 <_printf_i+0xd2>
 80058d6:	064d      	lsls	r5, r1, #25
 80058d8:	bf48      	it	mi
 80058da:	b29b      	uxthmi	r3, r3
 80058dc:	e7ef      	b.n	80058be <_printf_i+0x14a>
 80058de:	4665      	mov	r5, ip
 80058e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80058e4:	fb02 3311 	mls	r3, r2, r1, r3
 80058e8:	5cc3      	ldrb	r3, [r0, r3]
 80058ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80058ee:	460b      	mov	r3, r1
 80058f0:	2900      	cmp	r1, #0
 80058f2:	d1f5      	bne.n	80058e0 <_printf_i+0x16c>
 80058f4:	e7b9      	b.n	800586a <_printf_i+0xf6>
 80058f6:	6813      	ldr	r3, [r2, #0]
 80058f8:	6825      	ldr	r5, [r4, #0]
 80058fa:	6961      	ldr	r1, [r4, #20]
 80058fc:	1d18      	adds	r0, r3, #4
 80058fe:	6010      	str	r0, [r2, #0]
 8005900:	0628      	lsls	r0, r5, #24
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	d501      	bpl.n	800590a <_printf_i+0x196>
 8005906:	6019      	str	r1, [r3, #0]
 8005908:	e002      	b.n	8005910 <_printf_i+0x19c>
 800590a:	066a      	lsls	r2, r5, #25
 800590c:	d5fb      	bpl.n	8005906 <_printf_i+0x192>
 800590e:	8019      	strh	r1, [r3, #0]
 8005910:	2300      	movs	r3, #0
 8005912:	6123      	str	r3, [r4, #16]
 8005914:	4665      	mov	r5, ip
 8005916:	e7b9      	b.n	800588c <_printf_i+0x118>
 8005918:	6813      	ldr	r3, [r2, #0]
 800591a:	1d19      	adds	r1, r3, #4
 800591c:	6011      	str	r1, [r2, #0]
 800591e:	681d      	ldr	r5, [r3, #0]
 8005920:	6862      	ldr	r2, [r4, #4]
 8005922:	2100      	movs	r1, #0
 8005924:	4628      	mov	r0, r5
 8005926:	f7fa fc5b 	bl	80001e0 <memchr>
 800592a:	b108      	cbz	r0, 8005930 <_printf_i+0x1bc>
 800592c:	1b40      	subs	r0, r0, r5
 800592e:	6060      	str	r0, [r4, #4]
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	2300      	movs	r3, #0
 8005936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800593a:	e7a7      	b.n	800588c <_printf_i+0x118>
 800593c:	6923      	ldr	r3, [r4, #16]
 800593e:	462a      	mov	r2, r5
 8005940:	4639      	mov	r1, r7
 8005942:	4630      	mov	r0, r6
 8005944:	47c0      	blx	r8
 8005946:	3001      	adds	r0, #1
 8005948:	d0aa      	beq.n	80058a0 <_printf_i+0x12c>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	079b      	lsls	r3, r3, #30
 800594e:	d413      	bmi.n	8005978 <_printf_i+0x204>
 8005950:	68e0      	ldr	r0, [r4, #12]
 8005952:	9b03      	ldr	r3, [sp, #12]
 8005954:	4298      	cmp	r0, r3
 8005956:	bfb8      	it	lt
 8005958:	4618      	movlt	r0, r3
 800595a:	e7a3      	b.n	80058a4 <_printf_i+0x130>
 800595c:	2301      	movs	r3, #1
 800595e:	464a      	mov	r2, r9
 8005960:	4639      	mov	r1, r7
 8005962:	4630      	mov	r0, r6
 8005964:	47c0      	blx	r8
 8005966:	3001      	adds	r0, #1
 8005968:	d09a      	beq.n	80058a0 <_printf_i+0x12c>
 800596a:	3501      	adds	r5, #1
 800596c:	68e3      	ldr	r3, [r4, #12]
 800596e:	9a03      	ldr	r2, [sp, #12]
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	42ab      	cmp	r3, r5
 8005974:	dcf2      	bgt.n	800595c <_printf_i+0x1e8>
 8005976:	e7eb      	b.n	8005950 <_printf_i+0x1dc>
 8005978:	2500      	movs	r5, #0
 800597a:	f104 0919 	add.w	r9, r4, #25
 800597e:	e7f5      	b.n	800596c <_printf_i+0x1f8>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1ac      	bne.n	80058de <_printf_i+0x16a>
 8005984:	7803      	ldrb	r3, [r0, #0]
 8005986:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800598a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800598e:	e76c      	b.n	800586a <_printf_i+0xf6>
 8005990:	08007cfe 	.word	0x08007cfe
 8005994:	08007d0f 	.word	0x08007d0f

08005998 <iprintf>:
 8005998:	b40f      	push	{r0, r1, r2, r3}
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <iprintf+0x2c>)
 800599c:	b513      	push	{r0, r1, r4, lr}
 800599e:	681c      	ldr	r4, [r3, #0]
 80059a0:	b124      	cbz	r4, 80059ac <iprintf+0x14>
 80059a2:	69a3      	ldr	r3, [r4, #24]
 80059a4:	b913      	cbnz	r3, 80059ac <iprintf+0x14>
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 fe92 	bl	80066d0 <__sinit>
 80059ac:	ab05      	add	r3, sp, #20
 80059ae:	9a04      	ldr	r2, [sp, #16]
 80059b0:	68a1      	ldr	r1, [r4, #8]
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	4620      	mov	r0, r4
 80059b6:	f001 faf1 	bl	8006f9c <_vfiprintf_r>
 80059ba:	b002      	add	sp, #8
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	b004      	add	sp, #16
 80059c2:	4770      	bx	lr
 80059c4:	2000000c 	.word	0x2000000c

080059c8 <quorem>:
 80059c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	6903      	ldr	r3, [r0, #16]
 80059ce:	690c      	ldr	r4, [r1, #16]
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	4680      	mov	r8, r0
 80059d4:	f2c0 8082 	blt.w	8005adc <quorem+0x114>
 80059d8:	3c01      	subs	r4, #1
 80059da:	f101 0714 	add.w	r7, r1, #20
 80059de:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80059e2:	f100 0614 	add.w	r6, r0, #20
 80059e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80059ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80059ee:	eb06 030c 	add.w	r3, r6, ip
 80059f2:	3501      	adds	r5, #1
 80059f4:	eb07 090c 	add.w	r9, r7, ip
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	fbb0 f5f5 	udiv	r5, r0, r5
 80059fe:	b395      	cbz	r5, 8005a66 <quorem+0x9e>
 8005a00:	f04f 0a00 	mov.w	sl, #0
 8005a04:	4638      	mov	r0, r7
 8005a06:	46b6      	mov	lr, r6
 8005a08:	46d3      	mov	fp, sl
 8005a0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a0e:	b293      	uxth	r3, r2
 8005a10:	fb05 a303 	mla	r3, r5, r3, sl
 8005a14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	ebab 0303 	sub.w	r3, fp, r3
 8005a1e:	0c12      	lsrs	r2, r2, #16
 8005a20:	f8de b000 	ldr.w	fp, [lr]
 8005a24:	fb05 a202 	mla	r2, r5, r2, sl
 8005a28:	fa13 f38b 	uxtah	r3, r3, fp
 8005a2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005a30:	fa1f fb82 	uxth.w	fp, r2
 8005a34:	f8de 2000 	ldr.w	r2, [lr]
 8005a38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005a3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a46:	4581      	cmp	r9, r0
 8005a48:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005a4c:	f84e 3b04 	str.w	r3, [lr], #4
 8005a50:	d2db      	bcs.n	8005a0a <quorem+0x42>
 8005a52:	f856 300c 	ldr.w	r3, [r6, ip]
 8005a56:	b933      	cbnz	r3, 8005a66 <quorem+0x9e>
 8005a58:	9b01      	ldr	r3, [sp, #4]
 8005a5a:	3b04      	subs	r3, #4
 8005a5c:	429e      	cmp	r6, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	d330      	bcc.n	8005ac4 <quorem+0xfc>
 8005a62:	f8c8 4010 	str.w	r4, [r8, #16]
 8005a66:	4640      	mov	r0, r8
 8005a68:	f001 f8f2 	bl	8006c50 <__mcmp>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	db25      	blt.n	8005abc <quorem+0xf4>
 8005a70:	3501      	adds	r5, #1
 8005a72:	4630      	mov	r0, r6
 8005a74:	f04f 0c00 	mov.w	ip, #0
 8005a78:	f857 2b04 	ldr.w	r2, [r7], #4
 8005a7c:	f8d0 e000 	ldr.w	lr, [r0]
 8005a80:	b293      	uxth	r3, r2
 8005a82:	ebac 0303 	sub.w	r3, ip, r3
 8005a86:	0c12      	lsrs	r2, r2, #16
 8005a88:	fa13 f38e 	uxtah	r3, r3, lr
 8005a8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a9a:	45b9      	cmp	r9, r7
 8005a9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005aa0:	f840 3b04 	str.w	r3, [r0], #4
 8005aa4:	d2e8      	bcs.n	8005a78 <quorem+0xb0>
 8005aa6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005aaa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005aae:	b92a      	cbnz	r2, 8005abc <quorem+0xf4>
 8005ab0:	3b04      	subs	r3, #4
 8005ab2:	429e      	cmp	r6, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	d30b      	bcc.n	8005ad0 <quorem+0x108>
 8005ab8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005abc:	4628      	mov	r0, r5
 8005abe:	b003      	add	sp, #12
 8005ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac4:	6812      	ldr	r2, [r2, #0]
 8005ac6:	3b04      	subs	r3, #4
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	d1ca      	bne.n	8005a62 <quorem+0x9a>
 8005acc:	3c01      	subs	r4, #1
 8005ace:	e7c5      	b.n	8005a5c <quorem+0x94>
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	3b04      	subs	r3, #4
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	d1ef      	bne.n	8005ab8 <quorem+0xf0>
 8005ad8:	3c01      	subs	r4, #1
 8005ada:	e7ea      	b.n	8005ab2 <quorem+0xea>
 8005adc:	2000      	movs	r0, #0
 8005ade:	e7ee      	b.n	8005abe <quorem+0xf6>

08005ae0 <_dtoa_r>:
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	ec57 6b10 	vmov	r6, r7, d0
 8005ae8:	b097      	sub	sp, #92	; 0x5c
 8005aea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005aec:	9106      	str	r1, [sp, #24]
 8005aee:	4604      	mov	r4, r0
 8005af0:	920b      	str	r2, [sp, #44]	; 0x2c
 8005af2:	9312      	str	r3, [sp, #72]	; 0x48
 8005af4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005af8:	e9cd 6700 	strd	r6, r7, [sp]
 8005afc:	b93d      	cbnz	r5, 8005b0e <_dtoa_r+0x2e>
 8005afe:	2010      	movs	r0, #16
 8005b00:	f000 fe7e 	bl	8006800 <malloc>
 8005b04:	6260      	str	r0, [r4, #36]	; 0x24
 8005b06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b0a:	6005      	str	r5, [r0, #0]
 8005b0c:	60c5      	str	r5, [r0, #12]
 8005b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	b151      	cbz	r1, 8005b2a <_dtoa_r+0x4a>
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	604a      	str	r2, [r1, #4]
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4093      	lsls	r3, r2
 8005b1c:	608b      	str	r3, [r1, #8]
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f000 feb5 	bl	800688e <_Bfree>
 8005b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	1e3b      	subs	r3, r7, #0
 8005b2c:	bfbb      	ittet	lt
 8005b2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b32:	9301      	strlt	r3, [sp, #4]
 8005b34:	2300      	movge	r3, #0
 8005b36:	2201      	movlt	r2, #1
 8005b38:	bfac      	ite	ge
 8005b3a:	f8c8 3000 	strge.w	r3, [r8]
 8005b3e:	f8c8 2000 	strlt.w	r2, [r8]
 8005b42:	4baf      	ldr	r3, [pc, #700]	; (8005e00 <_dtoa_r+0x320>)
 8005b44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005b48:	ea33 0308 	bics.w	r3, r3, r8
 8005b4c:	d114      	bne.n	8005b78 <_dtoa_r+0x98>
 8005b4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b50:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	9b00      	ldr	r3, [sp, #0]
 8005b58:	b923      	cbnz	r3, 8005b64 <_dtoa_r+0x84>
 8005b5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	f000 8542 	beq.w	80065e8 <_dtoa_r+0xb08>
 8005b64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005e14 <_dtoa_r+0x334>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8544 	beq.w	80065f8 <_dtoa_r+0xb18>
 8005b70:	f10b 0303 	add.w	r3, fp, #3
 8005b74:	f000 bd3e 	b.w	80065f4 <_dtoa_r+0xb14>
 8005b78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	4630      	mov	r0, r6
 8005b82:	4639      	mov	r1, r7
 8005b84:	f7fa ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b88:	4681      	mov	r9, r0
 8005b8a:	b168      	cbz	r0, 8005ba8 <_dtoa_r+0xc8>
 8005b8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b8e:	2301      	movs	r3, #1
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8524 	beq.w	80065e2 <_dtoa_r+0xb02>
 8005b9a:	4b9a      	ldr	r3, [pc, #616]	; (8005e04 <_dtoa_r+0x324>)
 8005b9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b9e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	f000 bd28 	b.w	80065f8 <_dtoa_r+0xb18>
 8005ba8:	aa14      	add	r2, sp, #80	; 0x50
 8005baa:	a915      	add	r1, sp, #84	; 0x54
 8005bac:	ec47 6b10 	vmov	d0, r6, r7
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f001 f8c4 	bl	8006d3e <__d2b>
 8005bb6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005bba:	9004      	str	r0, [sp, #16]
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	d07c      	beq.n	8005cba <_dtoa_r+0x1da>
 8005bc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005bc4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005bc8:	46b2      	mov	sl, r6
 8005bca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005bce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bd2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	4b8b      	ldr	r3, [pc, #556]	; (8005e08 <_dtoa_r+0x328>)
 8005bda:	4650      	mov	r0, sl
 8005bdc:	4659      	mov	r1, fp
 8005bde:	f7fa fb53 	bl	8000288 <__aeabi_dsub>
 8005be2:	a381      	add	r3, pc, #516	; (adr r3, 8005de8 <_dtoa_r+0x308>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa fd06 	bl	80005f8 <__aeabi_dmul>
 8005bec:	a380      	add	r3, pc, #512	; (adr r3, 8005df0 <_dtoa_r+0x310>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f7fa fb4b 	bl	800028c <__adddf3>
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	460f      	mov	r7, r1
 8005bfc:	f7fa fc92 	bl	8000524 <__aeabi_i2d>
 8005c00:	a37d      	add	r3, pc, #500	; (adr r3, 8005df8 <_dtoa_r+0x318>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa fcf7 	bl	80005f8 <__aeabi_dmul>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4630      	mov	r0, r6
 8005c10:	4639      	mov	r1, r7
 8005c12:	f7fa fb3b 	bl	800028c <__adddf3>
 8005c16:	4606      	mov	r6, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	f7fa ff9d 	bl	8000b58 <__aeabi_d2iz>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	4682      	mov	sl, r0
 8005c22:	2300      	movs	r3, #0
 8005c24:	4630      	mov	r0, r6
 8005c26:	4639      	mov	r1, r7
 8005c28:	f7fa ff58 	bl	8000adc <__aeabi_dcmplt>
 8005c2c:	b148      	cbz	r0, 8005c42 <_dtoa_r+0x162>
 8005c2e:	4650      	mov	r0, sl
 8005c30:	f7fa fc78 	bl	8000524 <__aeabi_i2d>
 8005c34:	4632      	mov	r2, r6
 8005c36:	463b      	mov	r3, r7
 8005c38:	f7fa ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c3c:	b908      	cbnz	r0, 8005c42 <_dtoa_r+0x162>
 8005c3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c42:	f1ba 0f16 	cmp.w	sl, #22
 8005c46:	d859      	bhi.n	8005cfc <_dtoa_r+0x21c>
 8005c48:	4970      	ldr	r1, [pc, #448]	; (8005e0c <_dtoa_r+0x32c>)
 8005c4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c56:	f7fa ff5f 	bl	8000b18 <__aeabi_dcmpgt>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d050      	beq.n	8005d00 <_dtoa_r+0x220>
 8005c5e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c62:	2300      	movs	r3, #0
 8005c64:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c68:	1b5d      	subs	r5, r3, r5
 8005c6a:	f1b5 0801 	subs.w	r8, r5, #1
 8005c6e:	bf49      	itett	mi
 8005c70:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c74:	2300      	movpl	r3, #0
 8005c76:	9305      	strmi	r3, [sp, #20]
 8005c78:	f04f 0800 	movmi.w	r8, #0
 8005c7c:	bf58      	it	pl
 8005c7e:	9305      	strpl	r3, [sp, #20]
 8005c80:	f1ba 0f00 	cmp.w	sl, #0
 8005c84:	db3e      	blt.n	8005d04 <_dtoa_r+0x224>
 8005c86:	2300      	movs	r3, #0
 8005c88:	44d0      	add	r8, sl
 8005c8a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005c8e:	9307      	str	r3, [sp, #28]
 8005c90:	9b06      	ldr	r3, [sp, #24]
 8005c92:	2b09      	cmp	r3, #9
 8005c94:	f200 8090 	bhi.w	8005db8 <_dtoa_r+0x2d8>
 8005c98:	2b05      	cmp	r3, #5
 8005c9a:	bfc4      	itt	gt
 8005c9c:	3b04      	subgt	r3, #4
 8005c9e:	9306      	strgt	r3, [sp, #24]
 8005ca0:	9b06      	ldr	r3, [sp, #24]
 8005ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ca6:	bfcc      	ite	gt
 8005ca8:	2500      	movgt	r5, #0
 8005caa:	2501      	movle	r5, #1
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	f200 808f 	bhi.w	8005dd0 <_dtoa_r+0x2f0>
 8005cb2:	e8df f003 	tbb	[pc, r3]
 8005cb6:	7f7d      	.short	0x7f7d
 8005cb8:	7131      	.short	0x7131
 8005cba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005cbe:	441d      	add	r5, r3
 8005cc0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005cc4:	2820      	cmp	r0, #32
 8005cc6:	dd13      	ble.n	8005cf0 <_dtoa_r+0x210>
 8005cc8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005ccc:	9b00      	ldr	r3, [sp, #0]
 8005cce:	fa08 f800 	lsl.w	r8, r8, r0
 8005cd2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005cd6:	fa23 f000 	lsr.w	r0, r3, r0
 8005cda:	ea48 0000 	orr.w	r0, r8, r0
 8005cde:	f7fa fc11 	bl	8000504 <__aeabi_ui2d>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4682      	mov	sl, r0
 8005ce6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005cea:	3d01      	subs	r5, #1
 8005cec:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cee:	e772      	b.n	8005bd6 <_dtoa_r+0xf6>
 8005cf0:	9b00      	ldr	r3, [sp, #0]
 8005cf2:	f1c0 0020 	rsb	r0, r0, #32
 8005cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8005cfa:	e7f0      	b.n	8005cde <_dtoa_r+0x1fe>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e7b1      	b.n	8005c64 <_dtoa_r+0x184>
 8005d00:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d02:	e7b0      	b.n	8005c66 <_dtoa_r+0x186>
 8005d04:	9b05      	ldr	r3, [sp, #20]
 8005d06:	eba3 030a 	sub.w	r3, r3, sl
 8005d0a:	9305      	str	r3, [sp, #20]
 8005d0c:	f1ca 0300 	rsb	r3, sl, #0
 8005d10:	9307      	str	r3, [sp, #28]
 8005d12:	2300      	movs	r3, #0
 8005d14:	930e      	str	r3, [sp, #56]	; 0x38
 8005d16:	e7bb      	b.n	8005c90 <_dtoa_r+0x1b0>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dd59      	ble.n	8005dd6 <_dtoa_r+0x2f6>
 8005d22:	9302      	str	r3, [sp, #8]
 8005d24:	4699      	mov	r9, r3
 8005d26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d28:	2200      	movs	r2, #0
 8005d2a:	6072      	str	r2, [r6, #4]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	f102 0014 	add.w	r0, r2, #20
 8005d32:	4298      	cmp	r0, r3
 8005d34:	6871      	ldr	r1, [r6, #4]
 8005d36:	d953      	bls.n	8005de0 <_dtoa_r+0x300>
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 fd74 	bl	8006826 <_Balloc>
 8005d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d40:	6030      	str	r0, [r6, #0]
 8005d42:	f1b9 0f0e 	cmp.w	r9, #14
 8005d46:	f8d3 b000 	ldr.w	fp, [r3]
 8005d4a:	f200 80e6 	bhi.w	8005f1a <_dtoa_r+0x43a>
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	f000 80e3 	beq.w	8005f1a <_dtoa_r+0x43a>
 8005d54:	ed9d 7b00 	vldr	d7, [sp]
 8005d58:	f1ba 0f00 	cmp.w	sl, #0
 8005d5c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005d60:	dd74      	ble.n	8005e4c <_dtoa_r+0x36c>
 8005d62:	4a2a      	ldr	r2, [pc, #168]	; (8005e0c <_dtoa_r+0x32c>)
 8005d64:	f00a 030f 	and.w	r3, sl, #15
 8005d68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d6c:	ed93 7b00 	vldr	d7, [r3]
 8005d70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005d74:	06f0      	lsls	r0, r6, #27
 8005d76:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005d7a:	d565      	bpl.n	8005e48 <_dtoa_r+0x368>
 8005d7c:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <_dtoa_r+0x330>)
 8005d7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d86:	f7fa fd61 	bl	800084c <__aeabi_ddiv>
 8005d8a:	e9cd 0100 	strd	r0, r1, [sp]
 8005d8e:	f006 060f 	and.w	r6, r6, #15
 8005d92:	2503      	movs	r5, #3
 8005d94:	4f1e      	ldr	r7, [pc, #120]	; (8005e10 <_dtoa_r+0x330>)
 8005d96:	e04c      	b.n	8005e32 <_dtoa_r+0x352>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d9e:	4453      	add	r3, sl
 8005da0:	f103 0901 	add.w	r9, r3, #1
 8005da4:	9302      	str	r3, [sp, #8]
 8005da6:	464b      	mov	r3, r9
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	bfb8      	it	lt
 8005dac:	2301      	movlt	r3, #1
 8005dae:	e7ba      	b.n	8005d26 <_dtoa_r+0x246>
 8005db0:	2300      	movs	r3, #0
 8005db2:	e7b2      	b.n	8005d1a <_dtoa_r+0x23a>
 8005db4:	2300      	movs	r3, #0
 8005db6:	e7f0      	b.n	8005d9a <_dtoa_r+0x2ba>
 8005db8:	2501      	movs	r5, #1
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9306      	str	r3, [sp, #24]
 8005dbe:	950a      	str	r5, [sp, #40]	; 0x28
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dc4:	9302      	str	r3, [sp, #8]
 8005dc6:	4699      	mov	r9, r3
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2312      	movs	r3, #18
 8005dcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8005dce:	e7aa      	b.n	8005d26 <_dtoa_r+0x246>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8005dd4:	e7f4      	b.n	8005dc0 <_dtoa_r+0x2e0>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	9302      	str	r3, [sp, #8]
 8005dda:	4699      	mov	r9, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	e7f5      	b.n	8005dcc <_dtoa_r+0x2ec>
 8005de0:	3101      	adds	r1, #1
 8005de2:	6071      	str	r1, [r6, #4]
 8005de4:	0052      	lsls	r2, r2, #1
 8005de6:	e7a2      	b.n	8005d2e <_dtoa_r+0x24e>
 8005de8:	636f4361 	.word	0x636f4361
 8005dec:	3fd287a7 	.word	0x3fd287a7
 8005df0:	8b60c8b3 	.word	0x8b60c8b3
 8005df4:	3fc68a28 	.word	0x3fc68a28
 8005df8:	509f79fb 	.word	0x509f79fb
 8005dfc:	3fd34413 	.word	0x3fd34413
 8005e00:	7ff00000 	.word	0x7ff00000
 8005e04:	08007cfd 	.word	0x08007cfd
 8005e08:	3ff80000 	.word	0x3ff80000
 8005e0c:	08007db8 	.word	0x08007db8
 8005e10:	08007d90 	.word	0x08007d90
 8005e14:	08007d29 	.word	0x08007d29
 8005e18:	07f1      	lsls	r1, r6, #31
 8005e1a:	d508      	bpl.n	8005e2e <_dtoa_r+0x34e>
 8005e1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e24:	f7fa fbe8 	bl	80005f8 <__aeabi_dmul>
 8005e28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e2c:	3501      	adds	r5, #1
 8005e2e:	1076      	asrs	r6, r6, #1
 8005e30:	3708      	adds	r7, #8
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	d1f0      	bne.n	8005e18 <_dtoa_r+0x338>
 8005e36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e3e:	f7fa fd05 	bl	800084c <__aeabi_ddiv>
 8005e42:	e9cd 0100 	strd	r0, r1, [sp]
 8005e46:	e01a      	b.n	8005e7e <_dtoa_r+0x39e>
 8005e48:	2502      	movs	r5, #2
 8005e4a:	e7a3      	b.n	8005d94 <_dtoa_r+0x2b4>
 8005e4c:	f000 80a0 	beq.w	8005f90 <_dtoa_r+0x4b0>
 8005e50:	f1ca 0600 	rsb	r6, sl, #0
 8005e54:	4b9f      	ldr	r3, [pc, #636]	; (80060d4 <_dtoa_r+0x5f4>)
 8005e56:	4fa0      	ldr	r7, [pc, #640]	; (80060d8 <_dtoa_r+0x5f8>)
 8005e58:	f006 020f 	and.w	r2, r6, #15
 8005e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e68:	f7fa fbc6 	bl	80005f8 <__aeabi_dmul>
 8005e6c:	e9cd 0100 	strd	r0, r1, [sp]
 8005e70:	1136      	asrs	r6, r6, #4
 8005e72:	2300      	movs	r3, #0
 8005e74:	2502      	movs	r5, #2
 8005e76:	2e00      	cmp	r6, #0
 8005e78:	d17f      	bne.n	8005f7a <_dtoa_r+0x49a>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e1      	bne.n	8005e42 <_dtoa_r+0x362>
 8005e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8087 	beq.w	8005f94 <_dtoa_r+0x4b4>
 8005e86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	4b93      	ldr	r3, [pc, #588]	; (80060dc <_dtoa_r+0x5fc>)
 8005e8e:	4630      	mov	r0, r6
 8005e90:	4639      	mov	r1, r7
 8005e92:	f7fa fe23 	bl	8000adc <__aeabi_dcmplt>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d07c      	beq.n	8005f94 <_dtoa_r+0x4b4>
 8005e9a:	f1b9 0f00 	cmp.w	r9, #0
 8005e9e:	d079      	beq.n	8005f94 <_dtoa_r+0x4b4>
 8005ea0:	9b02      	ldr	r3, [sp, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dd35      	ble.n	8005f12 <_dtoa_r+0x432>
 8005ea6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005eaa:	9308      	str	r3, [sp, #32]
 8005eac:	4639      	mov	r1, r7
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4b8b      	ldr	r3, [pc, #556]	; (80060e0 <_dtoa_r+0x600>)
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f7fa fba0 	bl	80005f8 <__aeabi_dmul>
 8005eb8:	e9cd 0100 	strd	r0, r1, [sp]
 8005ebc:	9f02      	ldr	r7, [sp, #8]
 8005ebe:	3501      	adds	r5, #1
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f7fa fb2f 	bl	8000524 <__aeabi_i2d>
 8005ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eca:	f7fa fb95 	bl	80005f8 <__aeabi_dmul>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4b84      	ldr	r3, [pc, #528]	; (80060e4 <_dtoa_r+0x604>)
 8005ed2:	f7fa f9db 	bl	800028c <__adddf3>
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005edc:	2f00      	cmp	r7, #0
 8005ede:	d15d      	bne.n	8005f9c <_dtoa_r+0x4bc>
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4b81      	ldr	r3, [pc, #516]	; (80060e8 <_dtoa_r+0x608>)
 8005ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ee8:	f7fa f9ce 	bl	8000288 <__aeabi_dsub>
 8005eec:	462a      	mov	r2, r5
 8005eee:	4633      	mov	r3, r6
 8005ef0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ef4:	f7fa fe10 	bl	8000b18 <__aeabi_dcmpgt>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	f040 8288 	bne.w	800640e <_dtoa_r+0x92e>
 8005efe:	462a      	mov	r2, r5
 8005f00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f08:	f7fa fde8 	bl	8000adc <__aeabi_dcmplt>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	f040 827c 	bne.w	800640a <_dtoa_r+0x92a>
 8005f12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f16:	e9cd 2300 	strd	r2, r3, [sp]
 8005f1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f2c0 8150 	blt.w	80061c2 <_dtoa_r+0x6e2>
 8005f22:	f1ba 0f0e 	cmp.w	sl, #14
 8005f26:	f300 814c 	bgt.w	80061c2 <_dtoa_r+0x6e2>
 8005f2a:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <_dtoa_r+0x5f4>)
 8005f2c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f30:	ed93 7b00 	vldr	d7, [r3]
 8005f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f3c:	f280 80d8 	bge.w	80060f0 <_dtoa_r+0x610>
 8005f40:	f1b9 0f00 	cmp.w	r9, #0
 8005f44:	f300 80d4 	bgt.w	80060f0 <_dtoa_r+0x610>
 8005f48:	f040 825e 	bne.w	8006408 <_dtoa_r+0x928>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4b66      	ldr	r3, [pc, #408]	; (80060e8 <_dtoa_r+0x608>)
 8005f50:	ec51 0b17 	vmov	r0, r1, d7
 8005f54:	f7fa fb50 	bl	80005f8 <__aeabi_dmul>
 8005f58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f5c:	f7fa fdd2 	bl	8000b04 <__aeabi_dcmpge>
 8005f60:	464f      	mov	r7, r9
 8005f62:	464e      	mov	r6, r9
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f040 8234 	bne.w	80063d2 <_dtoa_r+0x8f2>
 8005f6a:	2331      	movs	r3, #49	; 0x31
 8005f6c:	f10b 0501 	add.w	r5, fp, #1
 8005f70:	f88b 3000 	strb.w	r3, [fp]
 8005f74:	f10a 0a01 	add.w	sl, sl, #1
 8005f78:	e22f      	b.n	80063da <_dtoa_r+0x8fa>
 8005f7a:	07f2      	lsls	r2, r6, #31
 8005f7c:	d505      	bpl.n	8005f8a <_dtoa_r+0x4aa>
 8005f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f82:	f7fa fb39 	bl	80005f8 <__aeabi_dmul>
 8005f86:	3501      	adds	r5, #1
 8005f88:	2301      	movs	r3, #1
 8005f8a:	1076      	asrs	r6, r6, #1
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	e772      	b.n	8005e76 <_dtoa_r+0x396>
 8005f90:	2502      	movs	r5, #2
 8005f92:	e774      	b.n	8005e7e <_dtoa_r+0x39e>
 8005f94:	f8cd a020 	str.w	sl, [sp, #32]
 8005f98:	464f      	mov	r7, r9
 8005f9a:	e791      	b.n	8005ec0 <_dtoa_r+0x3e0>
 8005f9c:	4b4d      	ldr	r3, [pc, #308]	; (80060d4 <_dtoa_r+0x5f4>)
 8005f9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fa2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d047      	beq.n	800603c <_dtoa_r+0x55c>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	494e      	ldr	r1, [pc, #312]	; (80060ec <_dtoa_r+0x60c>)
 8005fb4:	f7fa fc4a 	bl	800084c <__aeabi_ddiv>
 8005fb8:	462a      	mov	r2, r5
 8005fba:	4633      	mov	r3, r6
 8005fbc:	f7fa f964 	bl	8000288 <__aeabi_dsub>
 8005fc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005fc4:	465d      	mov	r5, fp
 8005fc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fca:	f7fa fdc5 	bl	8000b58 <__aeabi_d2iz>
 8005fce:	4606      	mov	r6, r0
 8005fd0:	f7fa faa8 	bl	8000524 <__aeabi_i2d>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fdc:	f7fa f954 	bl	8000288 <__aeabi_dsub>
 8005fe0:	3630      	adds	r6, #48	; 0x30
 8005fe2:	f805 6b01 	strb.w	r6, [r5], #1
 8005fe6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005fea:	e9cd 0100 	strd	r0, r1, [sp]
 8005fee:	f7fa fd75 	bl	8000adc <__aeabi_dcmplt>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d163      	bne.n	80060be <_dtoa_r+0x5de>
 8005ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	4937      	ldr	r1, [pc, #220]	; (80060dc <_dtoa_r+0x5fc>)
 8005ffe:	f7fa f943 	bl	8000288 <__aeabi_dsub>
 8006002:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006006:	f7fa fd69 	bl	8000adc <__aeabi_dcmplt>
 800600a:	2800      	cmp	r0, #0
 800600c:	f040 80b7 	bne.w	800617e <_dtoa_r+0x69e>
 8006010:	eba5 030b 	sub.w	r3, r5, fp
 8006014:	429f      	cmp	r7, r3
 8006016:	f77f af7c 	ble.w	8005f12 <_dtoa_r+0x432>
 800601a:	2200      	movs	r2, #0
 800601c:	4b30      	ldr	r3, [pc, #192]	; (80060e0 <_dtoa_r+0x600>)
 800601e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006022:	f7fa fae9 	bl	80005f8 <__aeabi_dmul>
 8006026:	2200      	movs	r2, #0
 8006028:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800602c:	4b2c      	ldr	r3, [pc, #176]	; (80060e0 <_dtoa_r+0x600>)
 800602e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006032:	f7fa fae1 	bl	80005f8 <__aeabi_dmul>
 8006036:	e9cd 0100 	strd	r0, r1, [sp]
 800603a:	e7c4      	b.n	8005fc6 <_dtoa_r+0x4e6>
 800603c:	462a      	mov	r2, r5
 800603e:	4633      	mov	r3, r6
 8006040:	f7fa fada 	bl	80005f8 <__aeabi_dmul>
 8006044:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006048:	eb0b 0507 	add.w	r5, fp, r7
 800604c:	465e      	mov	r6, fp
 800604e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006052:	f7fa fd81 	bl	8000b58 <__aeabi_d2iz>
 8006056:	4607      	mov	r7, r0
 8006058:	f7fa fa64 	bl	8000524 <__aeabi_i2d>
 800605c:	3730      	adds	r7, #48	; 0x30
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006066:	f7fa f90f 	bl	8000288 <__aeabi_dsub>
 800606a:	f806 7b01 	strb.w	r7, [r6], #1
 800606e:	42ae      	cmp	r6, r5
 8006070:	e9cd 0100 	strd	r0, r1, [sp]
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	d126      	bne.n	80060c8 <_dtoa_r+0x5e8>
 800607a:	4b1c      	ldr	r3, [pc, #112]	; (80060ec <_dtoa_r+0x60c>)
 800607c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006080:	f7fa f904 	bl	800028c <__adddf3>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800608c:	f7fa fd44 	bl	8000b18 <__aeabi_dcmpgt>
 8006090:	2800      	cmp	r0, #0
 8006092:	d174      	bne.n	800617e <_dtoa_r+0x69e>
 8006094:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006098:	2000      	movs	r0, #0
 800609a:	4914      	ldr	r1, [pc, #80]	; (80060ec <_dtoa_r+0x60c>)
 800609c:	f7fa f8f4 	bl	8000288 <__aeabi_dsub>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060a8:	f7fa fd18 	bl	8000adc <__aeabi_dcmplt>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	f43f af30 	beq.w	8005f12 <_dtoa_r+0x432>
 80060b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060b6:	2b30      	cmp	r3, #48	; 0x30
 80060b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80060bc:	d002      	beq.n	80060c4 <_dtoa_r+0x5e4>
 80060be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80060c2:	e04a      	b.n	800615a <_dtoa_r+0x67a>
 80060c4:	4615      	mov	r5, r2
 80060c6:	e7f4      	b.n	80060b2 <_dtoa_r+0x5d2>
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <_dtoa_r+0x600>)
 80060ca:	f7fa fa95 	bl	80005f8 <__aeabi_dmul>
 80060ce:	e9cd 0100 	strd	r0, r1, [sp]
 80060d2:	e7bc      	b.n	800604e <_dtoa_r+0x56e>
 80060d4:	08007db8 	.word	0x08007db8
 80060d8:	08007d90 	.word	0x08007d90
 80060dc:	3ff00000 	.word	0x3ff00000
 80060e0:	40240000 	.word	0x40240000
 80060e4:	401c0000 	.word	0x401c0000
 80060e8:	40140000 	.word	0x40140000
 80060ec:	3fe00000 	.word	0x3fe00000
 80060f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80060f4:	465d      	mov	r5, fp
 80060f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060fa:	4630      	mov	r0, r6
 80060fc:	4639      	mov	r1, r7
 80060fe:	f7fa fba5 	bl	800084c <__aeabi_ddiv>
 8006102:	f7fa fd29 	bl	8000b58 <__aeabi_d2iz>
 8006106:	4680      	mov	r8, r0
 8006108:	f7fa fa0c 	bl	8000524 <__aeabi_i2d>
 800610c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006110:	f7fa fa72 	bl	80005f8 <__aeabi_dmul>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4630      	mov	r0, r6
 800611a:	4639      	mov	r1, r7
 800611c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006120:	f7fa f8b2 	bl	8000288 <__aeabi_dsub>
 8006124:	f805 6b01 	strb.w	r6, [r5], #1
 8006128:	eba5 060b 	sub.w	r6, r5, fp
 800612c:	45b1      	cmp	r9, r6
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	d139      	bne.n	80061a8 <_dtoa_r+0x6c8>
 8006134:	f7fa f8aa 	bl	800028c <__adddf3>
 8006138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800613c:	4606      	mov	r6, r0
 800613e:	460f      	mov	r7, r1
 8006140:	f7fa fcea 	bl	8000b18 <__aeabi_dcmpgt>
 8006144:	b9c8      	cbnz	r0, 800617a <_dtoa_r+0x69a>
 8006146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800614a:	4630      	mov	r0, r6
 800614c:	4639      	mov	r1, r7
 800614e:	f7fa fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006152:	b110      	cbz	r0, 800615a <_dtoa_r+0x67a>
 8006154:	f018 0f01 	tst.w	r8, #1
 8006158:	d10f      	bne.n	800617a <_dtoa_r+0x69a>
 800615a:	9904      	ldr	r1, [sp, #16]
 800615c:	4620      	mov	r0, r4
 800615e:	f000 fb96 	bl	800688e <_Bfree>
 8006162:	2300      	movs	r3, #0
 8006164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006166:	702b      	strb	r3, [r5, #0]
 8006168:	f10a 0301 	add.w	r3, sl, #1
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8241 	beq.w	80065f8 <_dtoa_r+0xb18>
 8006176:	601d      	str	r5, [r3, #0]
 8006178:	e23e      	b.n	80065f8 <_dtoa_r+0xb18>
 800617a:	f8cd a020 	str.w	sl, [sp, #32]
 800617e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006182:	2a39      	cmp	r2, #57	; 0x39
 8006184:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006188:	d108      	bne.n	800619c <_dtoa_r+0x6bc>
 800618a:	459b      	cmp	fp, r3
 800618c:	d10a      	bne.n	80061a4 <_dtoa_r+0x6c4>
 800618e:	9b08      	ldr	r3, [sp, #32]
 8006190:	3301      	adds	r3, #1
 8006192:	9308      	str	r3, [sp, #32]
 8006194:	2330      	movs	r3, #48	; 0x30
 8006196:	f88b 3000 	strb.w	r3, [fp]
 800619a:	465b      	mov	r3, fp
 800619c:	781a      	ldrb	r2, [r3, #0]
 800619e:	3201      	adds	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e78c      	b.n	80060be <_dtoa_r+0x5de>
 80061a4:	461d      	mov	r5, r3
 80061a6:	e7ea      	b.n	800617e <_dtoa_r+0x69e>
 80061a8:	2200      	movs	r2, #0
 80061aa:	4b9b      	ldr	r3, [pc, #620]	; (8006418 <_dtoa_r+0x938>)
 80061ac:	f7fa fa24 	bl	80005f8 <__aeabi_dmul>
 80061b0:	2200      	movs	r2, #0
 80061b2:	2300      	movs	r3, #0
 80061b4:	4606      	mov	r6, r0
 80061b6:	460f      	mov	r7, r1
 80061b8:	f7fa fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 80061bc:	2800      	cmp	r0, #0
 80061be:	d09a      	beq.n	80060f6 <_dtoa_r+0x616>
 80061c0:	e7cb      	b.n	800615a <_dtoa_r+0x67a>
 80061c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061c4:	2a00      	cmp	r2, #0
 80061c6:	f000 808b 	beq.w	80062e0 <_dtoa_r+0x800>
 80061ca:	9a06      	ldr	r2, [sp, #24]
 80061cc:	2a01      	cmp	r2, #1
 80061ce:	dc6e      	bgt.n	80062ae <_dtoa_r+0x7ce>
 80061d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d067      	beq.n	80062a6 <_dtoa_r+0x7c6>
 80061d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061da:	9f07      	ldr	r7, [sp, #28]
 80061dc:	9d05      	ldr	r5, [sp, #20]
 80061de:	9a05      	ldr	r2, [sp, #20]
 80061e0:	2101      	movs	r1, #1
 80061e2:	441a      	add	r2, r3
 80061e4:	4620      	mov	r0, r4
 80061e6:	9205      	str	r2, [sp, #20]
 80061e8:	4498      	add	r8, r3
 80061ea:	f000 fbf0 	bl	80069ce <__i2b>
 80061ee:	4606      	mov	r6, r0
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	dd0c      	ble.n	800620e <_dtoa_r+0x72e>
 80061f4:	f1b8 0f00 	cmp.w	r8, #0
 80061f8:	dd09      	ble.n	800620e <_dtoa_r+0x72e>
 80061fa:	4545      	cmp	r5, r8
 80061fc:	9a05      	ldr	r2, [sp, #20]
 80061fe:	462b      	mov	r3, r5
 8006200:	bfa8      	it	ge
 8006202:	4643      	movge	r3, r8
 8006204:	1ad2      	subs	r2, r2, r3
 8006206:	9205      	str	r2, [sp, #20]
 8006208:	1aed      	subs	r5, r5, r3
 800620a:	eba8 0803 	sub.w	r8, r8, r3
 800620e:	9b07      	ldr	r3, [sp, #28]
 8006210:	b1eb      	cbz	r3, 800624e <_dtoa_r+0x76e>
 8006212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006214:	2b00      	cmp	r3, #0
 8006216:	d067      	beq.n	80062e8 <_dtoa_r+0x808>
 8006218:	b18f      	cbz	r7, 800623e <_dtoa_r+0x75e>
 800621a:	4631      	mov	r1, r6
 800621c:	463a      	mov	r2, r7
 800621e:	4620      	mov	r0, r4
 8006220:	f000 fc74 	bl	8006b0c <__pow5mult>
 8006224:	9a04      	ldr	r2, [sp, #16]
 8006226:	4601      	mov	r1, r0
 8006228:	4606      	mov	r6, r0
 800622a:	4620      	mov	r0, r4
 800622c:	f000 fbd8 	bl	80069e0 <__multiply>
 8006230:	9904      	ldr	r1, [sp, #16]
 8006232:	9008      	str	r0, [sp, #32]
 8006234:	4620      	mov	r0, r4
 8006236:	f000 fb2a 	bl	800688e <_Bfree>
 800623a:	9b08      	ldr	r3, [sp, #32]
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	9b07      	ldr	r3, [sp, #28]
 8006240:	1bda      	subs	r2, r3, r7
 8006242:	d004      	beq.n	800624e <_dtoa_r+0x76e>
 8006244:	9904      	ldr	r1, [sp, #16]
 8006246:	4620      	mov	r0, r4
 8006248:	f000 fc60 	bl	8006b0c <__pow5mult>
 800624c:	9004      	str	r0, [sp, #16]
 800624e:	2101      	movs	r1, #1
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fbbc 	bl	80069ce <__i2b>
 8006256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006258:	4607      	mov	r7, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 81d0 	beq.w	8006600 <_dtoa_r+0xb20>
 8006260:	461a      	mov	r2, r3
 8006262:	4601      	mov	r1, r0
 8006264:	4620      	mov	r0, r4
 8006266:	f000 fc51 	bl	8006b0c <__pow5mult>
 800626a:	9b06      	ldr	r3, [sp, #24]
 800626c:	2b01      	cmp	r3, #1
 800626e:	4607      	mov	r7, r0
 8006270:	dc40      	bgt.n	80062f4 <_dtoa_r+0x814>
 8006272:	9b00      	ldr	r3, [sp, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d139      	bne.n	80062ec <_dtoa_r+0x80c>
 8006278:	9b01      	ldr	r3, [sp, #4]
 800627a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800627e:	2b00      	cmp	r3, #0
 8006280:	d136      	bne.n	80062f0 <_dtoa_r+0x810>
 8006282:	9b01      	ldr	r3, [sp, #4]
 8006284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006288:	0d1b      	lsrs	r3, r3, #20
 800628a:	051b      	lsls	r3, r3, #20
 800628c:	b12b      	cbz	r3, 800629a <_dtoa_r+0x7ba>
 800628e:	9b05      	ldr	r3, [sp, #20]
 8006290:	3301      	adds	r3, #1
 8006292:	9305      	str	r3, [sp, #20]
 8006294:	f108 0801 	add.w	r8, r8, #1
 8006298:	2301      	movs	r3, #1
 800629a:	9307      	str	r3, [sp, #28]
 800629c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d12a      	bne.n	80062f8 <_dtoa_r+0x818>
 80062a2:	2001      	movs	r0, #1
 80062a4:	e030      	b.n	8006308 <_dtoa_r+0x828>
 80062a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062ac:	e795      	b.n	80061da <_dtoa_r+0x6fa>
 80062ae:	9b07      	ldr	r3, [sp, #28]
 80062b0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80062b4:	42bb      	cmp	r3, r7
 80062b6:	bfbf      	itttt	lt
 80062b8:	9b07      	ldrlt	r3, [sp, #28]
 80062ba:	9707      	strlt	r7, [sp, #28]
 80062bc:	1afa      	sublt	r2, r7, r3
 80062be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80062c0:	bfbb      	ittet	lt
 80062c2:	189b      	addlt	r3, r3, r2
 80062c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80062c6:	1bdf      	subge	r7, r3, r7
 80062c8:	2700      	movlt	r7, #0
 80062ca:	f1b9 0f00 	cmp.w	r9, #0
 80062ce:	bfb5      	itete	lt
 80062d0:	9b05      	ldrlt	r3, [sp, #20]
 80062d2:	9d05      	ldrge	r5, [sp, #20]
 80062d4:	eba3 0509 	sublt.w	r5, r3, r9
 80062d8:	464b      	movge	r3, r9
 80062da:	bfb8      	it	lt
 80062dc:	2300      	movlt	r3, #0
 80062de:	e77e      	b.n	80061de <_dtoa_r+0x6fe>
 80062e0:	9f07      	ldr	r7, [sp, #28]
 80062e2:	9d05      	ldr	r5, [sp, #20]
 80062e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80062e6:	e783      	b.n	80061f0 <_dtoa_r+0x710>
 80062e8:	9a07      	ldr	r2, [sp, #28]
 80062ea:	e7ab      	b.n	8006244 <_dtoa_r+0x764>
 80062ec:	2300      	movs	r3, #0
 80062ee:	e7d4      	b.n	800629a <_dtoa_r+0x7ba>
 80062f0:	9b00      	ldr	r3, [sp, #0]
 80062f2:	e7d2      	b.n	800629a <_dtoa_r+0x7ba>
 80062f4:	2300      	movs	r3, #0
 80062f6:	9307      	str	r3, [sp, #28]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80062fe:	6918      	ldr	r0, [r3, #16]
 8006300:	f000 fb17 	bl	8006932 <__hi0bits>
 8006304:	f1c0 0020 	rsb	r0, r0, #32
 8006308:	4440      	add	r0, r8
 800630a:	f010 001f 	ands.w	r0, r0, #31
 800630e:	d047      	beq.n	80063a0 <_dtoa_r+0x8c0>
 8006310:	f1c0 0320 	rsb	r3, r0, #32
 8006314:	2b04      	cmp	r3, #4
 8006316:	dd3b      	ble.n	8006390 <_dtoa_r+0x8b0>
 8006318:	9b05      	ldr	r3, [sp, #20]
 800631a:	f1c0 001c 	rsb	r0, r0, #28
 800631e:	4403      	add	r3, r0
 8006320:	9305      	str	r3, [sp, #20]
 8006322:	4405      	add	r5, r0
 8006324:	4480      	add	r8, r0
 8006326:	9b05      	ldr	r3, [sp, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	dd05      	ble.n	8006338 <_dtoa_r+0x858>
 800632c:	461a      	mov	r2, r3
 800632e:	9904      	ldr	r1, [sp, #16]
 8006330:	4620      	mov	r0, r4
 8006332:	f000 fc39 	bl	8006ba8 <__lshift>
 8006336:	9004      	str	r0, [sp, #16]
 8006338:	f1b8 0f00 	cmp.w	r8, #0
 800633c:	dd05      	ble.n	800634a <_dtoa_r+0x86a>
 800633e:	4639      	mov	r1, r7
 8006340:	4642      	mov	r2, r8
 8006342:	4620      	mov	r0, r4
 8006344:	f000 fc30 	bl	8006ba8 <__lshift>
 8006348:	4607      	mov	r7, r0
 800634a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800634c:	b353      	cbz	r3, 80063a4 <_dtoa_r+0x8c4>
 800634e:	4639      	mov	r1, r7
 8006350:	9804      	ldr	r0, [sp, #16]
 8006352:	f000 fc7d 	bl	8006c50 <__mcmp>
 8006356:	2800      	cmp	r0, #0
 8006358:	da24      	bge.n	80063a4 <_dtoa_r+0x8c4>
 800635a:	2300      	movs	r3, #0
 800635c:	220a      	movs	r2, #10
 800635e:	9904      	ldr	r1, [sp, #16]
 8006360:	4620      	mov	r0, r4
 8006362:	f000 faab 	bl	80068bc <__multadd>
 8006366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006368:	9004      	str	r0, [sp, #16]
 800636a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 814d 	beq.w	800660e <_dtoa_r+0xb2e>
 8006374:	2300      	movs	r3, #0
 8006376:	4631      	mov	r1, r6
 8006378:	220a      	movs	r2, #10
 800637a:	4620      	mov	r0, r4
 800637c:	f000 fa9e 	bl	80068bc <__multadd>
 8006380:	9b02      	ldr	r3, [sp, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	4606      	mov	r6, r0
 8006386:	dc4f      	bgt.n	8006428 <_dtoa_r+0x948>
 8006388:	9b06      	ldr	r3, [sp, #24]
 800638a:	2b02      	cmp	r3, #2
 800638c:	dd4c      	ble.n	8006428 <_dtoa_r+0x948>
 800638e:	e011      	b.n	80063b4 <_dtoa_r+0x8d4>
 8006390:	d0c9      	beq.n	8006326 <_dtoa_r+0x846>
 8006392:	9a05      	ldr	r2, [sp, #20]
 8006394:	331c      	adds	r3, #28
 8006396:	441a      	add	r2, r3
 8006398:	9205      	str	r2, [sp, #20]
 800639a:	441d      	add	r5, r3
 800639c:	4498      	add	r8, r3
 800639e:	e7c2      	b.n	8006326 <_dtoa_r+0x846>
 80063a0:	4603      	mov	r3, r0
 80063a2:	e7f6      	b.n	8006392 <_dtoa_r+0x8b2>
 80063a4:	f1b9 0f00 	cmp.w	r9, #0
 80063a8:	dc38      	bgt.n	800641c <_dtoa_r+0x93c>
 80063aa:	9b06      	ldr	r3, [sp, #24]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	dd35      	ble.n	800641c <_dtoa_r+0x93c>
 80063b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80063b4:	9b02      	ldr	r3, [sp, #8]
 80063b6:	b963      	cbnz	r3, 80063d2 <_dtoa_r+0x8f2>
 80063b8:	4639      	mov	r1, r7
 80063ba:	2205      	movs	r2, #5
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 fa7d 	bl	80068bc <__multadd>
 80063c2:	4601      	mov	r1, r0
 80063c4:	4607      	mov	r7, r0
 80063c6:	9804      	ldr	r0, [sp, #16]
 80063c8:	f000 fc42 	bl	8006c50 <__mcmp>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	f73f adcc 	bgt.w	8005f6a <_dtoa_r+0x48a>
 80063d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d4:	465d      	mov	r5, fp
 80063d6:	ea6f 0a03 	mvn.w	sl, r3
 80063da:	f04f 0900 	mov.w	r9, #0
 80063de:	4639      	mov	r1, r7
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 fa54 	bl	800688e <_Bfree>
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	f43f aeb7 	beq.w	800615a <_dtoa_r+0x67a>
 80063ec:	f1b9 0f00 	cmp.w	r9, #0
 80063f0:	d005      	beq.n	80063fe <_dtoa_r+0x91e>
 80063f2:	45b1      	cmp	r9, r6
 80063f4:	d003      	beq.n	80063fe <_dtoa_r+0x91e>
 80063f6:	4649      	mov	r1, r9
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 fa48 	bl	800688e <_Bfree>
 80063fe:	4631      	mov	r1, r6
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fa44 	bl	800688e <_Bfree>
 8006406:	e6a8      	b.n	800615a <_dtoa_r+0x67a>
 8006408:	2700      	movs	r7, #0
 800640a:	463e      	mov	r6, r7
 800640c:	e7e1      	b.n	80063d2 <_dtoa_r+0x8f2>
 800640e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006412:	463e      	mov	r6, r7
 8006414:	e5a9      	b.n	8005f6a <_dtoa_r+0x48a>
 8006416:	bf00      	nop
 8006418:	40240000 	.word	0x40240000
 800641c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800641e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 80fa 	beq.w	800661c <_dtoa_r+0xb3c>
 8006428:	2d00      	cmp	r5, #0
 800642a:	dd05      	ble.n	8006438 <_dtoa_r+0x958>
 800642c:	4631      	mov	r1, r6
 800642e:	462a      	mov	r2, r5
 8006430:	4620      	mov	r0, r4
 8006432:	f000 fbb9 	bl	8006ba8 <__lshift>
 8006436:	4606      	mov	r6, r0
 8006438:	9b07      	ldr	r3, [sp, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d04c      	beq.n	80064d8 <_dtoa_r+0x9f8>
 800643e:	6871      	ldr	r1, [r6, #4]
 8006440:	4620      	mov	r0, r4
 8006442:	f000 f9f0 	bl	8006826 <_Balloc>
 8006446:	6932      	ldr	r2, [r6, #16]
 8006448:	3202      	adds	r2, #2
 800644a:	4605      	mov	r5, r0
 800644c:	0092      	lsls	r2, r2, #2
 800644e:	f106 010c 	add.w	r1, r6, #12
 8006452:	300c      	adds	r0, #12
 8006454:	f000 f9dc 	bl	8006810 <memcpy>
 8006458:	2201      	movs	r2, #1
 800645a:	4629      	mov	r1, r5
 800645c:	4620      	mov	r0, r4
 800645e:	f000 fba3 	bl	8006ba8 <__lshift>
 8006462:	9b00      	ldr	r3, [sp, #0]
 8006464:	f8cd b014 	str.w	fp, [sp, #20]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	46b1      	mov	r9, r6
 800646e:	9307      	str	r3, [sp, #28]
 8006470:	4606      	mov	r6, r0
 8006472:	4639      	mov	r1, r7
 8006474:	9804      	ldr	r0, [sp, #16]
 8006476:	f7ff faa7 	bl	80059c8 <quorem>
 800647a:	4649      	mov	r1, r9
 800647c:	4605      	mov	r5, r0
 800647e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006482:	9804      	ldr	r0, [sp, #16]
 8006484:	f000 fbe4 	bl	8006c50 <__mcmp>
 8006488:	4632      	mov	r2, r6
 800648a:	9000      	str	r0, [sp, #0]
 800648c:	4639      	mov	r1, r7
 800648e:	4620      	mov	r0, r4
 8006490:	f000 fbf8 	bl	8006c84 <__mdiff>
 8006494:	68c3      	ldr	r3, [r0, #12]
 8006496:	4602      	mov	r2, r0
 8006498:	bb03      	cbnz	r3, 80064dc <_dtoa_r+0x9fc>
 800649a:	4601      	mov	r1, r0
 800649c:	9008      	str	r0, [sp, #32]
 800649e:	9804      	ldr	r0, [sp, #16]
 80064a0:	f000 fbd6 	bl	8006c50 <__mcmp>
 80064a4:	9a08      	ldr	r2, [sp, #32]
 80064a6:	4603      	mov	r3, r0
 80064a8:	4611      	mov	r1, r2
 80064aa:	4620      	mov	r0, r4
 80064ac:	9308      	str	r3, [sp, #32]
 80064ae:	f000 f9ee 	bl	800688e <_Bfree>
 80064b2:	9b08      	ldr	r3, [sp, #32]
 80064b4:	b9a3      	cbnz	r3, 80064e0 <_dtoa_r+0xa00>
 80064b6:	9a06      	ldr	r2, [sp, #24]
 80064b8:	b992      	cbnz	r2, 80064e0 <_dtoa_r+0xa00>
 80064ba:	9a07      	ldr	r2, [sp, #28]
 80064bc:	b982      	cbnz	r2, 80064e0 <_dtoa_r+0xa00>
 80064be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80064c2:	d029      	beq.n	8006518 <_dtoa_r+0xa38>
 80064c4:	9b00      	ldr	r3, [sp, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	dd01      	ble.n	80064ce <_dtoa_r+0x9ee>
 80064ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80064ce:	9b05      	ldr	r3, [sp, #20]
 80064d0:	1c5d      	adds	r5, r3, #1
 80064d2:	f883 8000 	strb.w	r8, [r3]
 80064d6:	e782      	b.n	80063de <_dtoa_r+0x8fe>
 80064d8:	4630      	mov	r0, r6
 80064da:	e7c2      	b.n	8006462 <_dtoa_r+0x982>
 80064dc:	2301      	movs	r3, #1
 80064de:	e7e3      	b.n	80064a8 <_dtoa_r+0x9c8>
 80064e0:	9a00      	ldr	r2, [sp, #0]
 80064e2:	2a00      	cmp	r2, #0
 80064e4:	db04      	blt.n	80064f0 <_dtoa_r+0xa10>
 80064e6:	d125      	bne.n	8006534 <_dtoa_r+0xa54>
 80064e8:	9a06      	ldr	r2, [sp, #24]
 80064ea:	bb1a      	cbnz	r2, 8006534 <_dtoa_r+0xa54>
 80064ec:	9a07      	ldr	r2, [sp, #28]
 80064ee:	bb0a      	cbnz	r2, 8006534 <_dtoa_r+0xa54>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	ddec      	ble.n	80064ce <_dtoa_r+0x9ee>
 80064f4:	2201      	movs	r2, #1
 80064f6:	9904      	ldr	r1, [sp, #16]
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fb55 	bl	8006ba8 <__lshift>
 80064fe:	4639      	mov	r1, r7
 8006500:	9004      	str	r0, [sp, #16]
 8006502:	f000 fba5 	bl	8006c50 <__mcmp>
 8006506:	2800      	cmp	r0, #0
 8006508:	dc03      	bgt.n	8006512 <_dtoa_r+0xa32>
 800650a:	d1e0      	bne.n	80064ce <_dtoa_r+0x9ee>
 800650c:	f018 0f01 	tst.w	r8, #1
 8006510:	d0dd      	beq.n	80064ce <_dtoa_r+0x9ee>
 8006512:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006516:	d1d8      	bne.n	80064ca <_dtoa_r+0x9ea>
 8006518:	9b05      	ldr	r3, [sp, #20]
 800651a:	9a05      	ldr	r2, [sp, #20]
 800651c:	1c5d      	adds	r5, r3, #1
 800651e:	2339      	movs	r3, #57	; 0x39
 8006520:	7013      	strb	r3, [r2, #0]
 8006522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006526:	2b39      	cmp	r3, #57	; 0x39
 8006528:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800652c:	d04f      	beq.n	80065ce <_dtoa_r+0xaee>
 800652e:	3301      	adds	r3, #1
 8006530:	7013      	strb	r3, [r2, #0]
 8006532:	e754      	b.n	80063de <_dtoa_r+0x8fe>
 8006534:	9a05      	ldr	r2, [sp, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f102 0501 	add.w	r5, r2, #1
 800653c:	dd06      	ble.n	800654c <_dtoa_r+0xa6c>
 800653e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006542:	d0e9      	beq.n	8006518 <_dtoa_r+0xa38>
 8006544:	f108 0801 	add.w	r8, r8, #1
 8006548:	9b05      	ldr	r3, [sp, #20]
 800654a:	e7c2      	b.n	80064d2 <_dtoa_r+0x9f2>
 800654c:	9a02      	ldr	r2, [sp, #8]
 800654e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006552:	eba5 030b 	sub.w	r3, r5, fp
 8006556:	4293      	cmp	r3, r2
 8006558:	d021      	beq.n	800659e <_dtoa_r+0xabe>
 800655a:	2300      	movs	r3, #0
 800655c:	220a      	movs	r2, #10
 800655e:	9904      	ldr	r1, [sp, #16]
 8006560:	4620      	mov	r0, r4
 8006562:	f000 f9ab 	bl	80068bc <__multadd>
 8006566:	45b1      	cmp	r9, r6
 8006568:	9004      	str	r0, [sp, #16]
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	f04f 020a 	mov.w	r2, #10
 8006572:	4649      	mov	r1, r9
 8006574:	4620      	mov	r0, r4
 8006576:	d105      	bne.n	8006584 <_dtoa_r+0xaa4>
 8006578:	f000 f9a0 	bl	80068bc <__multadd>
 800657c:	4681      	mov	r9, r0
 800657e:	4606      	mov	r6, r0
 8006580:	9505      	str	r5, [sp, #20]
 8006582:	e776      	b.n	8006472 <_dtoa_r+0x992>
 8006584:	f000 f99a 	bl	80068bc <__multadd>
 8006588:	4631      	mov	r1, r6
 800658a:	4681      	mov	r9, r0
 800658c:	2300      	movs	r3, #0
 800658e:	220a      	movs	r2, #10
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f993 	bl	80068bc <__multadd>
 8006596:	4606      	mov	r6, r0
 8006598:	e7f2      	b.n	8006580 <_dtoa_r+0xaa0>
 800659a:	f04f 0900 	mov.w	r9, #0
 800659e:	2201      	movs	r2, #1
 80065a0:	9904      	ldr	r1, [sp, #16]
 80065a2:	4620      	mov	r0, r4
 80065a4:	f000 fb00 	bl	8006ba8 <__lshift>
 80065a8:	4639      	mov	r1, r7
 80065aa:	9004      	str	r0, [sp, #16]
 80065ac:	f000 fb50 	bl	8006c50 <__mcmp>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	dcb6      	bgt.n	8006522 <_dtoa_r+0xa42>
 80065b4:	d102      	bne.n	80065bc <_dtoa_r+0xadc>
 80065b6:	f018 0f01 	tst.w	r8, #1
 80065ba:	d1b2      	bne.n	8006522 <_dtoa_r+0xa42>
 80065bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065c0:	2b30      	cmp	r3, #48	; 0x30
 80065c2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80065c6:	f47f af0a 	bne.w	80063de <_dtoa_r+0x8fe>
 80065ca:	4615      	mov	r5, r2
 80065cc:	e7f6      	b.n	80065bc <_dtoa_r+0xadc>
 80065ce:	4593      	cmp	fp, r2
 80065d0:	d105      	bne.n	80065de <_dtoa_r+0xafe>
 80065d2:	2331      	movs	r3, #49	; 0x31
 80065d4:	f10a 0a01 	add.w	sl, sl, #1
 80065d8:	f88b 3000 	strb.w	r3, [fp]
 80065dc:	e6ff      	b.n	80063de <_dtoa_r+0x8fe>
 80065de:	4615      	mov	r5, r2
 80065e0:	e79f      	b.n	8006522 <_dtoa_r+0xa42>
 80065e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006648 <_dtoa_r+0xb68>
 80065e6:	e007      	b.n	80065f8 <_dtoa_r+0xb18>
 80065e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800664c <_dtoa_r+0xb6c>
 80065ee:	b11b      	cbz	r3, 80065f8 <_dtoa_r+0xb18>
 80065f0:	f10b 0308 	add.w	r3, fp, #8
 80065f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	4658      	mov	r0, fp
 80065fa:	b017      	add	sp, #92	; 0x5c
 80065fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006600:	9b06      	ldr	r3, [sp, #24]
 8006602:	2b01      	cmp	r3, #1
 8006604:	f77f ae35 	ble.w	8006272 <_dtoa_r+0x792>
 8006608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800660a:	9307      	str	r3, [sp, #28]
 800660c:	e649      	b.n	80062a2 <_dtoa_r+0x7c2>
 800660e:	9b02      	ldr	r3, [sp, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	dc03      	bgt.n	800661c <_dtoa_r+0xb3c>
 8006614:	9b06      	ldr	r3, [sp, #24]
 8006616:	2b02      	cmp	r3, #2
 8006618:	f73f aecc 	bgt.w	80063b4 <_dtoa_r+0x8d4>
 800661c:	465d      	mov	r5, fp
 800661e:	4639      	mov	r1, r7
 8006620:	9804      	ldr	r0, [sp, #16]
 8006622:	f7ff f9d1 	bl	80059c8 <quorem>
 8006626:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800662a:	f805 8b01 	strb.w	r8, [r5], #1
 800662e:	9a02      	ldr	r2, [sp, #8]
 8006630:	eba5 030b 	sub.w	r3, r5, fp
 8006634:	429a      	cmp	r2, r3
 8006636:	ddb0      	ble.n	800659a <_dtoa_r+0xaba>
 8006638:	2300      	movs	r3, #0
 800663a:	220a      	movs	r2, #10
 800663c:	9904      	ldr	r1, [sp, #16]
 800663e:	4620      	mov	r0, r4
 8006640:	f000 f93c 	bl	80068bc <__multadd>
 8006644:	9004      	str	r0, [sp, #16]
 8006646:	e7ea      	b.n	800661e <_dtoa_r+0xb3e>
 8006648:	08007cfc 	.word	0x08007cfc
 800664c:	08007d20 	.word	0x08007d20

08006650 <std>:
 8006650:	2300      	movs	r3, #0
 8006652:	b510      	push	{r4, lr}
 8006654:	4604      	mov	r4, r0
 8006656:	e9c0 3300 	strd	r3, r3, [r0]
 800665a:	6083      	str	r3, [r0, #8]
 800665c:	8181      	strh	r1, [r0, #12]
 800665e:	6643      	str	r3, [r0, #100]	; 0x64
 8006660:	81c2      	strh	r2, [r0, #14]
 8006662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006666:	6183      	str	r3, [r0, #24]
 8006668:	4619      	mov	r1, r3
 800666a:	2208      	movs	r2, #8
 800666c:	305c      	adds	r0, #92	; 0x5c
 800666e:	f7fe fd2f 	bl	80050d0 <memset>
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <std+0x38>)
 8006674:	6263      	str	r3, [r4, #36]	; 0x24
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <std+0x3c>)
 8006678:	62a3      	str	r3, [r4, #40]	; 0x28
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <std+0x40>)
 800667c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <std+0x44>)
 8006680:	6224      	str	r4, [r4, #32]
 8006682:	6323      	str	r3, [r4, #48]	; 0x30
 8006684:	bd10      	pop	{r4, pc}
 8006686:	bf00      	nop
 8006688:	080071e9 	.word	0x080071e9
 800668c:	0800720b 	.word	0x0800720b
 8006690:	08007243 	.word	0x08007243
 8006694:	08007267 	.word	0x08007267

08006698 <_cleanup_r>:
 8006698:	4901      	ldr	r1, [pc, #4]	; (80066a0 <_cleanup_r+0x8>)
 800669a:	f000 b885 	b.w	80067a8 <_fwalk_reent>
 800669e:	bf00      	nop
 80066a0:	08007541 	.word	0x08007541

080066a4 <__sfmoreglue>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	1e4a      	subs	r2, r1, #1
 80066a8:	2568      	movs	r5, #104	; 0x68
 80066aa:	4355      	muls	r5, r2
 80066ac:	460e      	mov	r6, r1
 80066ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066b2:	f000 fbef 	bl	8006e94 <_malloc_r>
 80066b6:	4604      	mov	r4, r0
 80066b8:	b140      	cbz	r0, 80066cc <__sfmoreglue+0x28>
 80066ba:	2100      	movs	r1, #0
 80066bc:	e9c0 1600 	strd	r1, r6, [r0]
 80066c0:	300c      	adds	r0, #12
 80066c2:	60a0      	str	r0, [r4, #8]
 80066c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066c8:	f7fe fd02 	bl	80050d0 <memset>
 80066cc:	4620      	mov	r0, r4
 80066ce:	bd70      	pop	{r4, r5, r6, pc}

080066d0 <__sinit>:
 80066d0:	6983      	ldr	r3, [r0, #24]
 80066d2:	b510      	push	{r4, lr}
 80066d4:	4604      	mov	r4, r0
 80066d6:	bb33      	cbnz	r3, 8006726 <__sinit+0x56>
 80066d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80066dc:	6503      	str	r3, [r0, #80]	; 0x50
 80066de:	4b12      	ldr	r3, [pc, #72]	; (8006728 <__sinit+0x58>)
 80066e0:	4a12      	ldr	r2, [pc, #72]	; (800672c <__sinit+0x5c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6282      	str	r2, [r0, #40]	; 0x28
 80066e6:	4298      	cmp	r0, r3
 80066e8:	bf04      	itt	eq
 80066ea:	2301      	moveq	r3, #1
 80066ec:	6183      	streq	r3, [r0, #24]
 80066ee:	f000 f81f 	bl	8006730 <__sfp>
 80066f2:	6060      	str	r0, [r4, #4]
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 f81b 	bl	8006730 <__sfp>
 80066fa:	60a0      	str	r0, [r4, #8]
 80066fc:	4620      	mov	r0, r4
 80066fe:	f000 f817 	bl	8006730 <__sfp>
 8006702:	2200      	movs	r2, #0
 8006704:	60e0      	str	r0, [r4, #12]
 8006706:	2104      	movs	r1, #4
 8006708:	6860      	ldr	r0, [r4, #4]
 800670a:	f7ff ffa1 	bl	8006650 <std>
 800670e:	2201      	movs	r2, #1
 8006710:	2109      	movs	r1, #9
 8006712:	68a0      	ldr	r0, [r4, #8]
 8006714:	f7ff ff9c 	bl	8006650 <std>
 8006718:	2202      	movs	r2, #2
 800671a:	2112      	movs	r1, #18
 800671c:	68e0      	ldr	r0, [r4, #12]
 800671e:	f7ff ff97 	bl	8006650 <std>
 8006722:	2301      	movs	r3, #1
 8006724:	61a3      	str	r3, [r4, #24]
 8006726:	bd10      	pop	{r4, pc}
 8006728:	08007ce8 	.word	0x08007ce8
 800672c:	08006699 	.word	0x08006699

08006730 <__sfp>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <__sfp+0x70>)
 8006734:	681e      	ldr	r6, [r3, #0]
 8006736:	69b3      	ldr	r3, [r6, #24]
 8006738:	4607      	mov	r7, r0
 800673a:	b913      	cbnz	r3, 8006742 <__sfp+0x12>
 800673c:	4630      	mov	r0, r6
 800673e:	f7ff ffc7 	bl	80066d0 <__sinit>
 8006742:	3648      	adds	r6, #72	; 0x48
 8006744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006748:	3b01      	subs	r3, #1
 800674a:	d503      	bpl.n	8006754 <__sfp+0x24>
 800674c:	6833      	ldr	r3, [r6, #0]
 800674e:	b133      	cbz	r3, 800675e <__sfp+0x2e>
 8006750:	6836      	ldr	r6, [r6, #0]
 8006752:	e7f7      	b.n	8006744 <__sfp+0x14>
 8006754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006758:	b16d      	cbz	r5, 8006776 <__sfp+0x46>
 800675a:	3468      	adds	r4, #104	; 0x68
 800675c:	e7f4      	b.n	8006748 <__sfp+0x18>
 800675e:	2104      	movs	r1, #4
 8006760:	4638      	mov	r0, r7
 8006762:	f7ff ff9f 	bl	80066a4 <__sfmoreglue>
 8006766:	6030      	str	r0, [r6, #0]
 8006768:	2800      	cmp	r0, #0
 800676a:	d1f1      	bne.n	8006750 <__sfp+0x20>
 800676c:	230c      	movs	r3, #12
 800676e:	603b      	str	r3, [r7, #0]
 8006770:	4604      	mov	r4, r0
 8006772:	4620      	mov	r0, r4
 8006774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006776:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <__sfp+0x74>)
 8006778:	6665      	str	r5, [r4, #100]	; 0x64
 800677a:	e9c4 5500 	strd	r5, r5, [r4]
 800677e:	60a5      	str	r5, [r4, #8]
 8006780:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006784:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006788:	2208      	movs	r2, #8
 800678a:	4629      	mov	r1, r5
 800678c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006790:	f7fe fc9e 	bl	80050d0 <memset>
 8006794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800679c:	e7e9      	b.n	8006772 <__sfp+0x42>
 800679e:	bf00      	nop
 80067a0:	08007ce8 	.word	0x08007ce8
 80067a4:	ffff0001 	.word	0xffff0001

080067a8 <_fwalk_reent>:
 80067a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067ac:	4680      	mov	r8, r0
 80067ae:	4689      	mov	r9, r1
 80067b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067b4:	2600      	movs	r6, #0
 80067b6:	b914      	cbnz	r4, 80067be <_fwalk_reent+0x16>
 80067b8:	4630      	mov	r0, r6
 80067ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80067c2:	3f01      	subs	r7, #1
 80067c4:	d501      	bpl.n	80067ca <_fwalk_reent+0x22>
 80067c6:	6824      	ldr	r4, [r4, #0]
 80067c8:	e7f5      	b.n	80067b6 <_fwalk_reent+0xe>
 80067ca:	89ab      	ldrh	r3, [r5, #12]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d907      	bls.n	80067e0 <_fwalk_reent+0x38>
 80067d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067d4:	3301      	adds	r3, #1
 80067d6:	d003      	beq.n	80067e0 <_fwalk_reent+0x38>
 80067d8:	4629      	mov	r1, r5
 80067da:	4640      	mov	r0, r8
 80067dc:	47c8      	blx	r9
 80067de:	4306      	orrs	r6, r0
 80067e0:	3568      	adds	r5, #104	; 0x68
 80067e2:	e7ee      	b.n	80067c2 <_fwalk_reent+0x1a>

080067e4 <_localeconv_r>:
 80067e4:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <_localeconv_r+0x14>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6a18      	ldr	r0, [r3, #32]
 80067ea:	4b04      	ldr	r3, [pc, #16]	; (80067fc <_localeconv_r+0x18>)
 80067ec:	2800      	cmp	r0, #0
 80067ee:	bf08      	it	eq
 80067f0:	4618      	moveq	r0, r3
 80067f2:	30f0      	adds	r0, #240	; 0xf0
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	2000000c 	.word	0x2000000c
 80067fc:	20000070 	.word	0x20000070

08006800 <malloc>:
 8006800:	4b02      	ldr	r3, [pc, #8]	; (800680c <malloc+0xc>)
 8006802:	4601      	mov	r1, r0
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	f000 bb45 	b.w	8006e94 <_malloc_r>
 800680a:	bf00      	nop
 800680c:	2000000c 	.word	0x2000000c

08006810 <memcpy>:
 8006810:	b510      	push	{r4, lr}
 8006812:	1e43      	subs	r3, r0, #1
 8006814:	440a      	add	r2, r1
 8006816:	4291      	cmp	r1, r2
 8006818:	d100      	bne.n	800681c <memcpy+0xc>
 800681a:	bd10      	pop	{r4, pc}
 800681c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006824:	e7f7      	b.n	8006816 <memcpy+0x6>

08006826 <_Balloc>:
 8006826:	b570      	push	{r4, r5, r6, lr}
 8006828:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800682a:	4604      	mov	r4, r0
 800682c:	460e      	mov	r6, r1
 800682e:	b93d      	cbnz	r5, 8006840 <_Balloc+0x1a>
 8006830:	2010      	movs	r0, #16
 8006832:	f7ff ffe5 	bl	8006800 <malloc>
 8006836:	6260      	str	r0, [r4, #36]	; 0x24
 8006838:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800683c:	6005      	str	r5, [r0, #0]
 800683e:	60c5      	str	r5, [r0, #12]
 8006840:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006842:	68eb      	ldr	r3, [r5, #12]
 8006844:	b183      	cbz	r3, 8006868 <_Balloc+0x42>
 8006846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800684e:	b9b8      	cbnz	r0, 8006880 <_Balloc+0x5a>
 8006850:	2101      	movs	r1, #1
 8006852:	fa01 f506 	lsl.w	r5, r1, r6
 8006856:	1d6a      	adds	r2, r5, #5
 8006858:	0092      	lsls	r2, r2, #2
 800685a:	4620      	mov	r0, r4
 800685c:	f000 fabe 	bl	8006ddc <_calloc_r>
 8006860:	b160      	cbz	r0, 800687c <_Balloc+0x56>
 8006862:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006866:	e00e      	b.n	8006886 <_Balloc+0x60>
 8006868:	2221      	movs	r2, #33	; 0x21
 800686a:	2104      	movs	r1, #4
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fab5 	bl	8006ddc <_calloc_r>
 8006872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006874:	60e8      	str	r0, [r5, #12]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e4      	bne.n	8006846 <_Balloc+0x20>
 800687c:	2000      	movs	r0, #0
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	6802      	ldr	r2, [r0, #0]
 8006882:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006886:	2300      	movs	r3, #0
 8006888:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800688c:	e7f7      	b.n	800687e <_Balloc+0x58>

0800688e <_Bfree>:
 800688e:	b570      	push	{r4, r5, r6, lr}
 8006890:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006892:	4606      	mov	r6, r0
 8006894:	460d      	mov	r5, r1
 8006896:	b93c      	cbnz	r4, 80068a8 <_Bfree+0x1a>
 8006898:	2010      	movs	r0, #16
 800689a:	f7ff ffb1 	bl	8006800 <malloc>
 800689e:	6270      	str	r0, [r6, #36]	; 0x24
 80068a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068a4:	6004      	str	r4, [r0, #0]
 80068a6:	60c4      	str	r4, [r0, #12]
 80068a8:	b13d      	cbz	r5, 80068ba <_Bfree+0x2c>
 80068aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80068ac:	686a      	ldr	r2, [r5, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068b4:	6029      	str	r1, [r5, #0]
 80068b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80068ba:	bd70      	pop	{r4, r5, r6, pc}

080068bc <__multadd>:
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	690d      	ldr	r5, [r1, #16]
 80068c2:	461f      	mov	r7, r3
 80068c4:	4606      	mov	r6, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	f101 0c14 	add.w	ip, r1, #20
 80068cc:	2300      	movs	r3, #0
 80068ce:	f8dc 0000 	ldr.w	r0, [ip]
 80068d2:	b281      	uxth	r1, r0
 80068d4:	fb02 7101 	mla	r1, r2, r1, r7
 80068d8:	0c0f      	lsrs	r7, r1, #16
 80068da:	0c00      	lsrs	r0, r0, #16
 80068dc:	fb02 7000 	mla	r0, r2, r0, r7
 80068e0:	b289      	uxth	r1, r1
 80068e2:	3301      	adds	r3, #1
 80068e4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80068e8:	429d      	cmp	r5, r3
 80068ea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80068ee:	f84c 1b04 	str.w	r1, [ip], #4
 80068f2:	dcec      	bgt.n	80068ce <__multadd+0x12>
 80068f4:	b1d7      	cbz	r7, 800692c <__multadd+0x70>
 80068f6:	68a3      	ldr	r3, [r4, #8]
 80068f8:	42ab      	cmp	r3, r5
 80068fa:	dc12      	bgt.n	8006922 <__multadd+0x66>
 80068fc:	6861      	ldr	r1, [r4, #4]
 80068fe:	4630      	mov	r0, r6
 8006900:	3101      	adds	r1, #1
 8006902:	f7ff ff90 	bl	8006826 <_Balloc>
 8006906:	6922      	ldr	r2, [r4, #16]
 8006908:	3202      	adds	r2, #2
 800690a:	f104 010c 	add.w	r1, r4, #12
 800690e:	4680      	mov	r8, r0
 8006910:	0092      	lsls	r2, r2, #2
 8006912:	300c      	adds	r0, #12
 8006914:	f7ff ff7c 	bl	8006810 <memcpy>
 8006918:	4621      	mov	r1, r4
 800691a:	4630      	mov	r0, r6
 800691c:	f7ff ffb7 	bl	800688e <_Bfree>
 8006920:	4644      	mov	r4, r8
 8006922:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006926:	3501      	adds	r5, #1
 8006928:	615f      	str	r7, [r3, #20]
 800692a:	6125      	str	r5, [r4, #16]
 800692c:	4620      	mov	r0, r4
 800692e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006932 <__hi0bits>:
 8006932:	0c02      	lsrs	r2, r0, #16
 8006934:	0412      	lsls	r2, r2, #16
 8006936:	4603      	mov	r3, r0
 8006938:	b9b2      	cbnz	r2, 8006968 <__hi0bits+0x36>
 800693a:	0403      	lsls	r3, r0, #16
 800693c:	2010      	movs	r0, #16
 800693e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006942:	bf04      	itt	eq
 8006944:	021b      	lsleq	r3, r3, #8
 8006946:	3008      	addeq	r0, #8
 8006948:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800694c:	bf04      	itt	eq
 800694e:	011b      	lsleq	r3, r3, #4
 8006950:	3004      	addeq	r0, #4
 8006952:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006956:	bf04      	itt	eq
 8006958:	009b      	lsleq	r3, r3, #2
 800695a:	3002      	addeq	r0, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	db06      	blt.n	800696e <__hi0bits+0x3c>
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	d503      	bpl.n	800696c <__hi0bits+0x3a>
 8006964:	3001      	adds	r0, #1
 8006966:	4770      	bx	lr
 8006968:	2000      	movs	r0, #0
 800696a:	e7e8      	b.n	800693e <__hi0bits+0xc>
 800696c:	2020      	movs	r0, #32
 800696e:	4770      	bx	lr

08006970 <__lo0bits>:
 8006970:	6803      	ldr	r3, [r0, #0]
 8006972:	f013 0207 	ands.w	r2, r3, #7
 8006976:	4601      	mov	r1, r0
 8006978:	d00b      	beq.n	8006992 <__lo0bits+0x22>
 800697a:	07da      	lsls	r2, r3, #31
 800697c:	d423      	bmi.n	80069c6 <__lo0bits+0x56>
 800697e:	0798      	lsls	r0, r3, #30
 8006980:	bf49      	itett	mi
 8006982:	085b      	lsrmi	r3, r3, #1
 8006984:	089b      	lsrpl	r3, r3, #2
 8006986:	2001      	movmi	r0, #1
 8006988:	600b      	strmi	r3, [r1, #0]
 800698a:	bf5c      	itt	pl
 800698c:	600b      	strpl	r3, [r1, #0]
 800698e:	2002      	movpl	r0, #2
 8006990:	4770      	bx	lr
 8006992:	b298      	uxth	r0, r3
 8006994:	b9a8      	cbnz	r0, 80069c2 <__lo0bits+0x52>
 8006996:	0c1b      	lsrs	r3, r3, #16
 8006998:	2010      	movs	r0, #16
 800699a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800699e:	bf04      	itt	eq
 80069a0:	0a1b      	lsreq	r3, r3, #8
 80069a2:	3008      	addeq	r0, #8
 80069a4:	071a      	lsls	r2, r3, #28
 80069a6:	bf04      	itt	eq
 80069a8:	091b      	lsreq	r3, r3, #4
 80069aa:	3004      	addeq	r0, #4
 80069ac:	079a      	lsls	r2, r3, #30
 80069ae:	bf04      	itt	eq
 80069b0:	089b      	lsreq	r3, r3, #2
 80069b2:	3002      	addeq	r0, #2
 80069b4:	07da      	lsls	r2, r3, #31
 80069b6:	d402      	bmi.n	80069be <__lo0bits+0x4e>
 80069b8:	085b      	lsrs	r3, r3, #1
 80069ba:	d006      	beq.n	80069ca <__lo0bits+0x5a>
 80069bc:	3001      	adds	r0, #1
 80069be:	600b      	str	r3, [r1, #0]
 80069c0:	4770      	bx	lr
 80069c2:	4610      	mov	r0, r2
 80069c4:	e7e9      	b.n	800699a <__lo0bits+0x2a>
 80069c6:	2000      	movs	r0, #0
 80069c8:	4770      	bx	lr
 80069ca:	2020      	movs	r0, #32
 80069cc:	4770      	bx	lr

080069ce <__i2b>:
 80069ce:	b510      	push	{r4, lr}
 80069d0:	460c      	mov	r4, r1
 80069d2:	2101      	movs	r1, #1
 80069d4:	f7ff ff27 	bl	8006826 <_Balloc>
 80069d8:	2201      	movs	r2, #1
 80069da:	6144      	str	r4, [r0, #20]
 80069dc:	6102      	str	r2, [r0, #16]
 80069de:	bd10      	pop	{r4, pc}

080069e0 <__multiply>:
 80069e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	4614      	mov	r4, r2
 80069e6:	690a      	ldr	r2, [r1, #16]
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	bfb8      	it	lt
 80069ee:	460b      	movlt	r3, r1
 80069f0:	4688      	mov	r8, r1
 80069f2:	bfbc      	itt	lt
 80069f4:	46a0      	movlt	r8, r4
 80069f6:	461c      	movlt	r4, r3
 80069f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006a00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a08:	eb07 0609 	add.w	r6, r7, r9
 8006a0c:	42b3      	cmp	r3, r6
 8006a0e:	bfb8      	it	lt
 8006a10:	3101      	addlt	r1, #1
 8006a12:	f7ff ff08 	bl	8006826 <_Balloc>
 8006a16:	f100 0514 	add.w	r5, r0, #20
 8006a1a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006a1e:	462b      	mov	r3, r5
 8006a20:	2200      	movs	r2, #0
 8006a22:	4573      	cmp	r3, lr
 8006a24:	d316      	bcc.n	8006a54 <__multiply+0x74>
 8006a26:	f104 0214 	add.w	r2, r4, #20
 8006a2a:	f108 0114 	add.w	r1, r8, #20
 8006a2e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006a32:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	9b00      	ldr	r3, [sp, #0]
 8006a3a:	9201      	str	r2, [sp, #4]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d80c      	bhi.n	8006a5a <__multiply+0x7a>
 8006a40:	2e00      	cmp	r6, #0
 8006a42:	dd03      	ble.n	8006a4c <__multiply+0x6c>
 8006a44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d05d      	beq.n	8006b08 <__multiply+0x128>
 8006a4c:	6106      	str	r6, [r0, #16]
 8006a4e:	b003      	add	sp, #12
 8006a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a54:	f843 2b04 	str.w	r2, [r3], #4
 8006a58:	e7e3      	b.n	8006a22 <__multiply+0x42>
 8006a5a:	f8b2 b000 	ldrh.w	fp, [r2]
 8006a5e:	f1bb 0f00 	cmp.w	fp, #0
 8006a62:	d023      	beq.n	8006aac <__multiply+0xcc>
 8006a64:	4689      	mov	r9, r1
 8006a66:	46ac      	mov	ip, r5
 8006a68:	f04f 0800 	mov.w	r8, #0
 8006a6c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a70:	f8dc a000 	ldr.w	sl, [ip]
 8006a74:	b2a3      	uxth	r3, r4
 8006a76:	fa1f fa8a 	uxth.w	sl, sl
 8006a7a:	fb0b a303 	mla	r3, fp, r3, sl
 8006a7e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006a82:	f8dc 4000 	ldr.w	r4, [ip]
 8006a86:	4443      	add	r3, r8
 8006a88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a8c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006a90:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006a94:	46e2      	mov	sl, ip
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a9c:	454f      	cmp	r7, r9
 8006a9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006aa2:	f84a 3b04 	str.w	r3, [sl], #4
 8006aa6:	d82b      	bhi.n	8006b00 <__multiply+0x120>
 8006aa8:	f8cc 8004 	str.w	r8, [ip, #4]
 8006aac:	9b01      	ldr	r3, [sp, #4]
 8006aae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006ab2:	3204      	adds	r2, #4
 8006ab4:	f1ba 0f00 	cmp.w	sl, #0
 8006ab8:	d020      	beq.n	8006afc <__multiply+0x11c>
 8006aba:	682b      	ldr	r3, [r5, #0]
 8006abc:	4689      	mov	r9, r1
 8006abe:	46a8      	mov	r8, r5
 8006ac0:	f04f 0b00 	mov.w	fp, #0
 8006ac4:	f8b9 c000 	ldrh.w	ip, [r9]
 8006ac8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006acc:	fb0a 440c 	mla	r4, sl, ip, r4
 8006ad0:	445c      	add	r4, fp
 8006ad2:	46c4      	mov	ip, r8
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ada:	f84c 3b04 	str.w	r3, [ip], #4
 8006ade:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ae2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	fb0a b303 	mla	r3, sl, r3, fp
 8006aec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006af0:	454f      	cmp	r7, r9
 8006af2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006af6:	d805      	bhi.n	8006b04 <__multiply+0x124>
 8006af8:	f8c8 3004 	str.w	r3, [r8, #4]
 8006afc:	3504      	adds	r5, #4
 8006afe:	e79b      	b.n	8006a38 <__multiply+0x58>
 8006b00:	46d4      	mov	ip, sl
 8006b02:	e7b3      	b.n	8006a6c <__multiply+0x8c>
 8006b04:	46e0      	mov	r8, ip
 8006b06:	e7dd      	b.n	8006ac4 <__multiply+0xe4>
 8006b08:	3e01      	subs	r6, #1
 8006b0a:	e799      	b.n	8006a40 <__multiply+0x60>

08006b0c <__pow5mult>:
 8006b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b10:	4615      	mov	r5, r2
 8006b12:	f012 0203 	ands.w	r2, r2, #3
 8006b16:	4606      	mov	r6, r0
 8006b18:	460f      	mov	r7, r1
 8006b1a:	d007      	beq.n	8006b2c <__pow5mult+0x20>
 8006b1c:	3a01      	subs	r2, #1
 8006b1e:	4c21      	ldr	r4, [pc, #132]	; (8006ba4 <__pow5mult+0x98>)
 8006b20:	2300      	movs	r3, #0
 8006b22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b26:	f7ff fec9 	bl	80068bc <__multadd>
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	10ad      	asrs	r5, r5, #2
 8006b2e:	d035      	beq.n	8006b9c <__pow5mult+0x90>
 8006b30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b32:	b93c      	cbnz	r4, 8006b44 <__pow5mult+0x38>
 8006b34:	2010      	movs	r0, #16
 8006b36:	f7ff fe63 	bl	8006800 <malloc>
 8006b3a:	6270      	str	r0, [r6, #36]	; 0x24
 8006b3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b40:	6004      	str	r4, [r0, #0]
 8006b42:	60c4      	str	r4, [r0, #12]
 8006b44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b4c:	b94c      	cbnz	r4, 8006b62 <__pow5mult+0x56>
 8006b4e:	f240 2171 	movw	r1, #625	; 0x271
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff ff3b 	bl	80069ce <__i2b>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b5e:	4604      	mov	r4, r0
 8006b60:	6003      	str	r3, [r0, #0]
 8006b62:	f04f 0800 	mov.w	r8, #0
 8006b66:	07eb      	lsls	r3, r5, #31
 8006b68:	d50a      	bpl.n	8006b80 <__pow5mult+0x74>
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f7ff ff36 	bl	80069e0 <__multiply>
 8006b74:	4639      	mov	r1, r7
 8006b76:	4681      	mov	r9, r0
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f7ff fe88 	bl	800688e <_Bfree>
 8006b7e:	464f      	mov	r7, r9
 8006b80:	106d      	asrs	r5, r5, #1
 8006b82:	d00b      	beq.n	8006b9c <__pow5mult+0x90>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	b938      	cbnz	r0, 8006b98 <__pow5mult+0x8c>
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f7ff ff27 	bl	80069e0 <__multiply>
 8006b92:	6020      	str	r0, [r4, #0]
 8006b94:	f8c0 8000 	str.w	r8, [r0]
 8006b98:	4604      	mov	r4, r0
 8006b9a:	e7e4      	b.n	8006b66 <__pow5mult+0x5a>
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	bf00      	nop
 8006ba4:	08007e80 	.word	0x08007e80

08006ba8 <__lshift>:
 8006ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	460c      	mov	r4, r1
 8006bae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bb2:	6923      	ldr	r3, [r4, #16]
 8006bb4:	6849      	ldr	r1, [r1, #4]
 8006bb6:	eb0a 0903 	add.w	r9, sl, r3
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	4616      	mov	r6, r2
 8006bc0:	f109 0501 	add.w	r5, r9, #1
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	db32      	blt.n	8006c2e <__lshift+0x86>
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f7ff fe2c 	bl	8006826 <_Balloc>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	f100 0114 	add.w	r1, r0, #20
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4553      	cmp	r3, sl
 8006bda:	db2b      	blt.n	8006c34 <__lshift+0x8c>
 8006bdc:	6920      	ldr	r0, [r4, #16]
 8006bde:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006be2:	f104 0314 	add.w	r3, r4, #20
 8006be6:	f016 021f 	ands.w	r2, r6, #31
 8006bea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bf2:	d025      	beq.n	8006c40 <__lshift+0x98>
 8006bf4:	f1c2 0e20 	rsb	lr, r2, #32
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	681e      	ldr	r6, [r3, #0]
 8006bfc:	468a      	mov	sl, r1
 8006bfe:	4096      	lsls	r6, r2
 8006c00:	4330      	orrs	r0, r6
 8006c02:	f84a 0b04 	str.w	r0, [sl], #4
 8006c06:	f853 0b04 	ldr.w	r0, [r3], #4
 8006c0a:	459c      	cmp	ip, r3
 8006c0c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006c10:	d814      	bhi.n	8006c3c <__lshift+0x94>
 8006c12:	6048      	str	r0, [r1, #4]
 8006c14:	b108      	cbz	r0, 8006c1a <__lshift+0x72>
 8006c16:	f109 0502 	add.w	r5, r9, #2
 8006c1a:	3d01      	subs	r5, #1
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006c22:	4621      	mov	r1, r4
 8006c24:	f7ff fe33 	bl	800688e <_Bfree>
 8006c28:	4640      	mov	r0, r8
 8006c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2e:	3101      	adds	r1, #1
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	e7c7      	b.n	8006bc4 <__lshift+0x1c>
 8006c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	e7cd      	b.n	8006bd8 <__lshift+0x30>
 8006c3c:	4651      	mov	r1, sl
 8006c3e:	e7dc      	b.n	8006bfa <__lshift+0x52>
 8006c40:	3904      	subs	r1, #4
 8006c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c46:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c4a:	459c      	cmp	ip, r3
 8006c4c:	d8f9      	bhi.n	8006c42 <__lshift+0x9a>
 8006c4e:	e7e4      	b.n	8006c1a <__lshift+0x72>

08006c50 <__mcmp>:
 8006c50:	6903      	ldr	r3, [r0, #16]
 8006c52:	690a      	ldr	r2, [r1, #16]
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	b530      	push	{r4, r5, lr}
 8006c58:	d10c      	bne.n	8006c74 <__mcmp+0x24>
 8006c5a:	0092      	lsls	r2, r2, #2
 8006c5c:	3014      	adds	r0, #20
 8006c5e:	3114      	adds	r1, #20
 8006c60:	1884      	adds	r4, r0, r2
 8006c62:	4411      	add	r1, r2
 8006c64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c6c:	4295      	cmp	r5, r2
 8006c6e:	d003      	beq.n	8006c78 <__mcmp+0x28>
 8006c70:	d305      	bcc.n	8006c7e <__mcmp+0x2e>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4618      	mov	r0, r3
 8006c76:	bd30      	pop	{r4, r5, pc}
 8006c78:	42a0      	cmp	r0, r4
 8006c7a:	d3f3      	bcc.n	8006c64 <__mcmp+0x14>
 8006c7c:	e7fa      	b.n	8006c74 <__mcmp+0x24>
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c82:	e7f7      	b.n	8006c74 <__mcmp+0x24>

08006c84 <__mdiff>:
 8006c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	460d      	mov	r5, r1
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4628      	mov	r0, r5
 8006c90:	4614      	mov	r4, r2
 8006c92:	f7ff ffdd 	bl	8006c50 <__mcmp>
 8006c96:	1e06      	subs	r6, r0, #0
 8006c98:	d108      	bne.n	8006cac <__mdiff+0x28>
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	f7ff fdc2 	bl	8006826 <_Balloc>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cac:	bfa4      	itt	ge
 8006cae:	4623      	movge	r3, r4
 8006cb0:	462c      	movge	r4, r5
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	6861      	ldr	r1, [r4, #4]
 8006cb6:	bfa6      	itte	ge
 8006cb8:	461d      	movge	r5, r3
 8006cba:	2600      	movge	r6, #0
 8006cbc:	2601      	movlt	r6, #1
 8006cbe:	f7ff fdb2 	bl	8006826 <_Balloc>
 8006cc2:	692b      	ldr	r3, [r5, #16]
 8006cc4:	60c6      	str	r6, [r0, #12]
 8006cc6:	6926      	ldr	r6, [r4, #16]
 8006cc8:	f105 0914 	add.w	r9, r5, #20
 8006ccc:	f104 0214 	add.w	r2, r4, #20
 8006cd0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006cd4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006cd8:	f100 0514 	add.w	r5, r0, #20
 8006cdc:	f04f 0e00 	mov.w	lr, #0
 8006ce0:	f852 ab04 	ldr.w	sl, [r2], #4
 8006ce4:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ce8:	fa1e f18a 	uxtah	r1, lr, sl
 8006cec:	b2a3      	uxth	r3, r4
 8006cee:	1ac9      	subs	r1, r1, r3
 8006cf0:	0c23      	lsrs	r3, r4, #16
 8006cf2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006cf6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006cfa:	b289      	uxth	r1, r1
 8006cfc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006d00:	45c8      	cmp	r8, r9
 8006d02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d06:	4694      	mov	ip, r2
 8006d08:	f845 3b04 	str.w	r3, [r5], #4
 8006d0c:	d8e8      	bhi.n	8006ce0 <__mdiff+0x5c>
 8006d0e:	45bc      	cmp	ip, r7
 8006d10:	d304      	bcc.n	8006d1c <__mdiff+0x98>
 8006d12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006d16:	b183      	cbz	r3, 8006d3a <__mdiff+0xb6>
 8006d18:	6106      	str	r6, [r0, #16]
 8006d1a:	e7c5      	b.n	8006ca8 <__mdiff+0x24>
 8006d1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d20:	fa1e f381 	uxtah	r3, lr, r1
 8006d24:	141a      	asrs	r2, r3, #16
 8006d26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d30:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006d34:	f845 3b04 	str.w	r3, [r5], #4
 8006d38:	e7e9      	b.n	8006d0e <__mdiff+0x8a>
 8006d3a:	3e01      	subs	r6, #1
 8006d3c:	e7e9      	b.n	8006d12 <__mdiff+0x8e>

08006d3e <__d2b>:
 8006d3e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d42:	460e      	mov	r6, r1
 8006d44:	2101      	movs	r1, #1
 8006d46:	ec59 8b10 	vmov	r8, r9, d0
 8006d4a:	4615      	mov	r5, r2
 8006d4c:	f7ff fd6b 	bl	8006826 <_Balloc>
 8006d50:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006d54:	4607      	mov	r7, r0
 8006d56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d5a:	bb34      	cbnz	r4, 8006daa <__d2b+0x6c>
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	f1b8 0300 	subs.w	r3, r8, #0
 8006d62:	d027      	beq.n	8006db4 <__d2b+0x76>
 8006d64:	a802      	add	r0, sp, #8
 8006d66:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006d6a:	f7ff fe01 	bl	8006970 <__lo0bits>
 8006d6e:	9900      	ldr	r1, [sp, #0]
 8006d70:	b1f0      	cbz	r0, 8006db0 <__d2b+0x72>
 8006d72:	9a01      	ldr	r2, [sp, #4]
 8006d74:	f1c0 0320 	rsb	r3, r0, #32
 8006d78:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	40c2      	lsrs	r2, r0
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	9201      	str	r2, [sp, #4]
 8006d84:	9b01      	ldr	r3, [sp, #4]
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	bf14      	ite	ne
 8006d8c:	2102      	movne	r1, #2
 8006d8e:	2101      	moveq	r1, #1
 8006d90:	6139      	str	r1, [r7, #16]
 8006d92:	b1c4      	cbz	r4, 8006dc6 <__d2b+0x88>
 8006d94:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d98:	4404      	add	r4, r0
 8006d9a:	6034      	str	r4, [r6, #0]
 8006d9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006da0:	6028      	str	r0, [r5, #0]
 8006da2:	4638      	mov	r0, r7
 8006da4:	b003      	add	sp, #12
 8006da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dae:	e7d5      	b.n	8006d5c <__d2b+0x1e>
 8006db0:	6179      	str	r1, [r7, #20]
 8006db2:	e7e7      	b.n	8006d84 <__d2b+0x46>
 8006db4:	a801      	add	r0, sp, #4
 8006db6:	f7ff fddb 	bl	8006970 <__lo0bits>
 8006dba:	9b01      	ldr	r3, [sp, #4]
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	6139      	str	r1, [r7, #16]
 8006dc2:	3020      	adds	r0, #32
 8006dc4:	e7e5      	b.n	8006d92 <__d2b+0x54>
 8006dc6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006dca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006dce:	6030      	str	r0, [r6, #0]
 8006dd0:	6918      	ldr	r0, [r3, #16]
 8006dd2:	f7ff fdae 	bl	8006932 <__hi0bits>
 8006dd6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006dda:	e7e1      	b.n	8006da0 <__d2b+0x62>

08006ddc <_calloc_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	fb02 f401 	mul.w	r4, r2, r1
 8006de2:	4621      	mov	r1, r4
 8006de4:	f000 f856 	bl	8006e94 <_malloc_r>
 8006de8:	4605      	mov	r5, r0
 8006dea:	b118      	cbz	r0, 8006df4 <_calloc_r+0x18>
 8006dec:	4622      	mov	r2, r4
 8006dee:	2100      	movs	r1, #0
 8006df0:	f7fe f96e 	bl	80050d0 <memset>
 8006df4:	4628      	mov	r0, r5
 8006df6:	bd38      	pop	{r3, r4, r5, pc}

08006df8 <_free_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	d045      	beq.n	8006e8c <_free_r+0x94>
 8006e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e04:	1f0c      	subs	r4, r1, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfb8      	it	lt
 8006e0a:	18e4      	addlt	r4, r4, r3
 8006e0c:	f000 fc4a 	bl	80076a4 <__malloc_lock>
 8006e10:	4a1f      	ldr	r2, [pc, #124]	; (8006e90 <_free_r+0x98>)
 8006e12:	6813      	ldr	r3, [r2, #0]
 8006e14:	4610      	mov	r0, r2
 8006e16:	b933      	cbnz	r3, 8006e26 <_free_r+0x2e>
 8006e18:	6063      	str	r3, [r4, #4]
 8006e1a:	6014      	str	r4, [r2, #0]
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e22:	f000 bc40 	b.w	80076a6 <__malloc_unlock>
 8006e26:	42a3      	cmp	r3, r4
 8006e28:	d90c      	bls.n	8006e44 <_free_r+0x4c>
 8006e2a:	6821      	ldr	r1, [r4, #0]
 8006e2c:	1862      	adds	r2, r4, r1
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	bf04      	itt	eq
 8006e32:	681a      	ldreq	r2, [r3, #0]
 8006e34:	685b      	ldreq	r3, [r3, #4]
 8006e36:	6063      	str	r3, [r4, #4]
 8006e38:	bf04      	itt	eq
 8006e3a:	1852      	addeq	r2, r2, r1
 8006e3c:	6022      	streq	r2, [r4, #0]
 8006e3e:	6004      	str	r4, [r0, #0]
 8006e40:	e7ec      	b.n	8006e1c <_free_r+0x24>
 8006e42:	4613      	mov	r3, r2
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	b10a      	cbz	r2, 8006e4c <_free_r+0x54>
 8006e48:	42a2      	cmp	r2, r4
 8006e4a:	d9fa      	bls.n	8006e42 <_free_r+0x4a>
 8006e4c:	6819      	ldr	r1, [r3, #0]
 8006e4e:	1858      	adds	r0, r3, r1
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d10b      	bne.n	8006e6c <_free_r+0x74>
 8006e54:	6820      	ldr	r0, [r4, #0]
 8006e56:	4401      	add	r1, r0
 8006e58:	1858      	adds	r0, r3, r1
 8006e5a:	4282      	cmp	r2, r0
 8006e5c:	6019      	str	r1, [r3, #0]
 8006e5e:	d1dd      	bne.n	8006e1c <_free_r+0x24>
 8006e60:	6810      	ldr	r0, [r2, #0]
 8006e62:	6852      	ldr	r2, [r2, #4]
 8006e64:	605a      	str	r2, [r3, #4]
 8006e66:	4401      	add	r1, r0
 8006e68:	6019      	str	r1, [r3, #0]
 8006e6a:	e7d7      	b.n	8006e1c <_free_r+0x24>
 8006e6c:	d902      	bls.n	8006e74 <_free_r+0x7c>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	e7d3      	b.n	8006e1c <_free_r+0x24>
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	1821      	adds	r1, r4, r0
 8006e78:	428a      	cmp	r2, r1
 8006e7a:	bf04      	itt	eq
 8006e7c:	6811      	ldreq	r1, [r2, #0]
 8006e7e:	6852      	ldreq	r2, [r2, #4]
 8006e80:	6062      	str	r2, [r4, #4]
 8006e82:	bf04      	itt	eq
 8006e84:	1809      	addeq	r1, r1, r0
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	605c      	str	r4, [r3, #4]
 8006e8a:	e7c7      	b.n	8006e1c <_free_r+0x24>
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000208 	.word	0x20000208

08006e94 <_malloc_r>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	1ccd      	adds	r5, r1, #3
 8006e98:	f025 0503 	bic.w	r5, r5, #3
 8006e9c:	3508      	adds	r5, #8
 8006e9e:	2d0c      	cmp	r5, #12
 8006ea0:	bf38      	it	cc
 8006ea2:	250c      	movcc	r5, #12
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	db01      	blt.n	8006eae <_malloc_r+0x1a>
 8006eaa:	42a9      	cmp	r1, r5
 8006eac:	d903      	bls.n	8006eb6 <_malloc_r+0x22>
 8006eae:	230c      	movs	r3, #12
 8006eb0:	6033      	str	r3, [r6, #0]
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	f000 fbf5 	bl	80076a4 <__malloc_lock>
 8006eba:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <_malloc_r+0xac>)
 8006ebc:	6814      	ldr	r4, [r2, #0]
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	b991      	cbnz	r1, 8006ee8 <_malloc_r+0x54>
 8006ec2:	4c20      	ldr	r4, [pc, #128]	; (8006f44 <_malloc_r+0xb0>)
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	b91b      	cbnz	r3, 8006ed0 <_malloc_r+0x3c>
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f000 f97d 	bl	80071c8 <_sbrk_r>
 8006ece:	6020      	str	r0, [r4, #0]
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f000 f978 	bl	80071c8 <_sbrk_r>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d124      	bne.n	8006f26 <_malloc_r+0x92>
 8006edc:	230c      	movs	r3, #12
 8006ede:	6033      	str	r3, [r6, #0]
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f000 fbe0 	bl	80076a6 <__malloc_unlock>
 8006ee6:	e7e4      	b.n	8006eb2 <_malloc_r+0x1e>
 8006ee8:	680b      	ldr	r3, [r1, #0]
 8006eea:	1b5b      	subs	r3, r3, r5
 8006eec:	d418      	bmi.n	8006f20 <_malloc_r+0x8c>
 8006eee:	2b0b      	cmp	r3, #11
 8006ef0:	d90f      	bls.n	8006f12 <_malloc_r+0x7e>
 8006ef2:	600b      	str	r3, [r1, #0]
 8006ef4:	50cd      	str	r5, [r1, r3]
 8006ef6:	18cc      	adds	r4, r1, r3
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f000 fbd4 	bl	80076a6 <__malloc_unlock>
 8006efe:	f104 000b 	add.w	r0, r4, #11
 8006f02:	1d23      	adds	r3, r4, #4
 8006f04:	f020 0007 	bic.w	r0, r0, #7
 8006f08:	1ac3      	subs	r3, r0, r3
 8006f0a:	d0d3      	beq.n	8006eb4 <_malloc_r+0x20>
 8006f0c:	425a      	negs	r2, r3
 8006f0e:	50e2      	str	r2, [r4, r3]
 8006f10:	e7d0      	b.n	8006eb4 <_malloc_r+0x20>
 8006f12:	428c      	cmp	r4, r1
 8006f14:	684b      	ldr	r3, [r1, #4]
 8006f16:	bf16      	itet	ne
 8006f18:	6063      	strne	r3, [r4, #4]
 8006f1a:	6013      	streq	r3, [r2, #0]
 8006f1c:	460c      	movne	r4, r1
 8006f1e:	e7eb      	b.n	8006ef8 <_malloc_r+0x64>
 8006f20:	460c      	mov	r4, r1
 8006f22:	6849      	ldr	r1, [r1, #4]
 8006f24:	e7cc      	b.n	8006ec0 <_malloc_r+0x2c>
 8006f26:	1cc4      	adds	r4, r0, #3
 8006f28:	f024 0403 	bic.w	r4, r4, #3
 8006f2c:	42a0      	cmp	r0, r4
 8006f2e:	d005      	beq.n	8006f3c <_malloc_r+0xa8>
 8006f30:	1a21      	subs	r1, r4, r0
 8006f32:	4630      	mov	r0, r6
 8006f34:	f000 f948 	bl	80071c8 <_sbrk_r>
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d0cf      	beq.n	8006edc <_malloc_r+0x48>
 8006f3c:	6025      	str	r5, [r4, #0]
 8006f3e:	e7db      	b.n	8006ef8 <_malloc_r+0x64>
 8006f40:	20000208 	.word	0x20000208
 8006f44:	2000020c 	.word	0x2000020c

08006f48 <__sfputc_r>:
 8006f48:	6893      	ldr	r3, [r2, #8]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	b410      	push	{r4}
 8006f50:	6093      	str	r3, [r2, #8]
 8006f52:	da08      	bge.n	8006f66 <__sfputc_r+0x1e>
 8006f54:	6994      	ldr	r4, [r2, #24]
 8006f56:	42a3      	cmp	r3, r4
 8006f58:	db01      	blt.n	8006f5e <__sfputc_r+0x16>
 8006f5a:	290a      	cmp	r1, #10
 8006f5c:	d103      	bne.n	8006f66 <__sfputc_r+0x1e>
 8006f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f62:	f000 b985 	b.w	8007270 <__swbuf_r>
 8006f66:	6813      	ldr	r3, [r2, #0]
 8006f68:	1c58      	adds	r0, r3, #1
 8006f6a:	6010      	str	r0, [r2, #0]
 8006f6c:	7019      	strb	r1, [r3, #0]
 8006f6e:	4608      	mov	r0, r1
 8006f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <__sfputs_r>:
 8006f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f78:	4606      	mov	r6, r0
 8006f7a:	460f      	mov	r7, r1
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	18d5      	adds	r5, r2, r3
 8006f80:	42ac      	cmp	r4, r5
 8006f82:	d101      	bne.n	8006f88 <__sfputs_r+0x12>
 8006f84:	2000      	movs	r0, #0
 8006f86:	e007      	b.n	8006f98 <__sfputs_r+0x22>
 8006f88:	463a      	mov	r2, r7
 8006f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ffda 	bl	8006f48 <__sfputc_r>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d1f3      	bne.n	8006f80 <__sfputs_r+0xa>
 8006f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f9c <_vfiprintf_r>:
 8006f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	b09d      	sub	sp, #116	; 0x74
 8006fa4:	4617      	mov	r7, r2
 8006fa6:	461d      	mov	r5, r3
 8006fa8:	4606      	mov	r6, r0
 8006faa:	b118      	cbz	r0, 8006fb4 <_vfiprintf_r+0x18>
 8006fac:	6983      	ldr	r3, [r0, #24]
 8006fae:	b90b      	cbnz	r3, 8006fb4 <_vfiprintf_r+0x18>
 8006fb0:	f7ff fb8e 	bl	80066d0 <__sinit>
 8006fb4:	4b7c      	ldr	r3, [pc, #496]	; (80071a8 <_vfiprintf_r+0x20c>)
 8006fb6:	429c      	cmp	r4, r3
 8006fb8:	d158      	bne.n	800706c <_vfiprintf_r+0xd0>
 8006fba:	6874      	ldr	r4, [r6, #4]
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	0718      	lsls	r0, r3, #28
 8006fc0:	d55e      	bpl.n	8007080 <_vfiprintf_r+0xe4>
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d05b      	beq.n	8007080 <_vfiprintf_r+0xe4>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	9309      	str	r3, [sp, #36]	; 0x24
 8006fcc:	2320      	movs	r3, #32
 8006fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fd2:	2330      	movs	r3, #48	; 0x30
 8006fd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fd8:	9503      	str	r5, [sp, #12]
 8006fda:	f04f 0b01 	mov.w	fp, #1
 8006fde:	46b8      	mov	r8, r7
 8006fe0:	4645      	mov	r5, r8
 8006fe2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006fe6:	b10b      	cbz	r3, 8006fec <_vfiprintf_r+0x50>
 8006fe8:	2b25      	cmp	r3, #37	; 0x25
 8006fea:	d154      	bne.n	8007096 <_vfiprintf_r+0xfa>
 8006fec:	ebb8 0a07 	subs.w	sl, r8, r7
 8006ff0:	d00b      	beq.n	800700a <_vfiprintf_r+0x6e>
 8006ff2:	4653      	mov	r3, sl
 8006ff4:	463a      	mov	r2, r7
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f7ff ffbc 	bl	8006f76 <__sfputs_r>
 8006ffe:	3001      	adds	r0, #1
 8007000:	f000 80c2 	beq.w	8007188 <_vfiprintf_r+0x1ec>
 8007004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007006:	4453      	add	r3, sl
 8007008:	9309      	str	r3, [sp, #36]	; 0x24
 800700a:	f898 3000 	ldrb.w	r3, [r8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80ba 	beq.w	8007188 <_vfiprintf_r+0x1ec>
 8007014:	2300      	movs	r3, #0
 8007016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800701a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800701e:	9304      	str	r3, [sp, #16]
 8007020:	9307      	str	r3, [sp, #28]
 8007022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007026:	931a      	str	r3, [sp, #104]	; 0x68
 8007028:	46a8      	mov	r8, r5
 800702a:	2205      	movs	r2, #5
 800702c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007030:	485e      	ldr	r0, [pc, #376]	; (80071ac <_vfiprintf_r+0x210>)
 8007032:	f7f9 f8d5 	bl	80001e0 <memchr>
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	bb78      	cbnz	r0, 800709a <_vfiprintf_r+0xfe>
 800703a:	06d9      	lsls	r1, r3, #27
 800703c:	bf44      	itt	mi
 800703e:	2220      	movmi	r2, #32
 8007040:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007044:	071a      	lsls	r2, r3, #28
 8007046:	bf44      	itt	mi
 8007048:	222b      	movmi	r2, #43	; 0x2b
 800704a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800704e:	782a      	ldrb	r2, [r5, #0]
 8007050:	2a2a      	cmp	r2, #42	; 0x2a
 8007052:	d02a      	beq.n	80070aa <_vfiprintf_r+0x10e>
 8007054:	9a07      	ldr	r2, [sp, #28]
 8007056:	46a8      	mov	r8, r5
 8007058:	2000      	movs	r0, #0
 800705a:	250a      	movs	r5, #10
 800705c:	4641      	mov	r1, r8
 800705e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007062:	3b30      	subs	r3, #48	; 0x30
 8007064:	2b09      	cmp	r3, #9
 8007066:	d969      	bls.n	800713c <_vfiprintf_r+0x1a0>
 8007068:	b360      	cbz	r0, 80070c4 <_vfiprintf_r+0x128>
 800706a:	e024      	b.n	80070b6 <_vfiprintf_r+0x11a>
 800706c:	4b50      	ldr	r3, [pc, #320]	; (80071b0 <_vfiprintf_r+0x214>)
 800706e:	429c      	cmp	r4, r3
 8007070:	d101      	bne.n	8007076 <_vfiprintf_r+0xda>
 8007072:	68b4      	ldr	r4, [r6, #8]
 8007074:	e7a2      	b.n	8006fbc <_vfiprintf_r+0x20>
 8007076:	4b4f      	ldr	r3, [pc, #316]	; (80071b4 <_vfiprintf_r+0x218>)
 8007078:	429c      	cmp	r4, r3
 800707a:	bf08      	it	eq
 800707c:	68f4      	ldreq	r4, [r6, #12]
 800707e:	e79d      	b.n	8006fbc <_vfiprintf_r+0x20>
 8007080:	4621      	mov	r1, r4
 8007082:	4630      	mov	r0, r6
 8007084:	f000 f958 	bl	8007338 <__swsetup_r>
 8007088:	2800      	cmp	r0, #0
 800708a:	d09d      	beq.n	8006fc8 <_vfiprintf_r+0x2c>
 800708c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007090:	b01d      	add	sp, #116	; 0x74
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	46a8      	mov	r8, r5
 8007098:	e7a2      	b.n	8006fe0 <_vfiprintf_r+0x44>
 800709a:	4a44      	ldr	r2, [pc, #272]	; (80071ac <_vfiprintf_r+0x210>)
 800709c:	1a80      	subs	r0, r0, r2
 800709e:	fa0b f000 	lsl.w	r0, fp, r0
 80070a2:	4318      	orrs	r0, r3
 80070a4:	9004      	str	r0, [sp, #16]
 80070a6:	4645      	mov	r5, r8
 80070a8:	e7be      	b.n	8007028 <_vfiprintf_r+0x8c>
 80070aa:	9a03      	ldr	r2, [sp, #12]
 80070ac:	1d11      	adds	r1, r2, #4
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	9103      	str	r1, [sp, #12]
 80070b2:	2a00      	cmp	r2, #0
 80070b4:	db01      	blt.n	80070ba <_vfiprintf_r+0x11e>
 80070b6:	9207      	str	r2, [sp, #28]
 80070b8:	e004      	b.n	80070c4 <_vfiprintf_r+0x128>
 80070ba:	4252      	negs	r2, r2
 80070bc:	f043 0302 	orr.w	r3, r3, #2
 80070c0:	9207      	str	r2, [sp, #28]
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	f898 3000 	ldrb.w	r3, [r8]
 80070c8:	2b2e      	cmp	r3, #46	; 0x2e
 80070ca:	d10e      	bne.n	80070ea <_vfiprintf_r+0x14e>
 80070cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80070d0:	2b2a      	cmp	r3, #42	; 0x2a
 80070d2:	d138      	bne.n	8007146 <_vfiprintf_r+0x1aa>
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	1d1a      	adds	r2, r3, #4
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	9203      	str	r2, [sp, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	bfb8      	it	lt
 80070e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070e4:	f108 0802 	add.w	r8, r8, #2
 80070e8:	9305      	str	r3, [sp, #20]
 80070ea:	4d33      	ldr	r5, [pc, #204]	; (80071b8 <_vfiprintf_r+0x21c>)
 80070ec:	f898 1000 	ldrb.w	r1, [r8]
 80070f0:	2203      	movs	r2, #3
 80070f2:	4628      	mov	r0, r5
 80070f4:	f7f9 f874 	bl	80001e0 <memchr>
 80070f8:	b140      	cbz	r0, 800710c <_vfiprintf_r+0x170>
 80070fa:	2340      	movs	r3, #64	; 0x40
 80070fc:	1b40      	subs	r0, r0, r5
 80070fe:	fa03 f000 	lsl.w	r0, r3, r0
 8007102:	9b04      	ldr	r3, [sp, #16]
 8007104:	4303      	orrs	r3, r0
 8007106:	f108 0801 	add.w	r8, r8, #1
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	f898 1000 	ldrb.w	r1, [r8]
 8007110:	482a      	ldr	r0, [pc, #168]	; (80071bc <_vfiprintf_r+0x220>)
 8007112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007116:	2206      	movs	r2, #6
 8007118:	f108 0701 	add.w	r7, r8, #1
 800711c:	f7f9 f860 	bl	80001e0 <memchr>
 8007120:	2800      	cmp	r0, #0
 8007122:	d037      	beq.n	8007194 <_vfiprintf_r+0x1f8>
 8007124:	4b26      	ldr	r3, [pc, #152]	; (80071c0 <_vfiprintf_r+0x224>)
 8007126:	bb1b      	cbnz	r3, 8007170 <_vfiprintf_r+0x1d4>
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	3307      	adds	r3, #7
 800712c:	f023 0307 	bic.w	r3, r3, #7
 8007130:	3308      	adds	r3, #8
 8007132:	9303      	str	r3, [sp, #12]
 8007134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007136:	444b      	add	r3, r9
 8007138:	9309      	str	r3, [sp, #36]	; 0x24
 800713a:	e750      	b.n	8006fde <_vfiprintf_r+0x42>
 800713c:	fb05 3202 	mla	r2, r5, r2, r3
 8007140:	2001      	movs	r0, #1
 8007142:	4688      	mov	r8, r1
 8007144:	e78a      	b.n	800705c <_vfiprintf_r+0xc0>
 8007146:	2300      	movs	r3, #0
 8007148:	f108 0801 	add.w	r8, r8, #1
 800714c:	9305      	str	r3, [sp, #20]
 800714e:	4619      	mov	r1, r3
 8007150:	250a      	movs	r5, #10
 8007152:	4640      	mov	r0, r8
 8007154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007158:	3a30      	subs	r2, #48	; 0x30
 800715a:	2a09      	cmp	r2, #9
 800715c:	d903      	bls.n	8007166 <_vfiprintf_r+0x1ca>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0c3      	beq.n	80070ea <_vfiprintf_r+0x14e>
 8007162:	9105      	str	r1, [sp, #20]
 8007164:	e7c1      	b.n	80070ea <_vfiprintf_r+0x14e>
 8007166:	fb05 2101 	mla	r1, r5, r1, r2
 800716a:	2301      	movs	r3, #1
 800716c:	4680      	mov	r8, r0
 800716e:	e7f0      	b.n	8007152 <_vfiprintf_r+0x1b6>
 8007170:	ab03      	add	r3, sp, #12
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	4622      	mov	r2, r4
 8007176:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <_vfiprintf_r+0x228>)
 8007178:	a904      	add	r1, sp, #16
 800717a:	4630      	mov	r0, r6
 800717c:	f7fe f844 	bl	8005208 <_printf_float>
 8007180:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007184:	4681      	mov	r9, r0
 8007186:	d1d5      	bne.n	8007134 <_vfiprintf_r+0x198>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	065b      	lsls	r3, r3, #25
 800718c:	f53f af7e 	bmi.w	800708c <_vfiprintf_r+0xf0>
 8007190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007192:	e77d      	b.n	8007090 <_vfiprintf_r+0xf4>
 8007194:	ab03      	add	r3, sp, #12
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	4622      	mov	r2, r4
 800719a:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <_vfiprintf_r+0x228>)
 800719c:	a904      	add	r1, sp, #16
 800719e:	4630      	mov	r0, r6
 80071a0:	f7fe fae8 	bl	8005774 <_printf_i>
 80071a4:	e7ec      	b.n	8007180 <_vfiprintf_r+0x1e4>
 80071a6:	bf00      	nop
 80071a8:	08007d50 	.word	0x08007d50
 80071ac:	08007e8c 	.word	0x08007e8c
 80071b0:	08007d70 	.word	0x08007d70
 80071b4:	08007d30 	.word	0x08007d30
 80071b8:	08007e92 	.word	0x08007e92
 80071bc:	08007e96 	.word	0x08007e96
 80071c0:	08005209 	.word	0x08005209
 80071c4:	08006f77 	.word	0x08006f77

080071c8 <_sbrk_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4c06      	ldr	r4, [pc, #24]	; (80071e4 <_sbrk_r+0x1c>)
 80071cc:	2300      	movs	r3, #0
 80071ce:	4605      	mov	r5, r0
 80071d0:	4608      	mov	r0, r1
 80071d2:	6023      	str	r3, [r4, #0]
 80071d4:	f7fa f95e 	bl	8001494 <_sbrk>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_sbrk_r+0x1a>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_sbrk_r+0x1a>
 80071e0:	602b      	str	r3, [r5, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	20000458 	.word	0x20000458

080071e8 <__sread>:
 80071e8:	b510      	push	{r4, lr}
 80071ea:	460c      	mov	r4, r1
 80071ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f0:	f000 fa5a 	bl	80076a8 <_read_r>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	bfab      	itete	ge
 80071f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071fa:	89a3      	ldrhlt	r3, [r4, #12]
 80071fc:	181b      	addge	r3, r3, r0
 80071fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007202:	bfac      	ite	ge
 8007204:	6563      	strge	r3, [r4, #84]	; 0x54
 8007206:	81a3      	strhlt	r3, [r4, #12]
 8007208:	bd10      	pop	{r4, pc}

0800720a <__swrite>:
 800720a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720e:	461f      	mov	r7, r3
 8007210:	898b      	ldrh	r3, [r1, #12]
 8007212:	05db      	lsls	r3, r3, #23
 8007214:	4605      	mov	r5, r0
 8007216:	460c      	mov	r4, r1
 8007218:	4616      	mov	r6, r2
 800721a:	d505      	bpl.n	8007228 <__swrite+0x1e>
 800721c:	2302      	movs	r3, #2
 800721e:	2200      	movs	r2, #0
 8007220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007224:	f000 f9b6 	bl	8007594 <_lseek_r>
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800722e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	4632      	mov	r2, r6
 8007236:	463b      	mov	r3, r7
 8007238:	4628      	mov	r0, r5
 800723a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800723e:	f000 b869 	b.w	8007314 <_write_r>

08007242 <__sseek>:
 8007242:	b510      	push	{r4, lr}
 8007244:	460c      	mov	r4, r1
 8007246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724a:	f000 f9a3 	bl	8007594 <_lseek_r>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	bf15      	itete	ne
 8007254:	6560      	strne	r0, [r4, #84]	; 0x54
 8007256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800725a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800725e:	81a3      	strheq	r3, [r4, #12]
 8007260:	bf18      	it	ne
 8007262:	81a3      	strhne	r3, [r4, #12]
 8007264:	bd10      	pop	{r4, pc}

08007266 <__sclose>:
 8007266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726a:	f000 b8d3 	b.w	8007414 <_close_r>
	...

08007270 <__swbuf_r>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	460e      	mov	r6, r1
 8007274:	4614      	mov	r4, r2
 8007276:	4605      	mov	r5, r0
 8007278:	b118      	cbz	r0, 8007282 <__swbuf_r+0x12>
 800727a:	6983      	ldr	r3, [r0, #24]
 800727c:	b90b      	cbnz	r3, 8007282 <__swbuf_r+0x12>
 800727e:	f7ff fa27 	bl	80066d0 <__sinit>
 8007282:	4b21      	ldr	r3, [pc, #132]	; (8007308 <__swbuf_r+0x98>)
 8007284:	429c      	cmp	r4, r3
 8007286:	d12a      	bne.n	80072de <__swbuf_r+0x6e>
 8007288:	686c      	ldr	r4, [r5, #4]
 800728a:	69a3      	ldr	r3, [r4, #24]
 800728c:	60a3      	str	r3, [r4, #8]
 800728e:	89a3      	ldrh	r3, [r4, #12]
 8007290:	071a      	lsls	r2, r3, #28
 8007292:	d52e      	bpl.n	80072f2 <__swbuf_r+0x82>
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	b363      	cbz	r3, 80072f2 <__swbuf_r+0x82>
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	6820      	ldr	r0, [r4, #0]
 800729c:	1ac0      	subs	r0, r0, r3
 800729e:	6963      	ldr	r3, [r4, #20]
 80072a0:	b2f6      	uxtb	r6, r6
 80072a2:	4283      	cmp	r3, r0
 80072a4:	4637      	mov	r7, r6
 80072a6:	dc04      	bgt.n	80072b2 <__swbuf_r+0x42>
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 f948 	bl	8007540 <_fflush_r>
 80072b0:	bb28      	cbnz	r0, 80072fe <__swbuf_r+0x8e>
 80072b2:	68a3      	ldr	r3, [r4, #8]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	60a3      	str	r3, [r4, #8]
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	6022      	str	r2, [r4, #0]
 80072be:	701e      	strb	r6, [r3, #0]
 80072c0:	6963      	ldr	r3, [r4, #20]
 80072c2:	3001      	adds	r0, #1
 80072c4:	4283      	cmp	r3, r0
 80072c6:	d004      	beq.n	80072d2 <__swbuf_r+0x62>
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	07db      	lsls	r3, r3, #31
 80072cc:	d519      	bpl.n	8007302 <__swbuf_r+0x92>
 80072ce:	2e0a      	cmp	r6, #10
 80072d0:	d117      	bne.n	8007302 <__swbuf_r+0x92>
 80072d2:	4621      	mov	r1, r4
 80072d4:	4628      	mov	r0, r5
 80072d6:	f000 f933 	bl	8007540 <_fflush_r>
 80072da:	b190      	cbz	r0, 8007302 <__swbuf_r+0x92>
 80072dc:	e00f      	b.n	80072fe <__swbuf_r+0x8e>
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <__swbuf_r+0x9c>)
 80072e0:	429c      	cmp	r4, r3
 80072e2:	d101      	bne.n	80072e8 <__swbuf_r+0x78>
 80072e4:	68ac      	ldr	r4, [r5, #8]
 80072e6:	e7d0      	b.n	800728a <__swbuf_r+0x1a>
 80072e8:	4b09      	ldr	r3, [pc, #36]	; (8007310 <__swbuf_r+0xa0>)
 80072ea:	429c      	cmp	r4, r3
 80072ec:	bf08      	it	eq
 80072ee:	68ec      	ldreq	r4, [r5, #12]
 80072f0:	e7cb      	b.n	800728a <__swbuf_r+0x1a>
 80072f2:	4621      	mov	r1, r4
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 f81f 	bl	8007338 <__swsetup_r>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d0cc      	beq.n	8007298 <__swbuf_r+0x28>
 80072fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007302:	4638      	mov	r0, r7
 8007304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007306:	bf00      	nop
 8007308:	08007d50 	.word	0x08007d50
 800730c:	08007d70 	.word	0x08007d70
 8007310:	08007d30 	.word	0x08007d30

08007314 <_write_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4c07      	ldr	r4, [pc, #28]	; (8007334 <_write_r+0x20>)
 8007318:	4605      	mov	r5, r0
 800731a:	4608      	mov	r0, r1
 800731c:	4611      	mov	r1, r2
 800731e:	2200      	movs	r2, #0
 8007320:	6022      	str	r2, [r4, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	f000 fab3 	bl	800788e <_write>
 8007328:	1c43      	adds	r3, r0, #1
 800732a:	d102      	bne.n	8007332 <_write_r+0x1e>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	b103      	cbz	r3, 8007332 <_write_r+0x1e>
 8007330:	602b      	str	r3, [r5, #0]
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	20000458 	.word	0x20000458

08007338 <__swsetup_r>:
 8007338:	4b32      	ldr	r3, [pc, #200]	; (8007404 <__swsetup_r+0xcc>)
 800733a:	b570      	push	{r4, r5, r6, lr}
 800733c:	681d      	ldr	r5, [r3, #0]
 800733e:	4606      	mov	r6, r0
 8007340:	460c      	mov	r4, r1
 8007342:	b125      	cbz	r5, 800734e <__swsetup_r+0x16>
 8007344:	69ab      	ldr	r3, [r5, #24]
 8007346:	b913      	cbnz	r3, 800734e <__swsetup_r+0x16>
 8007348:	4628      	mov	r0, r5
 800734a:	f7ff f9c1 	bl	80066d0 <__sinit>
 800734e:	4b2e      	ldr	r3, [pc, #184]	; (8007408 <__swsetup_r+0xd0>)
 8007350:	429c      	cmp	r4, r3
 8007352:	d10f      	bne.n	8007374 <__swsetup_r+0x3c>
 8007354:	686c      	ldr	r4, [r5, #4]
 8007356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800735a:	b29a      	uxth	r2, r3
 800735c:	0715      	lsls	r5, r2, #28
 800735e:	d42c      	bmi.n	80073ba <__swsetup_r+0x82>
 8007360:	06d0      	lsls	r0, r2, #27
 8007362:	d411      	bmi.n	8007388 <__swsetup_r+0x50>
 8007364:	2209      	movs	r2, #9
 8007366:	6032      	str	r2, [r6, #0]
 8007368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800736c:	81a3      	strh	r3, [r4, #12]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007372:	e03e      	b.n	80073f2 <__swsetup_r+0xba>
 8007374:	4b25      	ldr	r3, [pc, #148]	; (800740c <__swsetup_r+0xd4>)
 8007376:	429c      	cmp	r4, r3
 8007378:	d101      	bne.n	800737e <__swsetup_r+0x46>
 800737a:	68ac      	ldr	r4, [r5, #8]
 800737c:	e7eb      	b.n	8007356 <__swsetup_r+0x1e>
 800737e:	4b24      	ldr	r3, [pc, #144]	; (8007410 <__swsetup_r+0xd8>)
 8007380:	429c      	cmp	r4, r3
 8007382:	bf08      	it	eq
 8007384:	68ec      	ldreq	r4, [r5, #12]
 8007386:	e7e6      	b.n	8007356 <__swsetup_r+0x1e>
 8007388:	0751      	lsls	r1, r2, #29
 800738a:	d512      	bpl.n	80073b2 <__swsetup_r+0x7a>
 800738c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800738e:	b141      	cbz	r1, 80073a2 <__swsetup_r+0x6a>
 8007390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007394:	4299      	cmp	r1, r3
 8007396:	d002      	beq.n	800739e <__swsetup_r+0x66>
 8007398:	4630      	mov	r0, r6
 800739a:	f7ff fd2d 	bl	8006df8 <_free_r>
 800739e:	2300      	movs	r3, #0
 80073a0:	6363      	str	r3, [r4, #52]	; 0x34
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073a8:	81a3      	strh	r3, [r4, #12]
 80073aa:	2300      	movs	r3, #0
 80073ac:	6063      	str	r3, [r4, #4]
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f043 0308 	orr.w	r3, r3, #8
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	b94b      	cbnz	r3, 80073d2 <__swsetup_r+0x9a>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c8:	d003      	beq.n	80073d2 <__swsetup_r+0x9a>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4630      	mov	r0, r6
 80073ce:	f000 f917 	bl	8007600 <__smakebuf_r>
 80073d2:	89a2      	ldrh	r2, [r4, #12]
 80073d4:	f012 0301 	ands.w	r3, r2, #1
 80073d8:	d00c      	beq.n	80073f4 <__swsetup_r+0xbc>
 80073da:	2300      	movs	r3, #0
 80073dc:	60a3      	str	r3, [r4, #8]
 80073de:	6963      	ldr	r3, [r4, #20]
 80073e0:	425b      	negs	r3, r3
 80073e2:	61a3      	str	r3, [r4, #24]
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	b953      	cbnz	r3, 80073fe <__swsetup_r+0xc6>
 80073e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80073f0:	d1ba      	bne.n	8007368 <__swsetup_r+0x30>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	0792      	lsls	r2, r2, #30
 80073f6:	bf58      	it	pl
 80073f8:	6963      	ldrpl	r3, [r4, #20]
 80073fa:	60a3      	str	r3, [r4, #8]
 80073fc:	e7f2      	b.n	80073e4 <__swsetup_r+0xac>
 80073fe:	2000      	movs	r0, #0
 8007400:	e7f7      	b.n	80073f2 <__swsetup_r+0xba>
 8007402:	bf00      	nop
 8007404:	2000000c 	.word	0x2000000c
 8007408:	08007d50 	.word	0x08007d50
 800740c:	08007d70 	.word	0x08007d70
 8007410:	08007d30 	.word	0x08007d30

08007414 <_close_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4c06      	ldr	r4, [pc, #24]	; (8007430 <_close_r+0x1c>)
 8007418:	2300      	movs	r3, #0
 800741a:	4605      	mov	r5, r0
 800741c:	4608      	mov	r0, r1
 800741e:	6023      	str	r3, [r4, #0]
 8007420:	f000 fa64 	bl	80078ec <_close>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	d102      	bne.n	800742e <_close_r+0x1a>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	b103      	cbz	r3, 800742e <_close_r+0x1a>
 800742c:	602b      	str	r3, [r5, #0]
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	20000458 	.word	0x20000458

08007434 <__sflush_r>:
 8007434:	898a      	ldrh	r2, [r1, #12]
 8007436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743a:	4605      	mov	r5, r0
 800743c:	0710      	lsls	r0, r2, #28
 800743e:	460c      	mov	r4, r1
 8007440:	d458      	bmi.n	80074f4 <__sflush_r+0xc0>
 8007442:	684b      	ldr	r3, [r1, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	dc05      	bgt.n	8007454 <__sflush_r+0x20>
 8007448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	dc02      	bgt.n	8007454 <__sflush_r+0x20>
 800744e:	2000      	movs	r0, #0
 8007450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007456:	2e00      	cmp	r6, #0
 8007458:	d0f9      	beq.n	800744e <__sflush_r+0x1a>
 800745a:	2300      	movs	r3, #0
 800745c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007460:	682f      	ldr	r7, [r5, #0]
 8007462:	6a21      	ldr	r1, [r4, #32]
 8007464:	602b      	str	r3, [r5, #0]
 8007466:	d032      	beq.n	80074ce <__sflush_r+0x9a>
 8007468:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	075a      	lsls	r2, r3, #29
 800746e:	d505      	bpl.n	800747c <__sflush_r+0x48>
 8007470:	6863      	ldr	r3, [r4, #4]
 8007472:	1ac0      	subs	r0, r0, r3
 8007474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007476:	b10b      	cbz	r3, 800747c <__sflush_r+0x48>
 8007478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800747a:	1ac0      	subs	r0, r0, r3
 800747c:	2300      	movs	r3, #0
 800747e:	4602      	mov	r2, r0
 8007480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007482:	6a21      	ldr	r1, [r4, #32]
 8007484:	4628      	mov	r0, r5
 8007486:	47b0      	blx	r6
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	d106      	bne.n	800749c <__sflush_r+0x68>
 800748e:	6829      	ldr	r1, [r5, #0]
 8007490:	291d      	cmp	r1, #29
 8007492:	d848      	bhi.n	8007526 <__sflush_r+0xf2>
 8007494:	4a29      	ldr	r2, [pc, #164]	; (800753c <__sflush_r+0x108>)
 8007496:	40ca      	lsrs	r2, r1
 8007498:	07d6      	lsls	r6, r2, #31
 800749a:	d544      	bpl.n	8007526 <__sflush_r+0xf2>
 800749c:	2200      	movs	r2, #0
 800749e:	6062      	str	r2, [r4, #4]
 80074a0:	04d9      	lsls	r1, r3, #19
 80074a2:	6922      	ldr	r2, [r4, #16]
 80074a4:	6022      	str	r2, [r4, #0]
 80074a6:	d504      	bpl.n	80074b2 <__sflush_r+0x7e>
 80074a8:	1c42      	adds	r2, r0, #1
 80074aa:	d101      	bne.n	80074b0 <__sflush_r+0x7c>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	b903      	cbnz	r3, 80074b2 <__sflush_r+0x7e>
 80074b0:	6560      	str	r0, [r4, #84]	; 0x54
 80074b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074b4:	602f      	str	r7, [r5, #0]
 80074b6:	2900      	cmp	r1, #0
 80074b8:	d0c9      	beq.n	800744e <__sflush_r+0x1a>
 80074ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074be:	4299      	cmp	r1, r3
 80074c0:	d002      	beq.n	80074c8 <__sflush_r+0x94>
 80074c2:	4628      	mov	r0, r5
 80074c4:	f7ff fc98 	bl	8006df8 <_free_r>
 80074c8:	2000      	movs	r0, #0
 80074ca:	6360      	str	r0, [r4, #52]	; 0x34
 80074cc:	e7c0      	b.n	8007450 <__sflush_r+0x1c>
 80074ce:	2301      	movs	r3, #1
 80074d0:	4628      	mov	r0, r5
 80074d2:	47b0      	blx	r6
 80074d4:	1c41      	adds	r1, r0, #1
 80074d6:	d1c8      	bne.n	800746a <__sflush_r+0x36>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0c5      	beq.n	800746a <__sflush_r+0x36>
 80074de:	2b1d      	cmp	r3, #29
 80074e0:	d001      	beq.n	80074e6 <__sflush_r+0xb2>
 80074e2:	2b16      	cmp	r3, #22
 80074e4:	d101      	bne.n	80074ea <__sflush_r+0xb6>
 80074e6:	602f      	str	r7, [r5, #0]
 80074e8:	e7b1      	b.n	800744e <__sflush_r+0x1a>
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f0:	81a3      	strh	r3, [r4, #12]
 80074f2:	e7ad      	b.n	8007450 <__sflush_r+0x1c>
 80074f4:	690f      	ldr	r7, [r1, #16]
 80074f6:	2f00      	cmp	r7, #0
 80074f8:	d0a9      	beq.n	800744e <__sflush_r+0x1a>
 80074fa:	0793      	lsls	r3, r2, #30
 80074fc:	680e      	ldr	r6, [r1, #0]
 80074fe:	bf08      	it	eq
 8007500:	694b      	ldreq	r3, [r1, #20]
 8007502:	600f      	str	r7, [r1, #0]
 8007504:	bf18      	it	ne
 8007506:	2300      	movne	r3, #0
 8007508:	eba6 0807 	sub.w	r8, r6, r7
 800750c:	608b      	str	r3, [r1, #8]
 800750e:	f1b8 0f00 	cmp.w	r8, #0
 8007512:	dd9c      	ble.n	800744e <__sflush_r+0x1a>
 8007514:	4643      	mov	r3, r8
 8007516:	463a      	mov	r2, r7
 8007518:	6a21      	ldr	r1, [r4, #32]
 800751a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800751c:	4628      	mov	r0, r5
 800751e:	47b0      	blx	r6
 8007520:	2800      	cmp	r0, #0
 8007522:	dc06      	bgt.n	8007532 <__sflush_r+0xfe>
 8007524:	89a3      	ldrh	r3, [r4, #12]
 8007526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007530:	e78e      	b.n	8007450 <__sflush_r+0x1c>
 8007532:	4407      	add	r7, r0
 8007534:	eba8 0800 	sub.w	r8, r8, r0
 8007538:	e7e9      	b.n	800750e <__sflush_r+0xda>
 800753a:	bf00      	nop
 800753c:	20400001 	.word	0x20400001

08007540 <_fflush_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	690b      	ldr	r3, [r1, #16]
 8007544:	4605      	mov	r5, r0
 8007546:	460c      	mov	r4, r1
 8007548:	b1db      	cbz	r3, 8007582 <_fflush_r+0x42>
 800754a:	b118      	cbz	r0, 8007554 <_fflush_r+0x14>
 800754c:	6983      	ldr	r3, [r0, #24]
 800754e:	b90b      	cbnz	r3, 8007554 <_fflush_r+0x14>
 8007550:	f7ff f8be 	bl	80066d0 <__sinit>
 8007554:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <_fflush_r+0x48>)
 8007556:	429c      	cmp	r4, r3
 8007558:	d109      	bne.n	800756e <_fflush_r+0x2e>
 800755a:	686c      	ldr	r4, [r5, #4]
 800755c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007560:	b17b      	cbz	r3, 8007582 <_fflush_r+0x42>
 8007562:	4621      	mov	r1, r4
 8007564:	4628      	mov	r0, r5
 8007566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800756a:	f7ff bf63 	b.w	8007434 <__sflush_r>
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <_fflush_r+0x4c>)
 8007570:	429c      	cmp	r4, r3
 8007572:	d101      	bne.n	8007578 <_fflush_r+0x38>
 8007574:	68ac      	ldr	r4, [r5, #8]
 8007576:	e7f1      	b.n	800755c <_fflush_r+0x1c>
 8007578:	4b05      	ldr	r3, [pc, #20]	; (8007590 <_fflush_r+0x50>)
 800757a:	429c      	cmp	r4, r3
 800757c:	bf08      	it	eq
 800757e:	68ec      	ldreq	r4, [r5, #12]
 8007580:	e7ec      	b.n	800755c <_fflush_r+0x1c>
 8007582:	2000      	movs	r0, #0
 8007584:	bd38      	pop	{r3, r4, r5, pc}
 8007586:	bf00      	nop
 8007588:	08007d50 	.word	0x08007d50
 800758c:	08007d70 	.word	0x08007d70
 8007590:	08007d30 	.word	0x08007d30

08007594 <_lseek_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4c07      	ldr	r4, [pc, #28]	; (80075b4 <_lseek_r+0x20>)
 8007598:	4605      	mov	r5, r0
 800759a:	4608      	mov	r0, r1
 800759c:	4611      	mov	r1, r2
 800759e:	2200      	movs	r2, #0
 80075a0:	6022      	str	r2, [r4, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	f000 f961 	bl	800786a <_lseek>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_lseek_r+0x1e>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_lseek_r+0x1e>
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	20000458 	.word	0x20000458

080075b8 <__swhatbuf_r>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	460e      	mov	r6, r1
 80075bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c0:	2900      	cmp	r1, #0
 80075c2:	b096      	sub	sp, #88	; 0x58
 80075c4:	4614      	mov	r4, r2
 80075c6:	461d      	mov	r5, r3
 80075c8:	da07      	bge.n	80075da <__swhatbuf_r+0x22>
 80075ca:	2300      	movs	r3, #0
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	89b3      	ldrh	r3, [r6, #12]
 80075d0:	061a      	lsls	r2, r3, #24
 80075d2:	d410      	bmi.n	80075f6 <__swhatbuf_r+0x3e>
 80075d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075d8:	e00e      	b.n	80075f8 <__swhatbuf_r+0x40>
 80075da:	466a      	mov	r2, sp
 80075dc:	f000 f884 	bl	80076e8 <_fstat_r>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	dbf2      	blt.n	80075ca <__swhatbuf_r+0x12>
 80075e4:	9a01      	ldr	r2, [sp, #4]
 80075e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075ee:	425a      	negs	r2, r3
 80075f0:	415a      	adcs	r2, r3
 80075f2:	602a      	str	r2, [r5, #0]
 80075f4:	e7ee      	b.n	80075d4 <__swhatbuf_r+0x1c>
 80075f6:	2340      	movs	r3, #64	; 0x40
 80075f8:	2000      	movs	r0, #0
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	b016      	add	sp, #88	; 0x58
 80075fe:	bd70      	pop	{r4, r5, r6, pc}

08007600 <__smakebuf_r>:
 8007600:	898b      	ldrh	r3, [r1, #12]
 8007602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007604:	079d      	lsls	r5, r3, #30
 8007606:	4606      	mov	r6, r0
 8007608:	460c      	mov	r4, r1
 800760a:	d507      	bpl.n	800761c <__smakebuf_r+0x1c>
 800760c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	6123      	str	r3, [r4, #16]
 8007614:	2301      	movs	r3, #1
 8007616:	6163      	str	r3, [r4, #20]
 8007618:	b002      	add	sp, #8
 800761a:	bd70      	pop	{r4, r5, r6, pc}
 800761c:	ab01      	add	r3, sp, #4
 800761e:	466a      	mov	r2, sp
 8007620:	f7ff ffca 	bl	80075b8 <__swhatbuf_r>
 8007624:	9900      	ldr	r1, [sp, #0]
 8007626:	4605      	mov	r5, r0
 8007628:	4630      	mov	r0, r6
 800762a:	f7ff fc33 	bl	8006e94 <_malloc_r>
 800762e:	b948      	cbnz	r0, 8007644 <__smakebuf_r+0x44>
 8007630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007634:	059a      	lsls	r2, r3, #22
 8007636:	d4ef      	bmi.n	8007618 <__smakebuf_r+0x18>
 8007638:	f023 0303 	bic.w	r3, r3, #3
 800763c:	f043 0302 	orr.w	r3, r3, #2
 8007640:	81a3      	strh	r3, [r4, #12]
 8007642:	e7e3      	b.n	800760c <__smakebuf_r+0xc>
 8007644:	4b0d      	ldr	r3, [pc, #52]	; (800767c <__smakebuf_r+0x7c>)
 8007646:	62b3      	str	r3, [r6, #40]	; 0x28
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	6020      	str	r0, [r4, #0]
 800764c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007650:	81a3      	strh	r3, [r4, #12]
 8007652:	9b00      	ldr	r3, [sp, #0]
 8007654:	6163      	str	r3, [r4, #20]
 8007656:	9b01      	ldr	r3, [sp, #4]
 8007658:	6120      	str	r0, [r4, #16]
 800765a:	b15b      	cbz	r3, 8007674 <__smakebuf_r+0x74>
 800765c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007660:	4630      	mov	r0, r6
 8007662:	f000 f853 	bl	800770c <_isatty_r>
 8007666:	b128      	cbz	r0, 8007674 <__smakebuf_r+0x74>
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	f023 0303 	bic.w	r3, r3, #3
 800766e:	f043 0301 	orr.w	r3, r3, #1
 8007672:	81a3      	strh	r3, [r4, #12]
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	431d      	orrs	r5, r3
 8007678:	81a5      	strh	r5, [r4, #12]
 800767a:	e7cd      	b.n	8007618 <__smakebuf_r+0x18>
 800767c:	08006699 	.word	0x08006699

08007680 <__ascii_mbtowc>:
 8007680:	b082      	sub	sp, #8
 8007682:	b901      	cbnz	r1, 8007686 <__ascii_mbtowc+0x6>
 8007684:	a901      	add	r1, sp, #4
 8007686:	b142      	cbz	r2, 800769a <__ascii_mbtowc+0x1a>
 8007688:	b14b      	cbz	r3, 800769e <__ascii_mbtowc+0x1e>
 800768a:	7813      	ldrb	r3, [r2, #0]
 800768c:	600b      	str	r3, [r1, #0]
 800768e:	7812      	ldrb	r2, [r2, #0]
 8007690:	1c10      	adds	r0, r2, #0
 8007692:	bf18      	it	ne
 8007694:	2001      	movne	r0, #1
 8007696:	b002      	add	sp, #8
 8007698:	4770      	bx	lr
 800769a:	4610      	mov	r0, r2
 800769c:	e7fb      	b.n	8007696 <__ascii_mbtowc+0x16>
 800769e:	f06f 0001 	mvn.w	r0, #1
 80076a2:	e7f8      	b.n	8007696 <__ascii_mbtowc+0x16>

080076a4 <__malloc_lock>:
 80076a4:	4770      	bx	lr

080076a6 <__malloc_unlock>:
 80076a6:	4770      	bx	lr

080076a8 <_read_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4c07      	ldr	r4, [pc, #28]	; (80076c8 <_read_r+0x20>)
 80076ac:	4605      	mov	r5, r0
 80076ae:	4608      	mov	r0, r1
 80076b0:	4611      	mov	r1, r2
 80076b2:	2200      	movs	r2, #0
 80076b4:	6022      	str	r2, [r4, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f000 f880 	bl	80077bc <_read>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_read_r+0x1e>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_read_r+0x1e>
 80076c4:	602b      	str	r3, [r5, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20000458 	.word	0x20000458

080076cc <__ascii_wctomb>:
 80076cc:	b149      	cbz	r1, 80076e2 <__ascii_wctomb+0x16>
 80076ce:	2aff      	cmp	r2, #255	; 0xff
 80076d0:	bf85      	ittet	hi
 80076d2:	238a      	movhi	r3, #138	; 0x8a
 80076d4:	6003      	strhi	r3, [r0, #0]
 80076d6:	700a      	strbls	r2, [r1, #0]
 80076d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80076dc:	bf98      	it	ls
 80076de:	2001      	movls	r0, #1
 80076e0:	4770      	bx	lr
 80076e2:	4608      	mov	r0, r1
 80076e4:	4770      	bx	lr
	...

080076e8 <_fstat_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4c07      	ldr	r4, [pc, #28]	; (8007708 <_fstat_r+0x20>)
 80076ec:	2300      	movs	r3, #0
 80076ee:	4605      	mov	r5, r0
 80076f0:	4608      	mov	r0, r1
 80076f2:	4611      	mov	r1, r2
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	f000 f940 	bl	800797a <_fstat>
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	d102      	bne.n	8007704 <_fstat_r+0x1c>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	b103      	cbz	r3, 8007704 <_fstat_r+0x1c>
 8007702:	602b      	str	r3, [r5, #0]
 8007704:	bd38      	pop	{r3, r4, r5, pc}
 8007706:	bf00      	nop
 8007708:	20000458 	.word	0x20000458

0800770c <_isatty_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	4c06      	ldr	r4, [pc, #24]	; (8007728 <_isatty_r+0x1c>)
 8007710:	2300      	movs	r3, #0
 8007712:	4605      	mov	r5, r0
 8007714:	4608      	mov	r0, r1
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	f000 fa94 	bl	8007c44 <_isatty>
 800771c:	1c43      	adds	r3, r0, #1
 800771e:	d102      	bne.n	8007726 <_isatty_r+0x1a>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	b103      	cbz	r3, 8007726 <_isatty_r+0x1a>
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	20000458 	.word	0x20000458

0800772c <findslot>:
 800772c:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <findslot+0x2c>)
 800772e:	b510      	push	{r4, lr}
 8007730:	4604      	mov	r4, r0
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	b118      	cbz	r0, 800773e <findslot+0x12>
 8007736:	6983      	ldr	r3, [r0, #24]
 8007738:	b90b      	cbnz	r3, 800773e <findslot+0x12>
 800773a:	f7fe ffc9 	bl	80066d0 <__sinit>
 800773e:	2c13      	cmp	r4, #19
 8007740:	d807      	bhi.n	8007752 <findslot+0x26>
 8007742:	4806      	ldr	r0, [pc, #24]	; (800775c <findslot+0x30>)
 8007744:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8007748:	3301      	adds	r3, #1
 800774a:	d002      	beq.n	8007752 <findslot+0x26>
 800774c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007750:	bd10      	pop	{r4, pc}
 8007752:	2000      	movs	r0, #0
 8007754:	e7fc      	b.n	8007750 <findslot+0x24>
 8007756:	bf00      	nop
 8007758:	2000000c 	.word	0x2000000c
 800775c:	2000021c 	.word	0x2000021c

08007760 <checkerror>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	4605      	mov	r5, r0
 8007766:	d109      	bne.n	800777c <checkerror+0x1c>
 8007768:	f7fd fc88 	bl	800507c <__errno>
 800776c:	2413      	movs	r4, #19
 800776e:	4606      	mov	r6, r0
 8007770:	2700      	movs	r7, #0
 8007772:	4620      	mov	r0, r4
 8007774:	4639      	mov	r1, r7
 8007776:	beab      	bkpt	0x00ab
 8007778:	4604      	mov	r4, r0
 800777a:	6034      	str	r4, [r6, #0]
 800777c:	4628      	mov	r0, r5
 800777e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007780 <error>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	4605      	mov	r5, r0
 8007784:	f7fd fc7a 	bl	800507c <__errno>
 8007788:	2413      	movs	r4, #19
 800778a:	4606      	mov	r6, r0
 800778c:	2700      	movs	r7, #0
 800778e:	4620      	mov	r0, r4
 8007790:	4639      	mov	r1, r7
 8007792:	beab      	bkpt	0x00ab
 8007794:	4604      	mov	r4, r0
 8007796:	6034      	str	r4, [r6, #0]
 8007798:	4628      	mov	r0, r5
 800779a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800779c <_swiread>:
 800779c:	b530      	push	{r4, r5, lr}
 800779e:	b085      	sub	sp, #20
 80077a0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80077a4:	9203      	str	r2, [sp, #12]
 80077a6:	2406      	movs	r4, #6
 80077a8:	ad01      	add	r5, sp, #4
 80077aa:	4620      	mov	r0, r4
 80077ac:	4629      	mov	r1, r5
 80077ae:	beab      	bkpt	0x00ab
 80077b0:	4604      	mov	r4, r0
 80077b2:	4620      	mov	r0, r4
 80077b4:	f7ff ffd4 	bl	8007760 <checkerror>
 80077b8:	b005      	add	sp, #20
 80077ba:	bd30      	pop	{r4, r5, pc}

080077bc <_read>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	460e      	mov	r6, r1
 80077c0:	4615      	mov	r5, r2
 80077c2:	f7ff ffb3 	bl	800772c <findslot>
 80077c6:	4604      	mov	r4, r0
 80077c8:	b930      	cbnz	r0, 80077d8 <_read+0x1c>
 80077ca:	f7fd fc57 	bl	800507c <__errno>
 80077ce:	2309      	movs	r3, #9
 80077d0:	6003      	str	r3, [r0, #0]
 80077d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	462a      	mov	r2, r5
 80077da:	4631      	mov	r1, r6
 80077dc:	6800      	ldr	r0, [r0, #0]
 80077de:	f7ff ffdd 	bl	800779c <_swiread>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	bf1f      	itttt	ne
 80077e6:	6863      	ldrne	r3, [r4, #4]
 80077e8:	1a28      	subne	r0, r5, r0
 80077ea:	181b      	addne	r3, r3, r0
 80077ec:	6063      	strne	r3, [r4, #4]
 80077ee:	e7f2      	b.n	80077d6 <_read+0x1a>

080077f0 <_swilseek>:
 80077f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077f2:	460c      	mov	r4, r1
 80077f4:	4616      	mov	r6, r2
 80077f6:	f7ff ff99 	bl	800772c <findslot>
 80077fa:	4605      	mov	r5, r0
 80077fc:	b940      	cbnz	r0, 8007810 <_swilseek+0x20>
 80077fe:	f7fd fc3d 	bl	800507c <__errno>
 8007802:	2309      	movs	r3, #9
 8007804:	6003      	str	r3, [r0, #0]
 8007806:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800780a:	4620      	mov	r0, r4
 800780c:	b003      	add	sp, #12
 800780e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007810:	2e02      	cmp	r6, #2
 8007812:	d903      	bls.n	800781c <_swilseek+0x2c>
 8007814:	f7fd fc32 	bl	800507c <__errno>
 8007818:	2316      	movs	r3, #22
 800781a:	e7f3      	b.n	8007804 <_swilseek+0x14>
 800781c:	2e01      	cmp	r6, #1
 800781e:	d112      	bne.n	8007846 <_swilseek+0x56>
 8007820:	6843      	ldr	r3, [r0, #4]
 8007822:	18e4      	adds	r4, r4, r3
 8007824:	d4f6      	bmi.n	8007814 <_swilseek+0x24>
 8007826:	682b      	ldr	r3, [r5, #0]
 8007828:	260a      	movs	r6, #10
 800782a:	e9cd 3400 	strd	r3, r4, [sp]
 800782e:	466f      	mov	r7, sp
 8007830:	4630      	mov	r0, r6
 8007832:	4639      	mov	r1, r7
 8007834:	beab      	bkpt	0x00ab
 8007836:	4606      	mov	r6, r0
 8007838:	4630      	mov	r0, r6
 800783a:	f7ff ff91 	bl	8007760 <checkerror>
 800783e:	2800      	cmp	r0, #0
 8007840:	dbe1      	blt.n	8007806 <_swilseek+0x16>
 8007842:	606c      	str	r4, [r5, #4]
 8007844:	e7e1      	b.n	800780a <_swilseek+0x1a>
 8007846:	2e02      	cmp	r6, #2
 8007848:	d1ed      	bne.n	8007826 <_swilseek+0x36>
 800784a:	af02      	add	r7, sp, #8
 800784c:	6803      	ldr	r3, [r0, #0]
 800784e:	f847 3d08 	str.w	r3, [r7, #-8]!
 8007852:	260c      	movs	r6, #12
 8007854:	4630      	mov	r0, r6
 8007856:	4639      	mov	r1, r7
 8007858:	beab      	bkpt	0x00ab
 800785a:	4606      	mov	r6, r0
 800785c:	4630      	mov	r0, r6
 800785e:	f7ff ff7f 	bl	8007760 <checkerror>
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	d0cf      	beq.n	8007806 <_swilseek+0x16>
 8007866:	4404      	add	r4, r0
 8007868:	e7dd      	b.n	8007826 <_swilseek+0x36>

0800786a <_lseek>:
 800786a:	f7ff bfc1 	b.w	80077f0 <_swilseek>

0800786e <_swiwrite>:
 800786e:	b530      	push	{r4, r5, lr}
 8007870:	b085      	sub	sp, #20
 8007872:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007876:	9203      	str	r2, [sp, #12]
 8007878:	2405      	movs	r4, #5
 800787a:	ad01      	add	r5, sp, #4
 800787c:	4620      	mov	r0, r4
 800787e:	4629      	mov	r1, r5
 8007880:	beab      	bkpt	0x00ab
 8007882:	4604      	mov	r4, r0
 8007884:	4620      	mov	r0, r4
 8007886:	f7ff ff6b 	bl	8007760 <checkerror>
 800788a:	b005      	add	sp, #20
 800788c:	bd30      	pop	{r4, r5, pc}

0800788e <_write>:
 800788e:	b570      	push	{r4, r5, r6, lr}
 8007890:	460e      	mov	r6, r1
 8007892:	4615      	mov	r5, r2
 8007894:	f7ff ff4a 	bl	800772c <findslot>
 8007898:	4604      	mov	r4, r0
 800789a:	b930      	cbnz	r0, 80078aa <_write+0x1c>
 800789c:	f7fd fbee 	bl	800507c <__errno>
 80078a0:	2309      	movs	r3, #9
 80078a2:	6003      	str	r3, [r0, #0]
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078a8:	bd70      	pop	{r4, r5, r6, pc}
 80078aa:	462a      	mov	r2, r5
 80078ac:	4631      	mov	r1, r6
 80078ae:	6800      	ldr	r0, [r0, #0]
 80078b0:	f7ff ffdd 	bl	800786e <_swiwrite>
 80078b4:	1e02      	subs	r2, r0, #0
 80078b6:	dbf5      	blt.n	80078a4 <_write+0x16>
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	1aa8      	subs	r0, r5, r2
 80078bc:	4403      	add	r3, r0
 80078be:	42aa      	cmp	r2, r5
 80078c0:	6063      	str	r3, [r4, #4]
 80078c2:	d1f1      	bne.n	80078a8 <_write+0x1a>
 80078c4:	2000      	movs	r0, #0
 80078c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078ca:	f7ff bf59 	b.w	8007780 <error>

080078ce <_swiclose>:
 80078ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078d0:	ad02      	add	r5, sp, #8
 80078d2:	2402      	movs	r4, #2
 80078d4:	f845 0d04 	str.w	r0, [r5, #-4]!
 80078d8:	4620      	mov	r0, r4
 80078da:	4629      	mov	r1, r5
 80078dc:	beab      	bkpt	0x00ab
 80078de:	4604      	mov	r4, r0
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7ff ff3d 	bl	8007760 <checkerror>
 80078e6:	b003      	add	sp, #12
 80078e8:	bd30      	pop	{r4, r5, pc}
	...

080078ec <_close>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4605      	mov	r5, r0
 80078f0:	f7ff ff1c 	bl	800772c <findslot>
 80078f4:	4604      	mov	r4, r0
 80078f6:	b930      	cbnz	r0, 8007906 <_close+0x1a>
 80078f8:	f7fd fbc0 	bl	800507c <__errno>
 80078fc:	2309      	movs	r3, #9
 80078fe:	6003      	str	r3, [r0, #0]
 8007900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007904:	bd38      	pop	{r3, r4, r5, pc}
 8007906:	3d01      	subs	r5, #1
 8007908:	2d01      	cmp	r5, #1
 800790a:	d809      	bhi.n	8007920 <_close+0x34>
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <_close+0x48>)
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	429a      	cmp	r2, r3
 8007914:	d104      	bne.n	8007920 <_close+0x34>
 8007916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800791a:	6003      	str	r3, [r0, #0]
 800791c:	2000      	movs	r0, #0
 800791e:	e7f1      	b.n	8007904 <_close+0x18>
 8007920:	6820      	ldr	r0, [r4, #0]
 8007922:	f7ff ffd4 	bl	80078ce <_swiclose>
 8007926:	2800      	cmp	r0, #0
 8007928:	d1ec      	bne.n	8007904 <_close+0x18>
 800792a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800792e:	6023      	str	r3, [r4, #0]
 8007930:	e7e8      	b.n	8007904 <_close+0x18>
 8007932:	bf00      	nop
 8007934:	2000021c 	.word	0x2000021c

08007938 <_swistat>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	460c      	mov	r4, r1
 800793c:	f7ff fef6 	bl	800772c <findslot>
 8007940:	4606      	mov	r6, r0
 8007942:	b930      	cbnz	r0, 8007952 <_swistat+0x1a>
 8007944:	f7fd fb9a 	bl	800507c <__errno>
 8007948:	2309      	movs	r3, #9
 800794a:	6003      	str	r3, [r0, #0]
 800794c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	6863      	ldr	r3, [r4, #4]
 8007954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007958:	6063      	str	r3, [r4, #4]
 800795a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800795e:	6463      	str	r3, [r4, #68]	; 0x44
 8007960:	250c      	movs	r5, #12
 8007962:	4628      	mov	r0, r5
 8007964:	4631      	mov	r1, r6
 8007966:	beab      	bkpt	0x00ab
 8007968:	4605      	mov	r5, r0
 800796a:	4628      	mov	r0, r5
 800796c:	f7ff fef8 	bl	8007760 <checkerror>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	bf1c      	itt	ne
 8007974:	6120      	strne	r0, [r4, #16]
 8007976:	2000      	movne	r0, #0
 8007978:	e7ea      	b.n	8007950 <_swistat+0x18>

0800797a <_fstat>:
 800797a:	460b      	mov	r3, r1
 800797c:	b510      	push	{r4, lr}
 800797e:	2100      	movs	r1, #0
 8007980:	4604      	mov	r4, r0
 8007982:	2258      	movs	r2, #88	; 0x58
 8007984:	4618      	mov	r0, r3
 8007986:	f7fd fba3 	bl	80050d0 <memset>
 800798a:	4601      	mov	r1, r0
 800798c:	4620      	mov	r0, r4
 800798e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007992:	f7ff bfd1 	b.w	8007938 <_swistat>

08007996 <_stat>:
 8007996:	b538      	push	{r3, r4, r5, lr}
 8007998:	460d      	mov	r5, r1
 800799a:	4604      	mov	r4, r0
 800799c:	2258      	movs	r2, #88	; 0x58
 800799e:	2100      	movs	r1, #0
 80079a0:	4628      	mov	r0, r5
 80079a2:	f7fd fb95 	bl	80050d0 <memset>
 80079a6:	4620      	mov	r0, r4
 80079a8:	2100      	movs	r1, #0
 80079aa:	f000 f811 	bl	80079d0 <_swiopen>
 80079ae:	1c43      	adds	r3, r0, #1
 80079b0:	4604      	mov	r4, r0
 80079b2:	d00b      	beq.n	80079cc <_stat+0x36>
 80079b4:	686b      	ldr	r3, [r5, #4]
 80079b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80079ba:	606b      	str	r3, [r5, #4]
 80079bc:	4629      	mov	r1, r5
 80079be:	f7ff ffbb 	bl	8007938 <_swistat>
 80079c2:	4605      	mov	r5, r0
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7ff ff91 	bl	80078ec <_close>
 80079ca:	462c      	mov	r4, r5
 80079cc:	4620      	mov	r0, r4
 80079ce:	bd38      	pop	{r3, r4, r5, pc}

080079d0 <_swiopen>:
 80079d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d4:	4b2b      	ldr	r3, [pc, #172]	; (8007a84 <_swiopen+0xb4>)
 80079d6:	b096      	sub	sp, #88	; 0x58
 80079d8:	4682      	mov	sl, r0
 80079da:	460e      	mov	r6, r1
 80079dc:	2500      	movs	r5, #0
 80079de:	4698      	mov	r8, r3
 80079e0:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80079e4:	1c61      	adds	r1, r4, #1
 80079e6:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80079ea:	d036      	beq.n	8007a5a <_swiopen+0x8a>
 80079ec:	3501      	adds	r5, #1
 80079ee:	2d14      	cmp	r5, #20
 80079f0:	d1f6      	bne.n	80079e0 <_swiopen+0x10>
 80079f2:	f7fd fb43 	bl	800507c <__errno>
 80079f6:	2318      	movs	r3, #24
 80079f8:	6003      	str	r3, [r0, #0]
 80079fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80079fe:	e03c      	b.n	8007a7a <_swiopen+0xaa>
 8007a00:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8007a04:	f240 6301 	movw	r3, #1537	; 0x601
 8007a08:	07b2      	lsls	r2, r6, #30
 8007a0a:	bf48      	it	mi
 8007a0c:	f044 0402 	orrmi.w	r4, r4, #2
 8007a10:	421e      	tst	r6, r3
 8007a12:	bf18      	it	ne
 8007a14:	f044 0404 	orrne.w	r4, r4, #4
 8007a18:	0733      	lsls	r3, r6, #28
 8007a1a:	bf48      	it	mi
 8007a1c:	f024 0404 	bicmi.w	r4, r4, #4
 8007a20:	4650      	mov	r0, sl
 8007a22:	bf48      	it	mi
 8007a24:	f044 0408 	orrmi.w	r4, r4, #8
 8007a28:	f8cd a000 	str.w	sl, [sp]
 8007a2c:	f7f8 fbd0 	bl	80001d0 <strlen>
 8007a30:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8007a34:	2401      	movs	r4, #1
 8007a36:	4620      	mov	r0, r4
 8007a38:	4649      	mov	r1, r9
 8007a3a:	beab      	bkpt	0x00ab
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	db06      	blt.n	8007a50 <_swiopen+0x80>
 8007a42:	4447      	add	r7, r8
 8007a44:	2300      	movs	r3, #0
 8007a46:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8007a4a:	607b      	str	r3, [r7, #4]
 8007a4c:	462c      	mov	r4, r5
 8007a4e:	e014      	b.n	8007a7a <_swiopen+0xaa>
 8007a50:	4620      	mov	r0, r4
 8007a52:	f7ff fe95 	bl	8007780 <error>
 8007a56:	4604      	mov	r4, r0
 8007a58:	e00f      	b.n	8007a7a <_swiopen+0xaa>
 8007a5a:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8007a5e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007a62:	46e9      	mov	r9, sp
 8007a64:	d1cc      	bne.n	8007a00 <_swiopen+0x30>
 8007a66:	4649      	mov	r1, r9
 8007a68:	4650      	mov	r0, sl
 8007a6a:	f7ff ff94 	bl	8007996 <_stat>
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d0c6      	beq.n	8007a00 <_swiopen+0x30>
 8007a72:	f7fd fb03 	bl	800507c <__errno>
 8007a76:	2311      	movs	r3, #17
 8007a78:	6003      	str	r3, [r0, #0]
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	b016      	add	sp, #88	; 0x58
 8007a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a82:	bf00      	nop
 8007a84:	2000021c 	.word	0x2000021c

08007a88 <_get_semihosting_exts>:
 8007a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	4688      	mov	r8, r1
 8007a90:	4829      	ldr	r0, [pc, #164]	; (8007b38 <_get_semihosting_exts+0xb0>)
 8007a92:	2100      	movs	r1, #0
 8007a94:	4615      	mov	r5, r2
 8007a96:	f7ff ff9b 	bl	80079d0 <_swiopen>
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7fd fb15 	bl	80050d0 <memset>
 8007aa6:	1c63      	adds	r3, r4, #1
 8007aa8:	d015      	beq.n	8007ad6 <_get_semihosting_exts+0x4e>
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7ff fe3e 	bl	800772c <findslot>
 8007ab0:	260c      	movs	r6, #12
 8007ab2:	4681      	mov	r9, r0
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	beab      	bkpt	0x00ab
 8007aba:	4606      	mov	r6, r0
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff fe4f 	bl	8007760 <checkerror>
 8007ac2:	2803      	cmp	r0, #3
 8007ac4:	dd02      	ble.n	8007acc <_get_semihosting_exts+0x44>
 8007ac6:	3803      	subs	r0, #3
 8007ac8:	42a8      	cmp	r0, r5
 8007aca:	dc08      	bgt.n	8007ade <_get_semihosting_exts+0x56>
 8007acc:	4620      	mov	r0, r4
 8007ace:	f7ff ff0d 	bl	80078ec <_close>
 8007ad2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	b003      	add	sp, #12
 8007ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ade:	2204      	movs	r2, #4
 8007ae0:	eb0d 0102 	add.w	r1, sp, r2
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f7ff fe69 	bl	80077bc <_read>
 8007aea:	2803      	cmp	r0, #3
 8007aec:	ddee      	ble.n	8007acc <_get_semihosting_exts+0x44>
 8007aee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007af2:	2b53      	cmp	r3, #83	; 0x53
 8007af4:	d1ea      	bne.n	8007acc <_get_semihosting_exts+0x44>
 8007af6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007afa:	2b48      	cmp	r3, #72	; 0x48
 8007afc:	d1e6      	bne.n	8007acc <_get_semihosting_exts+0x44>
 8007afe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007b02:	2b46      	cmp	r3, #70	; 0x46
 8007b04:	d1e2      	bne.n	8007acc <_get_semihosting_exts+0x44>
 8007b06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007b0a:	2b42      	cmp	r3, #66	; 0x42
 8007b0c:	d1de      	bne.n	8007acc <_get_semihosting_exts+0x44>
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4641      	mov	r1, r8
 8007b12:	4620      	mov	r0, r4
 8007b14:	f7ff fe6c 	bl	80077f0 <_swilseek>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	dbd7      	blt.n	8007acc <_get_semihosting_exts+0x44>
 8007b1c:	462a      	mov	r2, r5
 8007b1e:	4639      	mov	r1, r7
 8007b20:	4620      	mov	r0, r4
 8007b22:	f7ff fe4b 	bl	80077bc <_read>
 8007b26:	4605      	mov	r5, r0
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7ff fedf 	bl	80078ec <_close>
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f7ff fe16 	bl	8007760 <checkerror>
 8007b34:	4604      	mov	r4, r0
 8007b36:	e7ce      	b.n	8007ad6 <_get_semihosting_exts+0x4e>
 8007b38:	08007fa8 	.word	0x08007fa8

08007b3c <initialise_semihosting_exts>:
 8007b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b3e:	4d0a      	ldr	r5, [pc, #40]	; (8007b68 <initialise_semihosting_exts+0x2c>)
 8007b40:	4c0a      	ldr	r4, [pc, #40]	; (8007b6c <initialise_semihosting_exts+0x30>)
 8007b42:	2100      	movs	r1, #0
 8007b44:	2201      	movs	r2, #1
 8007b46:	a801      	add	r0, sp, #4
 8007b48:	6029      	str	r1, [r5, #0]
 8007b4a:	6022      	str	r2, [r4, #0]
 8007b4c:	f7ff ff9c 	bl	8007a88 <_get_semihosting_exts>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	dd07      	ble.n	8007b64 <initialise_semihosting_exts+0x28>
 8007b54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007b58:	f003 0201 	and.w	r2, r3, #1
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	602a      	str	r2, [r5, #0]
 8007b62:	6023      	str	r3, [r4, #0]
 8007b64:	b003      	add	sp, #12
 8007b66:	bd30      	pop	{r4, r5, pc}
 8007b68:	200001dc 	.word	0x200001dc
 8007b6c:	200001e0 	.word	0x200001e0

08007b70 <_has_ext_stdout_stderr>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	4c04      	ldr	r4, [pc, #16]	; (8007b84 <_has_ext_stdout_stderr+0x14>)
 8007b74:	6822      	ldr	r2, [r4, #0]
 8007b76:	2a00      	cmp	r2, #0
 8007b78:	da01      	bge.n	8007b7e <_has_ext_stdout_stderr+0xe>
 8007b7a:	f7ff ffdf 	bl	8007b3c <initialise_semihosting_exts>
 8007b7e:	6820      	ldr	r0, [r4, #0]
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	bf00      	nop
 8007b84:	200001e0 	.word	0x200001e0

08007b88 <initialise_monitor_handles>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007c40 <initialise_monitor_handles+0xb8>
 8007b92:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b96:	2303      	movs	r3, #3
 8007b98:	2400      	movs	r4, #0
 8007b9a:	9303      	str	r3, [sp, #12]
 8007b9c:	f10d 0804 	add.w	r8, sp, #4
 8007ba0:	9402      	str	r4, [sp, #8]
 8007ba2:	2501      	movs	r5, #1
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	4641      	mov	r1, r8
 8007ba8:	beab      	bkpt	0x00ab
 8007baa:	4605      	mov	r5, r0
 8007bac:	4e20      	ldr	r6, [pc, #128]	; (8007c30 <initialise_monitor_handles+0xa8>)
 8007bae:	4a21      	ldr	r2, [pc, #132]	; (8007c34 <initialise_monitor_handles+0xac>)
 8007bb0:	6035      	str	r5, [r6, #0]
 8007bb2:	4623      	mov	r3, r4
 8007bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007bb8:	4614      	mov	r4, r2
 8007bba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	2b14      	cmp	r3, #20
 8007bc2:	d1fa      	bne.n	8007bba <initialise_monitor_handles+0x32>
 8007bc4:	f7ff ffd4 	bl	8007b70 <_has_ext_stdout_stderr>
 8007bc8:	4d1b      	ldr	r5, [pc, #108]	; (8007c38 <initialise_monitor_handles+0xb0>)
 8007bca:	b1d0      	cbz	r0, 8007c02 <initialise_monitor_handles+0x7a>
 8007bcc:	f04f 0a03 	mov.w	sl, #3
 8007bd0:	2304      	movs	r3, #4
 8007bd2:	f8cd 9004 	str.w	r9, [sp, #4]
 8007bd6:	2701      	movs	r7, #1
 8007bd8:	f8cd a00c 	str.w	sl, [sp, #12]
 8007bdc:	9302      	str	r3, [sp, #8]
 8007bde:	4638      	mov	r0, r7
 8007be0:	4641      	mov	r1, r8
 8007be2:	beab      	bkpt	0x00ab
 8007be4:	4683      	mov	fp, r0
 8007be6:	4b15      	ldr	r3, [pc, #84]	; (8007c3c <initialise_monitor_handles+0xb4>)
 8007be8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007bec:	f8c3 b000 	str.w	fp, [r3]
 8007bf0:	2308      	movs	r3, #8
 8007bf2:	f8cd a00c 	str.w	sl, [sp, #12]
 8007bf6:	9302      	str	r3, [sp, #8]
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	4641      	mov	r1, r8
 8007bfc:	beab      	bkpt	0x00ab
 8007bfe:	4607      	mov	r7, r0
 8007c00:	602f      	str	r7, [r5, #0]
 8007c02:	682b      	ldr	r3, [r5, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	bf02      	ittt	eq
 8007c08:	4b0c      	ldreq	r3, [pc, #48]	; (8007c3c <initialise_monitor_handles+0xb4>)
 8007c0a:	681b      	ldreq	r3, [r3, #0]
 8007c0c:	602b      	streq	r3, [r5, #0]
 8007c0e:	6833      	ldr	r3, [r6, #0]
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	2600      	movs	r6, #0
 8007c14:	6066      	str	r6, [r4, #4]
 8007c16:	f7ff ffab 	bl	8007b70 <_has_ext_stdout_stderr>
 8007c1a:	b130      	cbz	r0, 8007c2a <initialise_monitor_handles+0xa2>
 8007c1c:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <initialise_monitor_handles+0xb4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007c2a:	b005      	add	sp, #20
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	20000214 	.word	0x20000214
 8007c34:	2000021c 	.word	0x2000021c
 8007c38:	20000210 	.word	0x20000210
 8007c3c:	20000218 	.word	0x20000218
 8007c40:	08007fbe 	.word	0x08007fbe

08007c44 <_isatty>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	f7ff fd71 	bl	800772c <findslot>
 8007c4a:	2509      	movs	r5, #9
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	b920      	cbnz	r0, 8007c5a <_isatty+0x16>
 8007c50:	f7fd fa14 	bl	800507c <__errno>
 8007c54:	6005      	str	r5, [r0, #0]
 8007c56:	4620      	mov	r0, r4
 8007c58:	bd70      	pop	{r4, r5, r6, pc}
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	beab      	bkpt	0x00ab
 8007c60:	4604      	mov	r4, r0
 8007c62:	2c01      	cmp	r4, #1
 8007c64:	d0f7      	beq.n	8007c56 <_isatty+0x12>
 8007c66:	f7fd fa09 	bl	800507c <__errno>
 8007c6a:	2400      	movs	r4, #0
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	2513      	movs	r5, #19
 8007c70:	4628      	mov	r0, r5
 8007c72:	4621      	mov	r1, r4
 8007c74:	beab      	bkpt	0x00ab
 8007c76:	4605      	mov	r5, r0
 8007c78:	6035      	str	r5, [r6, #0]
 8007c7a:	e7ec      	b.n	8007c56 <_isatty+0x12>

08007c7c <_init>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr

08007c88 <_fini>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	bf00      	nop
 8007c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8e:	bc08      	pop	{r3}
 8007c90:	469e      	mov	lr, r3
 8007c92:	4770      	bx	lr
