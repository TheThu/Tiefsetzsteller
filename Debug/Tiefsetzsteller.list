
Tiefsetzsteller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08007be8  08007be8  00017be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f0c  08007f0c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007f0c  08007f0c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f0c  08007f0c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001e4  080080f8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080080f8  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d68d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001baa  00000000  00000000  0002d8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  0002f450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  00030168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019088  00000000  00000000  00030d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a744  00000000  00000000  00049e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092540  00000000  00000000  00054564  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6aa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a4  00000000  00000000  000e6b20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bcc 	.word	0x08007bcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007bcc 	.word	0x08007bcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b598      	push	{r3, r4, r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8000c4c:	f006 ff44 	bl	8007ad8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 fc44 	bl	80014dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 f856 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f000 fa3c 	bl	80010d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c5c:	f000 fa0a 	bl	8001074 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c60:	f000 f97a 	bl	8000f58 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000c64:	f000 f8aa 	bl	8000dbc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c68:	f000 f918 	bl	8000e9c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000c6c:	4820      	ldr	r0, [pc, #128]	; (8000cf0 <main+0xa8>)
 8000c6e:	f000 fe2d 	bl	80018cc <HAL_ADC_Start>
  // Start PWM
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000c72:	2100      	movs	r1, #0
 8000c74:	481f      	ldr	r0, [pc, #124]	; (8000cf4 <main+0xac>)
 8000c76:	f003 f8e1 	bl	8003e3c <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  if(HAL_ADC_PollForConversion(&hadc1, 100)== HAL_OK)
 8000c7a:	2164      	movs	r1, #100	; 0x64
 8000c7c:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <main+0xa8>)
 8000c7e:	f000 fedb 	bl	8001a38 <HAL_ADC_PollForConversion>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f8      	bne.n	8000c7a <main+0x32>
	  {
		ADC_value1 =3.3 * (float)HAL_ADC_GetValue(&hadc1)/4096;
 8000c88:	4819      	ldr	r0, [pc, #100]	; (8000cf0 <main+0xa8>)
 8000c8a:	f000 ff9b 	bl	8001bc4 <HAL_ADC_GetValue>
 8000c8e:	ee07 0a90 	vmov	s15, r0
 8000c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c96:	ee17 0a90 	vmov	r0, s15
 8000c9a:	f7ff fc55 	bl	8000548 <__aeabi_f2d>
 8000c9e:	a312      	add	r3, pc, #72	; (adr r3, 8000ce8 <main+0xa0>)
 8000ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca4:	f7ff fca8 	bl	80005f8 <__aeabi_dmul>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	460c      	mov	r4, r1
 8000cac:	4618      	mov	r0, r3
 8000cae:	4621      	mov	r1, r4
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <main+0xb0>)
 8000cb6:	f7ff fdc9 	bl	800084c <__aeabi_ddiv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	460c      	mov	r4, r1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	f7ff ff71 	bl	8000ba8 <__aeabi_d2f>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <main+0xb4>)
 8000cca:	601a      	str	r2, [r3, #0]
		printf("Value %f\n",ADC_value1);
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <main+0xb4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc39 	bl	8000548 <__aeabi_f2d>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460c      	mov	r4, r1
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4623      	mov	r3, r4
 8000cde:	4808      	ldr	r0, [pc, #32]	; (8000d00 <main+0xb8>)
 8000ce0:	f004 fe00 	bl	80058e4 <iprintf>
	  if(HAL_ADC_PollForConversion(&hadc1, 100)== HAL_OK)
 8000ce4:	e7c9      	b.n	8000c7a <main+0x32>
 8000ce6:	bf00      	nop
 8000ce8:	66666666 	.word	0x66666666
 8000cec:	400a6666 	.word	0x400a6666
 8000cf0:	2000030c 	.word	0x2000030c
 8000cf4:	2000035c 	.word	0x2000035c
 8000cf8:	40b00000 	.word	0x40b00000
 8000cfc:	2000039c 	.word	0x2000039c
 8000d00:	08007be8 	.word	0x08007be8

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b096      	sub	sp, #88	; 0x58
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d0e:	2228      	movs	r2, #40	; 0x28
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f004 f982 	bl	800501c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d40:	2310      	movs	r3, #16
 8000d42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d44:	2302      	movs	r3, #2
 8000d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000d4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d50:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fde0 	bl	800291c <HAL_RCC_OscConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d62:	f000 f9db 	bl	800111c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d66:	230f      	movs	r3, #15
 8000d68:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 fcd3 	bl	800372c <HAL_RCC_ClockConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d8c:	f000 f9c6 	bl	800111c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000d90:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000d94:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fef8 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dae:	f000 f9b5 	bl	800111c <Error_Handler>
  }
}
 8000db2:	bf00      	nop
 8000db4:	3758      	adds	r7, #88	; 0x58
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000dde:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000de0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000de4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000df8:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfe:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e38:	4817      	ldr	r0, [pc, #92]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e3a:	f000 fbb5 	bl	80015a8 <HAL_ADC_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e44:	f000 f96a 	bl	800111c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4811      	ldr	r0, [pc, #68]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e54:	f001 f986 	bl	8002164 <HAL_ADCEx_MultiModeConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e5e:	f000 f95d 	bl	800111c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <MX_ADC1_Init+0xdc>)
 8000e80:	f000 feae 	bl	8001be0 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000e8a:	f000 f947 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000030c 	.word	0x2000030c

08000e9c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
 8000eb0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000eb2:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000eb4:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <MX_ADC2_Init+0xb8>)
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f0a:	4811      	ldr	r0, [pc, #68]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000f0c:	f000 fb4c 	bl	80015a8 <HAL_ADC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000f16:	f000 f901 	bl	800111c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_ADC2_Init+0xb4>)
 8000f38:	f000 fe52 	bl	8001be0 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000f42:	f000 f8eb 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200002bc 	.word	0x200002bc
 8000f54:	50000100 	.word	0x50000100

08000f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b096      	sub	sp, #88	; 0x58
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	222c      	movs	r2, #44	; 0x2c
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 f849 	bl	800501c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <MX_TIM1_Init+0x114>)
 8000f8c:	4a38      	ldr	r2, [pc, #224]	; (8001070 <MX_TIM1_Init+0x118>)
 8000f8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f90:	4b36      	ldr	r3, [pc, #216]	; (800106c <MX_TIM1_Init+0x114>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b35      	ldr	r3, [pc, #212]	; (800106c <MX_TIM1_Init+0x114>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 57;
 8000f9c:	4b33      	ldr	r3, [pc, #204]	; (800106c <MX_TIM1_Init+0x114>)
 8000f9e:	2239      	movs	r2, #57	; 0x39
 8000fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b32      	ldr	r3, [pc, #200]	; (800106c <MX_TIM1_Init+0x114>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_TIM1_Init+0x114>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b2f      	ldr	r3, [pc, #188]	; (800106c <MX_TIM1_Init+0x114>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fb4:	482d      	ldr	r0, [pc, #180]	; (800106c <MX_TIM1_Init+0x114>)
 8000fb6:	f002 ff15 	bl	8003de4 <HAL_TIM_PWM_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000fc0:	f000 f8ac 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_TIM1_Init+0x114>)
 8000fd8:	f003 fbde 	bl	8004798 <HAL_TIMEx_MasterConfigSynchronization>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000fe2:	f000 f89b 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe6:	2360      	movs	r3, #96	; 0x60
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	4818      	ldr	r0, [pc, #96]	; (800106c <MX_TIM1_Init+0x114>)
 800100c:	f002 ff68 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001016:	f000 f881 	bl	800111c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800102e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001032:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800103c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4619      	mov	r1, r3
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <MX_TIM1_Init+0x114>)
 8001050:	f003 fc10 	bl	8004874 <HAL_TIMEx_ConfigBreakDeadTime>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800105a:	f000 f85f 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <MX_TIM1_Init+0x114>)
 8001060:	f000 f926 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8001064:	bf00      	nop
 8001066:	3758      	adds	r7, #88	; 0x58
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000035c 	.word	0x2000035c
 8001070:	40012c00 	.word	0x40012c00

08001074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USART2_UART_Init+0x58>)
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <MX_USART2_UART_Init+0x5c>)
 800107c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_USART2_UART_Init+0x58>)
 8001080:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART2_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_USART2_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART2_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART2_UART_Init+0x58>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART2_UART_Init+0x58>)
 80010b8:	f003 fc54 	bl	8004964 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c2:	f000 f82b 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200003a0 	.word	0x200003a0
 80010d0:	40004400 	.word	0x40004400

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_GPIO_Init+0x44>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <MX_GPIO_Init+0x44>)
 80010e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_GPIO_Init+0x44>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_GPIO_Init+0x44>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <MX_GPIO_Init+0x44>)
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_GPIO_Init+0x44>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_MspInit+0x44>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <HAL_MspInit+0x44>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6193      	str	r3, [r2, #24]
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_MspInit+0x44>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_MspInit+0x44>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_MspInit+0x44>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_MspInit+0x44>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001194:	d12e      	bne.n	80011f4 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001196:	4b33      	ldr	r3, [pc, #204]	; (8001264 <HAL_ADC_MspInit+0xf0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	4a31      	ldr	r2, [pc, #196]	; (8001264 <HAL_ADC_MspInit+0xf0>)
 800119e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_ADC_MspInit+0xf0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d10b      	bne.n	80011c0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 80011ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b2:	6153      	str	r3, [r2, #20]
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 80011c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ca:	6153      	str	r3, [r2, #20]
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011d8:	2303      	movs	r3, #3
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f001 fa23 	bl	8002638 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011f2:	e032      	b.n	800125a <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_ADC_MspInit+0xf8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12d      	bne.n	800125a <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_ADC_MspInit+0xf0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_ADC_MspInit+0xf0>)
 8001206:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_ADC_MspInit+0xf0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d10b      	bne.n	8001228 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 8001216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121a:	6153      	str	r3, [r2, #20]
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 800122e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001232:	6153      	str	r3, [r2, #20]
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001240:	2310      	movs	r3, #16
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f001 f9ef 	bl	8002638 <HAL_GPIO_Init>
}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	; 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000200 	.word	0x20000200
 8001268:	40021000 	.word	0x40021000
 800126c:	50000100 	.word	0x50000100

08001270 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_TIM_PWM_MspInit+0x38>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10b      	bne.n	800129a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001288:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_TIM_PWM_MspInit+0x3c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40012c00 	.word	0x40012c00
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_TIM_MspPostInit+0x68>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d11d      	bne.n	800130e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_TIM_MspPostInit+0x6c>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a11      	ldr	r2, [pc, #68]	; (800131c <HAL_TIM_MspPostInit+0x6c>)
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_TIM_MspPostInit+0x6c>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012fc:	2306      	movs	r3, #6
 80012fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f001 f995 	bl	8002638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40012c00 	.word	0x40012c00
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <HAL_UART_MspInit+0x80>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d129      	bne.n	8001396 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_UART_MspInit+0x84>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_UART_MspInit+0x84>)
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_UART_MspInit+0x84>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_UART_MspInit+0x84>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_UART_MspInit+0x84>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_UART_MspInit+0x84>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001372:	f248 0304 	movw	r3, #32772	; 0x8004
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001384:	2307      	movs	r3, #7
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f001 f951 	bl	8002638 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40004400 	.word	0x40004400
 80013a4:	40021000 	.word	0x40021000

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 f8b4 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_sbrk+0x50>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <_sbrk+0x16>
		heap_end = &end;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <_sbrk+0x50>)
 8001416:	4a10      	ldr	r2, [pc, #64]	; (8001458 <_sbrk+0x54>)
 8001418:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <_sbrk+0x50>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <_sbrk+0x50>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	466a      	mov	r2, sp
 800142a:	4293      	cmp	r3, r2
 800142c:	d907      	bls.n	800143e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800142e:	f003 fdcb 	bl	8004fc8 <__errno>
 8001432:	4602      	mov	r2, r0
 8001434:	230c      	movs	r3, #12
 8001436:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800143c:	e006      	b.n	800144c <_sbrk+0x48>
	}

	heap_end += incr;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <_sbrk+0x50>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	4a03      	ldr	r2, [pc, #12]	; (8001454 <_sbrk+0x50>)
 8001448:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000204 	.word	0x20000204
 8001458:	20000428 	.word	0x20000428

0800145c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <SystemInit+0x28>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <SystemInit+0x28>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SystemInit+0x28>)
 8001472:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001476:	609a      	str	r2, [r3, #8]
#endif
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800148c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800148e:	e003      	b.n	8001498 <LoopCopyDataInit>

08001490 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001492:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001494:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001496:	3104      	adds	r1, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800149c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800149e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014a0:	d3f6      	bcc.n	8001490 <CopyDataInit>
	ldr	r2, =_sbss
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014a4:	e002      	b.n	80014ac <LoopFillZerobss>

080014a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014a8:	f842 3b04 	str.w	r3, [r2], #4

080014ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <LoopForever+0x16>)
	cmp	r2, r3
 80014ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014b0:	d3f9      	bcc.n	80014a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014b2:	f7ff ffd3 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b6:	f003 fd8d 	bl	8004fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ba:	f7ff fbc5 	bl	8000c48 <main>

080014be <LoopForever>:

LoopForever:
    b LoopForever
 80014be:	e7fe      	b.n	80014be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014c0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80014c4:	08007f14 	.word	0x08007f14
	ldr	r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014cc:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 80014d0:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 80014d4:	20000428 	.word	0x20000428

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>
	...

080014dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_Init+0x28>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_Init+0x28>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f001 f86f 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f808 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f8:	f7ff fe18 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40022000 	.word	0x40022000

08001508 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x54>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x58>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f001 f879 	bl	800261e <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001544:	f001 f84f 	bl	80025e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_InitTick+0x5c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000000 	.word	0x20000000
 8001560:	20000008 	.word	0x20000008
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008
 800158c:	20000420 	.word	0x20000420

08001590 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;  
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000420 	.word	0x20000420

080015a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09a      	sub	sp, #104	; 0x68
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e172      	b.n	80018ae <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d176      	bne.n	80016c8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d152      	bne.n	8001688 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fdb9 	bl	8001174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d13b      	bne.n	8001688 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fecb 	bl	80023ac <ADC_Disable>
 8001616:	4603      	mov	r3, r0
 8001618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	2b00      	cmp	r3, #0
 8001626:	d12f      	bne.n	8001688 <HAL_ADC_Init+0xe0>
 8001628:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800162c:	2b00      	cmp	r3, #0
 800162e:	d12b      	bne.n	8001688 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001638:	f023 0302 	bic.w	r3, r3, #2
 800163c:	f043 0202 	orr.w	r2, r3, #2
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001652:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001662:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001664:	4b94      	ldr	r3, [pc, #592]	; (80018b8 <HAL_ADC_Init+0x310>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a94      	ldr	r2, [pc, #592]	; (80018bc <HAL_ADC_Init+0x314>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9a      	lsrs	r2, r3, #18
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800167a:	e002      	b.n	8001682 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3b01      	subs	r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f9      	bne.n	800167c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016a4:	d110      	bne.n	80016c8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f023 0312 	bic.w	r3, r3, #18
 80016ae:	f043 0210 	orr.w	r2, r3, #16
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 80df 	bne.w	8001894 <HAL_ADC_Init+0x2ec>
 80016d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 80da 	bne.w	8001894 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 80d2 	bne.w	8001894 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016f8:	f043 0202 	orr.w	r2, r3, #2
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001700:	4b6f      	ldr	r3, [pc, #444]	; (80018c0 <HAL_ADC_Init+0x318>)
 8001702:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800170c:	d102      	bne.n	8001714 <HAL_ADC_Init+0x16c>
 800170e:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <HAL_ADC_Init+0x31c>)
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	e002      	b.n	800171a <HAL_ADC_Init+0x172>
 8001714:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001718:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <HAL_ADC_Init+0x192>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_ADC_Init+0x192>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_ADC_Init+0x194>
 800173a:	2300      	movs	r3, #0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d11c      	bne.n	800177a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001740:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d010      	beq.n	8001768 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d107      	bne.n	8001762 <HAL_ADC_Init+0x1ba>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Init+0x1ba>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_ADC_Init+0x1bc>
 8001762:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001764:	2b00      	cmp	r3, #0
 8001766:	d108      	bne.n	800177a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	431a      	orrs	r2, r3
 8001776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001778:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7e5b      	ldrb	r3, [r3, #25]
 800177e:	035b      	lsls	r3, r3, #13
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001784:	2a01      	cmp	r2, #1
 8001786:	d002      	beq.n	800178e <HAL_ADC_Init+0x1e6>
 8001788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800178c:	e000      	b.n	8001790 <HAL_ADC_Init+0x1e8>
 800178e:	2200      	movs	r2, #0
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4313      	orrs	r3, r2
 800179e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017a0:	4313      	orrs	r3, r2
 80017a2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d11b      	bne.n	80017e6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7e5b      	ldrb	r3, [r3, #25]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	3b01      	subs	r3, #1
 80017bc:	045a      	lsls	r2, r3, #17
 80017be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017c0:	4313      	orrs	r3, r2
 80017c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c6:	663b      	str	r3, [r7, #96]	; 0x60
 80017c8:	e00d      	b.n	80017e6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80017d2:	f043 0220 	orr.w	r2, r3, #32
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d007      	beq.n	80017fe <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	4313      	orrs	r3, r2
 80017f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017fa:	4313      	orrs	r3, r2
 80017fc:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b00      	cmp	r3, #0
 800180a:	d114      	bne.n	8001836 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800181a:	f023 0302 	bic.w	r3, r3, #2
 800181e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7e1b      	ldrb	r3, [r3, #24]
 8001824:	039a      	lsls	r2, r3, #14
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4313      	orrs	r3, r2
 8001830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001832:	4313      	orrs	r3, r2
 8001834:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_ADC_Init+0x320>)
 800183e:	4013      	ands	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001846:	430b      	orrs	r3, r1
 8001848:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10c      	bne.n	800186c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f023 010f 	bic.w	r1, r3, #15
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
 800186a:	e007      	b.n	800187c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 020f 	bic.w	r2, r2, #15
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f023 0303 	bic.w	r3, r3, #3
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
 8001892:	e00a      	b.n	80018aa <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f023 0312 	bic.w	r3, r3, #18
 800189c:	f043 0210 	orr.w	r2, r3, #16
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80018a4:	2301      	movs	r3, #1
 80018a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80018aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3768      	adds	r7, #104	; 0x68
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000000 	.word	0x20000000
 80018bc:	431bde83 	.word	0x431bde83
 80018c0:	50000300 	.word	0x50000300
 80018c4:	50000100 	.word	0x50000100
 80018c8:	fff0c007 	.word	0xfff0c007

080018cc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 809c 	bne.w	8001a20 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Start+0x2a>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e097      	b.n	8001a26 <HAL_ADC_Start+0x15a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fcf6 	bl	80022f0 <ADC_Enable>
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8083 	bne.w	8001a16 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001924:	4b42      	ldr	r3, [pc, #264]	; (8001a30 <HAL_ADC_Start+0x164>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_ADC_Start+0x6e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001938:	d115      	bne.n	8001966 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d027      	beq.n	80019a4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800195c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001964:	e01e      	b.n	80019a4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800197a:	d004      	beq.n	8001986 <HAL_ADC_Start+0xba>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2c      	ldr	r2, [pc, #176]	; (8001a34 <HAL_ADC_Start+0x168>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10e      	bne.n	80019a4 <HAL_ADC_Start+0xd8>
 8001986:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800199c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b0:	d106      	bne.n	80019c0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f023 0206 	bic.w	r2, r3, #6
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
 80019be:	e002      	b.n	80019c6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	221c      	movs	r2, #28
 80019d4:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_ADC_Start+0x164>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d010      	beq.n	8001a04 <HAL_ADC_Start+0x138>
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_ADC_Start+0x164>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d00a      	beq.n	8001a04 <HAL_ADC_Start+0x138>
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_ADC_Start+0x164>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	2b09      	cmp	r3, #9
 80019f8:	d004      	beq.n	8001a04 <HAL_ADC_Start+0x138>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a02:	d10f      	bne.n	8001a24 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0204 	orr.w	r2, r2, #4
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	e006      	b.n	8001a24 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a1e:	e001      	b.n	8001a24 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a20:	2302      	movs	r3, #2
 8001a22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	50000300 	.word	0x50000300
 8001a34:	50000100 	.word	0x50000100

08001a38 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d102      	bne.n	8001a54 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001a4e:	2308      	movs	r3, #8
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e02e      	b.n	8001ab2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a54:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <HAL_ADC_PollForConversion+0x188>)
 8001a56:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d112      	bne.n	8001a8a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d11d      	bne.n	8001aae <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f043 0220 	orr.w	r2, r3, #32
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e096      	b.n	8001bb8 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f043 0220 	orr.w	r2, r3, #32
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e084      	b.n	8001bb8 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001aae:	230c      	movs	r3, #12
 8001ab0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ab2:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <HAL_ADC_PollForConversion+0x188>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <HAL_ADC_PollForConversion+0x90>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac6:	d104      	bne.n	8001ad2 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	e003      	b.n	8001ada <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ad2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001ada:	f7ff fd59 	bl	8001590 <HAL_GetTick>
 8001ade:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ae0:	e01a      	b.n	8001b18 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ae8:	d016      	beq.n	8001b18 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_ADC_PollForConversion+0xc8>
 8001af0:	f7ff fd4e 	bl	8001590 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d20b      	bcs.n	8001b18 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f043 0204 	orr.w	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e04f      	b.n	8001bb8 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0dd      	beq.n	8001ae2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d131      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d12c      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d125      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d112      	bne.n	8001b8c <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d112      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f043 0201 	orr.w	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8a:	e00b      	b.n	8001ba4 <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	50000300 	.word	0x50000300

08001bc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b09b      	sub	sp, #108	; 0x6c
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x22>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e2a5      	b.n	800214e <HAL_ADC_ConfigChannel+0x56e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f040 8289 	bne.w	800212c <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d81c      	bhi.n	8001c5c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	461a      	mov	r2, r3
 8001c36:	231f      	movs	r3, #31
 8001c38:	4093      	lsls	r3, r2
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	4019      	ands	r1, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5a:	e063      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b09      	cmp	r3, #9
 8001c62:	d81e      	bhi.n	8001ca2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	3b1e      	subs	r3, #30
 8001c78:	221f      	movs	r2, #31
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	4019      	ands	r1, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	3b1e      	subs	r3, #30
 8001c94:	fa00 f203 	lsl.w	r2, r0, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca0:	e040      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b0e      	cmp	r3, #14
 8001ca8:	d81e      	bhi.n	8001ce8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	3b3c      	subs	r3, #60	; 0x3c
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4019      	ands	r1, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	3b3c      	subs	r3, #60	; 0x3c
 8001cda:	fa00 f203 	lsl.w	r2, r0, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ce6:	e01d      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	3b5a      	subs	r3, #90	; 0x5a
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	4019      	ands	r1, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	3b5a      	subs	r3, #90	; 0x5a
 8001d18:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 80e5 	bne.w	8001efe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b09      	cmp	r3, #9
 8001d3a:	d91c      	bls.n	8001d76 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6999      	ldr	r1, [r3, #24]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b1e      	subs	r3, #30
 8001d4e:	2207      	movs	r2, #7
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	4019      	ands	r1, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6898      	ldr	r0, [r3, #8]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	3b1e      	subs	r3, #30
 8001d68:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	619a      	str	r2, [r3, #24]
 8001d74:	e019      	b.n	8001daa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6959      	ldr	r1, [r3, #20]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	2207      	movs	r2, #7
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4019      	ands	r1, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6898      	ldr	r0, [r3, #8]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	08db      	lsrs	r3, r3, #3
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d84f      	bhi.n	8001e6c <HAL_ADC_ConfigChannel+0x28c>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001de5 	.word	0x08001de5
 8001dd8:	08001e07 	.word	0x08001e07
 8001ddc:	08001e29 	.word	0x08001e29
 8001de0:	08001e4b 	.word	0x08001e4b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dea:	4b9e      	ldr	r3, [pc, #632]	; (8002064 <HAL_ADC_ConfigChannel+0x484>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	0691      	lsls	r1, r2, #26
 8001df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001df6:	430a      	orrs	r2, r1
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e02:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e04:	e07e      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e0c:	4b95      	ldr	r3, [pc, #596]	; (8002064 <HAL_ADC_ConfigChannel+0x484>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	0691      	lsls	r1, r2, #26
 8001e16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e24:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e26:	e06d      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e2e:	4b8d      	ldr	r3, [pc, #564]	; (8002064 <HAL_ADC_ConfigChannel+0x484>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	0691      	lsls	r1, r2, #26
 8001e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e46:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e48:	e05c      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e50:	4b84      	ldr	r3, [pc, #528]	; (8002064 <HAL_ADC_ConfigChannel+0x484>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	0691      	lsls	r1, r2, #26
 8001e5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e68:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e6a:	e04b      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	069b      	lsls	r3, r3, #26
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d107      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e8e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	069b      	lsls	r3, r3, #26
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d107      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eb2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	069b      	lsls	r3, r3, #26
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d107      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ed6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	069b      	lsls	r3, r3, #26
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d10a      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001efa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001efc:	e001      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001efe:	bf00      	nop
 8001f00:	e000      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001f02:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d108      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x344>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x344>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x346>
 8001f24:	2300      	movs	r3, #0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 810b 	bne.w	8002142 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d00f      	beq.n	8001f54 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001f52:	e049      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	409a      	lsls	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	d91c      	bls.n	8001fb0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6999      	ldr	r1, [r3, #24]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	3b1b      	subs	r3, #27
 8001f88:	2207      	movs	r2, #7
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4019      	ands	r1, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6898      	ldr	r0, [r3, #8]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b1b      	subs	r3, #27
 8001fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	619a      	str	r2, [r3, #24]
 8001fae:	e01b      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6959      	ldr	r1, [r3, #20]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4019      	ands	r1, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6898      	ldr	r0, [r3, #8]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <HAL_ADC_ConfigChannel+0x488>)
 8001fea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d105      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d015      	beq.n	800202c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002004:	2b11      	cmp	r3, #17
 8002006:	d105      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002018:	2b12      	cmp	r3, #18
 800201a:	f040 8092 	bne.w	8002142 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800201e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 808b 	bne.w	8002142 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002034:	d102      	bne.n	800203c <HAL_ADC_ConfigChannel+0x45c>
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_ADC_ConfigChannel+0x48c>)
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e002      	b.n	8002042 <HAL_ADC_ConfigChannel+0x462>
 800203c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002040:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d10f      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x490>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d108      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x490>
 800205e:	2301      	movs	r3, #1
 8002060:	e007      	b.n	8002072 <HAL_ADC_ConfigChannel+0x492>
 8002062:	bf00      	nop
 8002064:	83fff000 	.word	0x83fff000
 8002068:	50000300 	.word	0x50000300
 800206c:	50000100 	.word	0x50000100
 8002070:	2300      	movs	r3, #0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d150      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002076:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x4b8>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x4b8>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_ADC_ConfigChannel+0x4ba>
 8002098:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800209a:	2b00      	cmp	r3, #0
 800209c:	d13c      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d11d      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x502>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ae:	d118      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80020b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_ADC_ConfigChannel+0x57c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a27      	ldr	r2, [pc, #156]	; (8002160 <HAL_ADC_ConfigChannel+0x580>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0c9a      	lsrs	r2, r3, #18
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020d2:	e002      	b.n	80020da <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f9      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020e0:	e02e      	b.n	8002140 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b11      	cmp	r3, #17
 80020e8:	d10b      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x522>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020f2:	d106      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80020f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80020fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002100:	e01e      	b.n	8002140 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b12      	cmp	r3, #18
 8002108:	d11a      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800210a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002114:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002116:	e013      	b.n	8002140 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f043 0220 	orr.w	r2, r3, #32
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800212a:	e00a      	b.n	8002142 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800213e:	e000      	b.n	8002142 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002140:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800214a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800214e:	4618      	mov	r0, r3
 8002150:	376c      	adds	r7, #108	; 0x6c
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000
 8002160:	431bde83 	.word	0x431bde83

08002164 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002164:	b480      	push	{r7}
 8002166:	b099      	sub	sp, #100	; 0x64
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217c:	d102      	bne.n	8002184 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800217e:	4b5a      	ldr	r3, [pc, #360]	; (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	e002      	b.n	800218a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002184:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002188:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0a2      	b.n	80022da <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800219e:	2302      	movs	r3, #2
 80021a0:	e09b      	b.n	80022da <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d17f      	bne.n	80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d179      	bne.n	80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c4:	4b49      	ldr	r3, [pc, #292]	; (80022ec <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80021c6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d040      	beq.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80021d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021e2:	035b      	lsls	r3, r3, #13
 80021e4:	430b      	orrs	r3, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ea:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800220c:	2300      	movs	r3, #0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d15c      	bne.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800222e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d14b      	bne.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800223c:	f023 030f 	bic.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	6892      	ldr	r2, [r2, #8]
 8002248:	430a      	orrs	r2, r1
 800224a:	431a      	orrs	r2, r3
 800224c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800224e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002250:	e03c      	b.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800225a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800225c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d108      	bne.n	800227e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d123      	bne.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d107      	bne.n	80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80022a0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d112      	bne.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80022a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022ae:	f023 030f 	bic.w	r3, r3, #15
 80022b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022b4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022b6:	e009      	b.n	80022cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80022ca:	e000      	b.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022cc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80022da:	4618      	mov	r0, r3
 80022dc:	3764      	adds	r7, #100	; 0x64
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	50000100 	.word	0x50000100
 80022ec:	50000300 	.word	0x50000300

080022f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d108      	bne.n	800231c <ADC_Enable+0x2c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <ADC_Enable+0x2c>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <ADC_Enable+0x2e>
 800231c:	2300      	movs	r3, #0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d13c      	bne.n	800239c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <ADC_Enable+0xb8>)
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 0210 	orr.w	r2, r3, #16
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e028      	b.n	800239e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800235c:	f7ff f918 	bl	8001590 <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002362:	e014      	b.n	800238e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002364:	f7ff f914 	bl	8001590 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d90d      	bls.n	800238e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f043 0210 	orr.w	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e007      	b.n	800239e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d1e3      	bne.n	8002364 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	8000003f 	.word	0x8000003f

080023ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <ADC_Disable+0x2c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <ADC_Disable+0x2c>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <ADC_Disable+0x2e>
 80023d8:	2300      	movs	r3, #0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d040      	beq.n	8002460 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030d 	and.w	r3, r3, #13
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d10f      	bne.n	800240c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0202 	orr.w	r2, r2, #2
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2203      	movs	r2, #3
 8002402:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002404:	f7ff f8c4 	bl	8001590 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800240a:	e022      	b.n	8002452 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f043 0210 	orr.w	r2, r3, #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e01c      	b.n	8002462 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002428:	f7ff f8b2 	bl	8001590 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d90d      	bls.n	8002452 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e007      	b.n	8002462 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d0e3      	beq.n	8002428 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	; (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	; (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	; 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b0:	f7ff ff8e 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff47 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff5c 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff8e 	bl	8002524 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5d 	bl	80024d0 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ffb0 	bl	800258c <SysTick_Config>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002646:	e14e      	b.n	80028e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2101      	movs	r1, #1
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	4013      	ands	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8140 	beq.w	80028e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d00b      	beq.n	8002680 <HAL_GPIO_Init+0x48>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d007      	beq.n	8002680 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002674:	2b11      	cmp	r3, #17
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b12      	cmp	r3, #18
 800267e:	d130      	bne.n	80026e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b6:	2201      	movs	r2, #1
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0201 	and.w	r2, r3, #1
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0xea>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b12      	cmp	r3, #18
 8002720:	d123      	bne.n	800276a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	08da      	lsrs	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3208      	adds	r2, #8
 800272a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3208      	adds	r2, #8
 8002764:	6939      	ldr	r1, [r7, #16]
 8002766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	2203      	movs	r2, #3
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0203 	and.w	r2, r3, #3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 809a 	beq.w	80028e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ac:	4b55      	ldr	r3, [pc, #340]	; (8002904 <HAL_GPIO_Init+0x2cc>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4a54      	ldr	r2, [pc, #336]	; (8002904 <HAL_GPIO_Init+0x2cc>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6193      	str	r3, [r2, #24]
 80027b8:	4b52      	ldr	r3, [pc, #328]	; (8002904 <HAL_GPIO_Init+0x2cc>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027c4:	4a50      	ldr	r2, [pc, #320]	; (8002908 <HAL_GPIO_Init+0x2d0>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ee:	d013      	beq.n	8002818 <HAL_GPIO_Init+0x1e0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a46      	ldr	r2, [pc, #280]	; (800290c <HAL_GPIO_Init+0x2d4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00d      	beq.n	8002814 <HAL_GPIO_Init+0x1dc>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a45      	ldr	r2, [pc, #276]	; (8002910 <HAL_GPIO_Init+0x2d8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <HAL_GPIO_Init+0x1d8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a44      	ldr	r2, [pc, #272]	; (8002914 <HAL_GPIO_Init+0x2dc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_GPIO_Init+0x1d4>
 8002808:	2303      	movs	r3, #3
 800280a:	e006      	b.n	800281a <HAL_GPIO_Init+0x1e2>
 800280c:	2305      	movs	r3, #5
 800280e:	e004      	b.n	800281a <HAL_GPIO_Init+0x1e2>
 8002810:	2302      	movs	r3, #2
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0x1e2>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_GPIO_Init+0x1e2>
 8002818:	2300      	movs	r3, #0
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	f002 0203 	and.w	r2, r2, #3
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	4093      	lsls	r3, r2
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800282a:	4937      	ldr	r1, [pc, #220]	; (8002908 <HAL_GPIO_Init+0x2d0>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002838:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_GPIO_Init+0x2e0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800285c:	4a2e      	ldr	r2, [pc, #184]	; (8002918 <HAL_GPIO_Init+0x2e0>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002862:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <HAL_GPIO_Init+0x2e0>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002886:	4a24      	ldr	r2, [pc, #144]	; (8002918 <HAL_GPIO_Init+0x2e0>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288c:	4b22      	ldr	r3, [pc, #136]	; (8002918 <HAL_GPIO_Init+0x2e0>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43db      	mvns	r3, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_GPIO_Init+0x2e0>)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <HAL_GPIO_Init+0x2e0>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028da:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <HAL_GPIO_Init+0x2e0>)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f47f aea9 	bne.w	8002648 <HAL_GPIO_Init+0x10>
  }
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	40010000 	.word	0x40010000
 800290c:	48000400 	.word	0x48000400
 8002910:	48000800 	.word	0x48000800
 8002914:	48000c00 	.word	0x48000c00
 8002918:	40010400 	.word	0x40010400

0800291c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002922:	af00      	add	r7, sp, #0
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f000 bef4 	b.w	800371e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 816a 	beq.w	8002c1a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002946:	4bb3      	ldr	r3, [pc, #716]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d00c      	beq.n	800296c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002952:	4bb0      	ldr	r3, [pc, #704]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b08      	cmp	r3, #8
 800295c:	d159      	bne.n	8002a12 <HAL_RCC_OscConfig+0xf6>
 800295e:	4bad      	ldr	r3, [pc, #692]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296a:	d152      	bne.n	8002a12 <HAL_RCC_OscConfig+0xf6>
 800296c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002970:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002980:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d102      	bne.n	800299e <HAL_RCC_OscConfig+0x82>
 8002998:	4b9e      	ldr	r3, [pc, #632]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0xae>
 800299e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029c6:	4b93      	ldr	r3, [pc, #588]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ce:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029d6:	fa92 f2a2 	rbit	r2, r2
 80029da:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029e2:	fab2 f282 	clz	r2, r2
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f042 0220 	orr.w	r2, r2, #32
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f002 021f 	and.w	r2, r2, #31
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 810c 	beq.w	8002c18 <HAL_RCC_OscConfig+0x2fc>
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f040 8106 	bne.w	8002c18 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f000 be86 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x110>
 8002a1e:	4b7d      	ldr	r3, [pc, #500]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7c      	ldr	r2, [pc, #496]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e030      	b.n	8002a8e <HAL_RCC_OscConfig+0x172>
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x134>
 8002a36:	4b77      	ldr	r3, [pc, #476]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a76      	ldr	r2, [pc, #472]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b74      	ldr	r3, [pc, #464]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a73      	ldr	r2, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e01e      	b.n	8002a8e <HAL_RCC_OscConfig+0x172>
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCC_OscConfig+0x15a>
 8002a5c:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6c      	ldr	r2, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a69      	ldr	r2, [pc, #420]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	e00b      	b.n	8002a8e <HAL_RCC_OscConfig+0x172>
 8002a76:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b64      	ldr	r3, [pc, #400]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a63      	ldr	r2, [pc, #396]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a8e:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f023 020f 	bic.w	r2, r3, #15
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	495d      	ldr	r1, [pc, #372]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d059      	beq.n	8002b60 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fd70 	bl	8001590 <HAL_GetTick>
 8002ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab6:	f7fe fd6b 	bl	8001590 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d902      	bls.n	8002acc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	f000 be29 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
 8002acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ad0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ae0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d102      	bne.n	8002afe <HAL_RCC_OscConfig+0x1e2>
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	e015      	b.n	8002b2a <HAL_RCC_OscConfig+0x20e>
 8002afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b02:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b16:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b1a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b2e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b32:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b36:	fa92 f2a2 	rbit	r2, r2
 8002b3a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b3e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b42:	fab2 f282 	clz	r2, r2
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f042 0220 	orr.w	r2, r2, #32
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f002 021f 	and.w	r2, r2, #31
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ab      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x19a>
 8002b5e:	e05c      	b.n	8002c1a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fd16 	bl	8001590 <HAL_GetTick>
 8002b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6a:	f7fe fd11 	bl	8001590 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d902      	bls.n	8002b80 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	f000 bdcf 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
 8002b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b84:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d102      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x296>
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x2c2>
 8002bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_RCC_OscConfig+0x2f8>)
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002be2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002be6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002bea:	fa92 f2a2 	rbit	r2, r2
 8002bee:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002bf2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1ab      	bne.n	8002b6a <HAL_RCC_OscConfig+0x24e>
 8002c12:	e002      	b.n	8002c1a <HAL_RCC_OscConfig+0x2fe>
 8002c14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 816f 	beq.w	8002f08 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c2a:	4bd0      	ldr	r3, [pc, #832]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c36:	4bcd      	ldr	r3, [pc, #820]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d16c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x400>
 8002c42:	4bca      	ldr	r3, [pc, #808]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d166      	bne.n	8002d1c <HAL_RCC_OscConfig+0x400>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c60:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0x362>
 8002c78:	4bbc      	ldr	r3, [pc, #752]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	e013      	b.n	8002ca6 <HAL_RCC_OscConfig+0x38a>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ca2:	4bb2      	ldr	r3, [pc, #712]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cb0:	fa92 f2a2 	rbit	r2, r2
 8002cb4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cb8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cbc:	fab2 f282 	clz	r2, r2
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	f042 0220 	orr.w	r2, r2, #32
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	f002 021f 	and.w	r2, r2, #31
 8002ccc:	2101      	movs	r1, #1
 8002cce:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x3cc>
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f000 bd1b 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4ba0      	ldr	r3, [pc, #640]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf0:	1d3b      	adds	r3, r7, #4
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	21f8      	movs	r1, #248	; 0xf8
 8002cf8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d00:	fa91 f1a1 	rbit	r1, r1
 8002d04:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d08:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d0c:	fab1 f181 	clz	r1, r1
 8002d10:	b2c9      	uxtb	r1, r1
 8002d12:	408b      	lsls	r3, r1
 8002d14:	4995      	ldr	r1, [pc, #596]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	e0f5      	b.n	8002f08 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8085 	beq.w	8002e32 <HAL_RCC_OscConfig+0x516>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2301      	movs	r3, #1
 8002d52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fc1c 	bl	8001590 <HAL_GetTick>
 8002d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fc17 	bl	8001590 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d902      	bls.n	8002d74 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	f000 bcd5 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
 8002d74:	2302      	movs	r3, #2
 8002d76:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d86:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_OscConfig+0x488>
 8002d9e:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	e013      	b.n	8002dcc <HAL_RCC_OscConfig+0x4b0>
 8002da4:	2302      	movs	r3, #2
 8002da6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002db6:	2302      	movs	r3, #2
 8002db8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002dbc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002dc8:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002dd2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002dd6:	fa92 f2a2 	rbit	r2, r2
 8002dda:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002dde:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002de2:	fab2 f282 	clz	r2, r2
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	f042 0220 	orr.w	r2, r2, #32
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	f002 021f 	and.w	r2, r2, #31
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f202 	lsl.w	r2, r1, r2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0af      	beq.n	8002d5e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	21f8      	movs	r1, #248	; 0xf8
 8002e0e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e16:	fa91 f1a1 	rbit	r1, r1
 8002e1a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e1e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e22:	fab1 f181 	clz	r1, r1
 8002e26:	b2c9      	uxtb	r1, r1
 8002e28:	408b      	lsls	r3, r1
 8002e2a:	4950      	ldr	r1, [pc, #320]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	e06a      	b.n	8002f08 <HAL_RCC_OscConfig+0x5ec>
 8002e32:	2301      	movs	r3, #1
 8002e34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fb97 	bl	8001590 <HAL_GetTick>
 8002e62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe fb92 	bl	8001590 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d902      	bls.n	8002e7e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	f000 bc50 	b.w	800371e <HAL_RCC_OscConfig+0xe02>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_OscConfig+0x592>
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	e013      	b.n	8002ed6 <HAL_RCC_OscConfig+0x5ba>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ec6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_RCC_OscConfig+0x650>)
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002edc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ee0:	fa92 f2a2 	rbit	r2, r2
 8002ee4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ee8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002eec:	fab2 f282 	clz	r2, r2
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	f042 0220 	orr.w	r2, r2, #32
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	f002 021f 	and.w	r2, r2, #31
 8002efc:	2101      	movs	r1, #1
 8002efe:	fa01 f202 	lsl.w	r2, r1, r2
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1af      	bne.n	8002e68 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80da 	beq.w	80030cc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d069      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x6da>
 8002f22:	2301      	movs	r3, #1
 8002f24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x654>)
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	461a      	mov	r2, r3
 8002f48:	2301      	movs	r3, #1
 8002f4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7fe fb20 	bl	8001590 <HAL_GetTick>
 8002f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f54:	e00e      	b.n	8002f74 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f56:	f7fe fb1b 	bl	8001590 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d906      	bls.n	8002f74 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e3d9      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	10908120 	.word	0x10908120
 8002f74:	2302      	movs	r3, #2
 8002f76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	fa93 f2a3 	rbit	r2, r3
 8002fb0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002fb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	4ba5      	ldr	r3, [pc, #660]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8002fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	6019      	str	r1, [r3, #0]
 8002fc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f1a3 	rbit	r1, r3
 8002fcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fd0:	6019      	str	r1, [r3, #0]
  return result;
 8002fd2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0b0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x63a>
 8002ff4:	e06a      	b.n	80030cc <HAL_RCC_OscConfig+0x7b0>
 8002ff6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	fa93 f2a3 	rbit	r2, r3
 8003008:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800300c:	601a      	str	r2, [r3, #0]
  return result;
 800300e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003012:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	4b8c      	ldr	r3, [pc, #560]	; (8003250 <HAL_RCC_OscConfig+0x934>)
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	461a      	mov	r2, r3
 8003024:	2300      	movs	r3, #0
 8003026:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7fe fab2 	bl	8001590 <HAL_GetTick>
 800302c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	e009      	b.n	8003046 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003032:	f7fe faad 	bl	8001590 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e36b      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 8003046:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800304a:	2202      	movs	r2, #2
 800304c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003062:	2202      	movs	r2, #2
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800307a:	2202      	movs	r2, #2
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800308c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308e:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8003090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003092:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003096:	2102      	movs	r1, #2
 8003098:	6019      	str	r1, [r3, #0]
 800309a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	fa93 f1a3 	rbit	r1, r3
 80030a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030a8:	6019      	str	r1, [r3, #0]
  return result;
 80030aa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1b2      	bne.n	8003032 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8158 	beq.w	800338c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030dc:	2300      	movs	r3, #0
 80030de:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e2:	4b5a      	ldr	r3, [pc, #360]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d112      	bne.n	8003114 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b57      	ldr	r3, [pc, #348]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4a56      	ldr	r2, [pc, #344]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	61d3      	str	r3, [r2, #28]
 80030fa:	4b54      	ldr	r3, [pc, #336]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f107 0308 	add.w	r3, r7, #8
 800310c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <HAL_RCC_OscConfig+0x938>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11a      	bne.n	8003156 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003120:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <HAL_RCC_OscConfig+0x938>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a4b      	ldr	r2, [pc, #300]	; (8003254 <HAL_RCC_OscConfig+0x938>)
 8003126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312c:	f7fe fa30 	bl	8001590 <HAL_GetTick>
 8003130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e009      	b.n	800314a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe fa2b 	bl	8001590 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e2e9      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b42      	ldr	r3, [pc, #264]	; (8003254 <HAL_RCC_OscConfig+0x938>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ef      	beq.n	8003136 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x852>
 8003160:	4b3a      	ldr	r3, [pc, #232]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4a39      	ldr	r2, [pc, #228]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6213      	str	r3, [r2, #32]
 800316c:	e02f      	b.n	80031ce <HAL_RCC_OscConfig+0x8b2>
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10c      	bne.n	8003192 <HAL_RCC_OscConfig+0x876>
 8003178:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCC_OscConfig+0x930>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4a33      	ldr	r2, [pc, #204]	; (800324c <HAL_RCC_OscConfig+0x930>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	6213      	str	r3, [r2, #32]
 8003184:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4a30      	ldr	r2, [pc, #192]	; (800324c <HAL_RCC_OscConfig+0x930>)
 800318a:	f023 0304 	bic.w	r3, r3, #4
 800318e:	6213      	str	r3, [r2, #32]
 8003190:	e01d      	b.n	80031ce <HAL_RCC_OscConfig+0x8b2>
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d10c      	bne.n	80031b6 <HAL_RCC_OscConfig+0x89a>
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_OscConfig+0x930>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6213      	str	r3, [r2, #32]
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a27      	ldr	r2, [pc, #156]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	e00b      	b.n	80031ce <HAL_RCC_OscConfig+0x8b2>
 80031b6:	4b25      	ldr	r3, [pc, #148]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a24      	ldr	r2, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	4b22      	ldr	r3, [pc, #136]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a21      	ldr	r2, [pc, #132]	; (800324c <HAL_RCC_OscConfig+0x930>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d06b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d8:	f7fe f9da 	bl	8001590 <HAL_GetTick>
 80031dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	e00b      	b.n	80031fa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe f9d5 	bl	8001590 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e291      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 80031fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80031fe:	2202      	movs	r2, #2
 8003200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003216:	2202      	movs	r2, #2
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	fa93 f2a3 	rbit	r2, r3
 8003224:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003228:	601a      	str	r2, [r3, #0]
  return result;
 800322a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800322e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f043 0302 	orr.w	r3, r3, #2
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d109      	bne.n	8003258 <HAL_RCC_OscConfig+0x93c>
 8003244:	4b01      	ldr	r3, [pc, #4]	; (800324c <HAL_RCC_OscConfig+0x930>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x958>
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	10908120 	.word	0x10908120
 8003254:	40007000 	.word	0x40007000
 8003258:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800325c:	2202      	movs	r2, #2
 800325e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	4bbb      	ldr	r3, [pc, #748]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003278:	2102      	movs	r1, #2
 800327a:	6011      	str	r1, [r2, #0]
 800327c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	fa92 f1a2 	rbit	r1, r2
 8003286:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800328a:	6011      	str	r1, [r2, #0]
  return result;
 800328c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	fab2 f282 	clz	r2, r2
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f002 021f 	and.w	r2, r2, #31
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d099      	beq.n	80031e2 <HAL_RCC_OscConfig+0x8c6>
 80032ae:	e063      	b.n	8003378 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b0:	f7fe f96e 	bl	8001590 <HAL_GetTick>
 80032b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b8:	e00b      	b.n	80032d2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fe f969 	bl	8001590 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e225      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 80032d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032d6:	2202      	movs	r2, #2
 80032d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	fa93 f2a3 	rbit	r2, r3
 80032e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032ee:	2202      	movs	r2, #2
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003300:	601a      	str	r2, [r3, #0]
  return result;
 8003302:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003306:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d102      	bne.n	8003322 <HAL_RCC_OscConfig+0xa06>
 800331c:	4b90      	ldr	r3, [pc, #576]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	e00d      	b.n	800333e <HAL_RCC_OscConfig+0xa22>
 8003322:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	4b89      	ldr	r3, [pc, #548]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003342:	2102      	movs	r1, #2
 8003344:	6011      	str	r1, [r2, #0]
 8003346:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	fa92 f1a2 	rbit	r1, r2
 8003350:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003354:	6011      	str	r1, [r2, #0]
  return result;
 8003356:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	fab2 f282 	clz	r2, r2
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f002 021f 	and.w	r2, r2, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f202 	lsl.w	r2, r1, r2
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1a0      	bne.n	80032ba <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003378:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003380:	4b77      	ldr	r3, [pc, #476]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	4a76      	ldr	r2, [pc, #472]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 8003386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 81c2 	beq.w	800371c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003398:	4b71      	ldr	r3, [pc, #452]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	f000 819c 	beq.w	80036de <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	f040 8114 	bne.w	80035da <HAL_RCC_OscConfig+0xcbe>
 80033b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	fa93 f2a3 	rbit	r2, r3
 80033c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033ca:	601a      	str	r2, [r3, #0]
  return result;
 80033cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	461a      	mov	r2, r3
 80033e4:	2300      	movs	r3, #0
 80033e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe f8d2 	bl	8001590 <HAL_GetTick>
 80033ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f0:	e009      	b.n	8003406 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fe f8cd 	bl	8001590 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e18b      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 8003406:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800340a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800340e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800341e:	601a      	str	r2, [r3, #0]
  return result;
 8003420:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003424:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <HAL_RCC_OscConfig+0xb24>
 800343a:	4b49      	ldr	r3, [pc, #292]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	e01b      	b.n	8003478 <HAL_RCC_OscConfig+0xb5c>
 8003440:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	fa93 f2a3 	rbit	r2, r3
 8003454:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800345e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	fa93 f2a3 	rbit	r2, r3
 800346e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	4b3a      	ldr	r3, [pc, #232]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800347c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003480:	6011      	str	r1, [r2, #0]
 8003482:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	fa92 f1a2 	rbit	r1, r2
 800348c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003490:	6011      	str	r1, [r2, #0]
  return result;
 8003492:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	fab2 f282 	clz	r2, r2
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f042 0220 	orr.w	r2, r2, #32
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	f002 021f 	and.w	r2, r2, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f202 	lsl.w	r2, r1, r2
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d19e      	bne.n	80033f2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b4:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034bc:	1d3b      	adds	r3, r7, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	4925      	ldr	r1, [pc, #148]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]
 80034d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	fa93 f2a3 	rbit	r2, r3
 80034e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034e8:	601a      	str	r2, [r3, #0]
  return result;
 80034ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034ee:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	461a      	mov	r2, r3
 8003502:	2301      	movs	r3, #1
 8003504:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003506:	f7fe f843 	bl	8001590 <HAL_GetTick>
 800350a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800350e:	e009      	b.n	8003524 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003510:	f7fe f83e 	bl	8001590 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0fc      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 8003524:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800352c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	fa93 f2a3 	rbit	r2, r3
 8003538:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800353c:	601a      	str	r2, [r3, #0]
  return result;
 800353e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003542:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCC_OscConfig+0xc48>
 8003558:	4b01      	ldr	r3, [pc, #4]	; (8003560 <HAL_RCC_OscConfig+0xc44>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	e01e      	b.n	800359c <HAL_RCC_OscConfig+0xc80>
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003582:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	fa93 f2a3 	rbit	r2, r3
 8003592:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	4b63      	ldr	r3, [pc, #396]	; (8003728 <HAL_RCC_OscConfig+0xe0c>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035a4:	6011      	str	r1, [r2, #0]
 80035a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	fa92 f1a2 	rbit	r1, r2
 80035b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035b4:	6011      	str	r1, [r2, #0]
  return result;
 80035b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f042 0220 	orr.w	r2, r2, #32
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f002 021f 	and.w	r2, r2, #31
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f202 	lsl.w	r2, r1, r2
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d09b      	beq.n	8003510 <HAL_RCC_OscConfig+0xbf4>
 80035d8:	e0a0      	b.n	800371c <HAL_RCC_OscConfig+0xe00>
 80035da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	fa93 f2a3 	rbit	r2, r3
 80035ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f2:	601a      	str	r2, [r3, #0]
  return result;
 80035f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003604:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	461a      	mov	r2, r3
 800360c:	2300      	movs	r3, #0
 800360e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fd ffbe 	bl	8001590 <HAL_GetTick>
 8003614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e009      	b.n	800362e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361a:	f7fd ffb9 	bl	8001590 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e077      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
 800362e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	fa93 f2a3 	rbit	r2, r3
 8003642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003646:	601a      	str	r2, [r3, #0]
  return result;
 8003648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800364c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d102      	bne.n	8003668 <HAL_RCC_OscConfig+0xd4c>
 8003662:	4b31      	ldr	r3, [pc, #196]	; (8003728 <HAL_RCC_OscConfig+0xe0c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	e01b      	b.n	80036a0 <HAL_RCC_OscConfig+0xd84>
 8003668:	f107 0320 	add.w	r3, r7, #32
 800366c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f107 0320 	add.w	r3, r7, #32
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f107 031c 	add.w	r3, r7, #28
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f107 0318 	add.w	r3, r7, #24
 8003686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	f107 0318 	add.w	r3, r7, #24
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa93 f2a3 	rbit	r2, r3
 8003696:	f107 0314 	add.w	r3, r7, #20
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	4b22      	ldr	r3, [pc, #136]	; (8003728 <HAL_RCC_OscConfig+0xe0c>)
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f107 0210 	add.w	r2, r7, #16
 80036a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036a8:	6011      	str	r1, [r2, #0]
 80036aa:	f107 0210 	add.w	r2, r7, #16
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	fa92 f1a2 	rbit	r1, r2
 80036b4:	f107 020c 	add.w	r2, r7, #12
 80036b8:	6011      	str	r1, [r2, #0]
  return result;
 80036ba:	f107 020c 	add.w	r2, r7, #12
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	fab2 f282 	clz	r2, r2
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	f042 0220 	orr.w	r2, r2, #32
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	f002 021f 	and.w	r2, r2, #31
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f202 	lsl.w	r2, r1, r2
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d19e      	bne.n	800361a <HAL_RCC_OscConfig+0xcfe>
 80036dc:	e01e      	b.n	800371c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e018      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <HAL_RCC_OscConfig+0xe0c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036fc:	1d3b      	adds	r3, r7, #4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	429a      	cmp	r2, r3
 8003704:	d108      	bne.n	8003718 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003706:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800370a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800370e:	1d3b      	adds	r3, r7, #4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000

0800372c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b09e      	sub	sp, #120	; 0x78
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e162      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b90      	ldr	r3, [pc, #576]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b8d      	ldr	r3, [pc, #564]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0207 	bic.w	r2, r3, #7
 800375a:	498b      	ldr	r1, [pc, #556]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b89      	ldr	r3, [pc, #548]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e14a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b82      	ldr	r3, [pc, #520]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	497f      	ldr	r1, [pc, #508]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80dc 	beq.w	8003958 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d13c      	bne.n	8003822 <HAL_RCC_ClockConfig+0xf6>
 80037a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d102      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xa6>
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	e00f      	b.n	80037f2 <HAL_RCC_ClockConfig+0xc6>
 80037d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	667b      	str	r3, [r7, #100]	; 0x64
 80037e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e4:	663b      	str	r3, [r7, #96]	; 0x60
 80037e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ee:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80037f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037fa:	fa92 f2a2 	rbit	r2, r2
 80037fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d17b      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0f3      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d13c      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x178>
 800382a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_RCC_ClockConfig+0x128>
 800384e:	4b4f      	ldr	r3, [pc, #316]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	e00f      	b.n	8003874 <HAL_RCC_ClockConfig+0x148>
 8003854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003858:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
 8003862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003866:	643b      	str	r3, [r7, #64]	; 0x40
 8003868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003870:	4b46      	ldr	r3, [pc, #280]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003878:	63ba      	str	r2, [r7, #56]	; 0x38
 800387a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800387c:	fa92 f2a2 	rbit	r2, r2
 8003880:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f042 0220 	orr.w	r2, r2, #32
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f002 021f 	and.w	r2, r2, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d13a      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b2      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
 80038a4:	2302      	movs	r3, #2
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d102      	bne.n	80038cc <HAL_RCC_ClockConfig+0x1a0>
 80038c6:	4b31      	ldr	r3, [pc, #196]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	e00d      	b.n	80038e8 <HAL_RCC_ClockConfig+0x1bc>
 80038cc:	2302      	movs	r3, #2
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	2302      	movs	r3, #2
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	4b29      	ldr	r3, [pc, #164]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2202      	movs	r2, #2
 80038ea:	61ba      	str	r2, [r7, #24]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	fa92 f2a2 	rbit	r2, r2
 80038f2:	617a      	str	r2, [r7, #20]
  return result;
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	fab2 f282 	clz	r2, r2
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f042 0220 	orr.w	r2, r2, #32
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	f002 021f 	and.w	r2, r2, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e079      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	491a      	ldr	r1, [pc, #104]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd fe32 	bl	8001590 <HAL_GetTick>
 800392c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd fe2e 	bl	8001590 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e061      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_RCC_ClockConfig+0x260>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d214      	bcs.n	8003990 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 0207 	bic.w	r2, r3, #7
 800396e:	4906      	ldr	r1, [pc, #24]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b04      	ldr	r3, [pc, #16]	; (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e040      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
 8003988:	40022000 	.word	0x40022000
 800398c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	491a      	ldr	r1, [pc, #104]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4912      	ldr	r1, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039ce:	f000 f829 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039d2:	4601      	mov	r1, r0
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039dc:	22f0      	movs	r2, #240	; 0xf0
 80039de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	fa92 f2a2 	rbit	r2, r2
 80039e6:	60fa      	str	r2, [r7, #12]
  return result;
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	fab2 f282 	clz	r2, r2
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	40d3      	lsrs	r3, r2
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x2ec>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	fa21 f303 	lsr.w	r3, r1, r3
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <HAL_RCC_ClockConfig+0x2f0>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_RCC_ClockConfig+0x2f4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fd80 	bl	8001508 <HAL_InitTick>
  
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3778      	adds	r7, #120	; 0x78
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08007bf4 	.word	0x08007bf4
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	20000004 	.word	0x20000004

08003a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b08b      	sub	sp, #44	; 0x2c
 8003a28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a3e:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x30>
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x36>
 8003a52:	e03c      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a56:	623b      	str	r3, [r7, #32]
      break;
 8003a58:	e03c      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a60:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a64:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	fa92 f2a2 	rbit	r2, r2
 8003a6c:	607a      	str	r2, [r7, #4]
  return result;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	fab2 f282 	clz	r2, r2
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	40d3      	lsrs	r3, r2
 8003a78:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a7a:	5cd3      	ldrb	r3, [r2, r3]
 8003a7c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	220f      	movs	r2, #15
 8003a88:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	fa92 f2a2 	rbit	r2, r2
 8003a90:	60fa      	str	r2, [r7, #12]
  return result;
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	fab2 f282 	clz	r2, r2
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	40d3      	lsrs	r3, r2
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003aac:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
 8003abc:	e004      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	623b      	str	r3, [r7, #32]
      break;
 8003acc:	e002      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ad0:	623b      	str	r3, [r7, #32]
      break;
 8003ad2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	372c      	adds	r7, #44	; 0x2c
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	007a1200 	.word	0x007a1200
 8003aec:	08007c0c 	.word	0x08007c0c
 8003af0:	08007c1c 	.word	0x08007c1c
 8003af4:	003d0900 	.word	0x003d0900

08003af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000000 	.word	0x20000000

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b16:	f7ff ffef 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b1a:	4601      	mov	r1, r0
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	fa92 f2a2 	rbit	r2, r2
 8003b30:	603a      	str	r2, [r7, #0]
  return result;
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	fab2 f282 	clz	r2, r2
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	40d3      	lsrs	r3, r2
 8003b3c:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b3e:	5cd3      	ldrb	r3, [r2, r3]
 8003b40:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	08007c04 	.word	0x08007c04

08003b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b5a:	f7ff ffcd 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b5e:	4601      	mov	r1, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b68:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	fa92 f2a2 	rbit	r2, r2
 8003b74:	603a      	str	r2, [r7, #0]
  return result;
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	fab2 f282 	clz	r2, r2
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	40d3      	lsrs	r3, r2
 8003b80:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	08007c04 	.word	0x08007c04

08003b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b092      	sub	sp, #72	; 0x48
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80d0 	beq.w	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbc:	4b86      	ldr	r3, [pc, #536]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10e      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc8:	4b83      	ldr	r3, [pc, #524]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4a82      	ldr	r2, [pc, #520]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	61d3      	str	r3, [r2, #28]
 8003bd4:	4b80      	ldr	r3, [pc, #512]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b7d      	ldr	r3, [pc, #500]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d118      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf2:	4b7a      	ldr	r3, [pc, #488]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a79      	ldr	r2, [pc, #484]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfe:	f7fd fcc7 	bl	8001590 <HAL_GetTick>
 8003c02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	e008      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fd fcc3 	bl	8001590 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b64      	cmp	r3, #100	; 0x64
 8003c12:	d901      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0db      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	4b70      	ldr	r3, [pc, #448]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c24:	4b6c      	ldr	r3, [pc, #432]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d07d      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d076      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c42:	4b65      	ldr	r3, [pc, #404]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c5c:	fab3 f383 	clz	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b5e      	ldr	r3, [pc, #376]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b55      	ldr	r3, [pc, #340]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c94:	4a50      	ldr	r2, [pc, #320]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c98:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d045      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd fc74 	bl	8001590 <HAL_GetTick>
 8003ca8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cac:	f7fd fc70 	bl	8001590 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e086      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	fa93 f3a3 	rbit	r3, r3
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	2302      	movs	r3, #2
 8003cd0:	623b      	str	r3, [r7, #32]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	61fb      	str	r3, [r7, #28]
  return result;
 8003cda:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	fab3 f383 	clz	r3, r3
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d102      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003cf0:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	e007      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2202      	movs	r2, #2
 8003d08:	613a      	str	r2, [r7, #16]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	fa92 f2a2 	rbit	r2, r2
 8003d10:	60fa      	str	r2, [r7, #12]
  return result;
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	fab2 f282 	clz	r2, r2
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	f002 021f 	and.w	r2, r2, #31
 8003d24:	2101      	movs	r1, #1
 8003d26:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0bd      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d30:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4926      	ldr	r1, [pc, #152]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d105      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4a:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d54:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	491a      	ldr	r1, [pc, #104]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d80:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	f023 0210 	bic.w	r2, r3, #16
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4912      	ldr	r1, [pc, #72]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	490b      	ldr	r1, [pc, #44]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	4903      	ldr	r1, [pc, #12]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3748      	adds	r7, #72	; 0x48
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	10908100 	.word	0x10908100

08003de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e01d      	b.n	8003e32 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd fa30 	bl	8001270 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f000 f974 	bl	8004110 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	6839      	ldr	r1, [r7, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fc7c 	bl	800474c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_TIM_PWM_Start+0x90>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00e      	beq.n	8003e7c <HAL_TIM_PWM_Start+0x40>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <HAL_TIM_PWM_Start+0x94>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d009      	beq.n	8003e7c <HAL_TIM_PWM_Start+0x40>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <HAL_TIM_PWM_Start+0x98>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_TIM_PWM_Start+0x40>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_TIM_PWM_Start+0x9c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIM_PWM_Start+0x44>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_TIM_PWM_Start+0x46>
 8003e80:	2300      	movs	r3, #0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <HAL_TIM_PWM_Start+0xa0>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b06      	cmp	r3, #6
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0x84>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eae:	d007      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40014400 	.word	0x40014400
 8003ed8:	40014800 	.word	0x40014800
 8003edc:	00010007 	.word	0x00010007

08003ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e105      	b.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b14      	cmp	r3, #20
 8003f0e:	f200 80f0 	bhi.w	80040f2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003f12:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	080040f3 	.word	0x080040f3
 8003f20:	080040f3 	.word	0x080040f3
 8003f24:	080040f3 	.word	0x080040f3
 8003f28:	08003fad 	.word	0x08003fad
 8003f2c:	080040f3 	.word	0x080040f3
 8003f30:	080040f3 	.word	0x080040f3
 8003f34:	080040f3 	.word	0x080040f3
 8003f38:	08003fef 	.word	0x08003fef
 8003f3c:	080040f3 	.word	0x080040f3
 8003f40:	080040f3 	.word	0x080040f3
 8003f44:	080040f3 	.word	0x080040f3
 8003f48:	0800402f 	.word	0x0800402f
 8003f4c:	080040f3 	.word	0x080040f3
 8003f50:	080040f3 	.word	0x080040f3
 8003f54:	080040f3 	.word	0x080040f3
 8003f58:	08004071 	.word	0x08004071
 8003f5c:	080040f3 	.word	0x080040f3
 8003f60:	080040f3 	.word	0x080040f3
 8003f64:	080040f3 	.word	0x080040f3
 8003f68:	080040b1 	.word	0x080040b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f944 	bl	8004200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0208 	orr.w	r2, r2, #8
 8003f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0204 	bic.w	r2, r2, #4
 8003f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6999      	ldr	r1, [r3, #24]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	619a      	str	r2, [r3, #24]
      break;
 8003faa:	e0a3      	b.n	80040f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f9aa 	bl	800430c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	021a      	lsls	r2, r3, #8
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	619a      	str	r2, [r3, #24]
      break;
 8003fec:	e082      	b.n	80040f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fa09 	bl	800440c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0208 	orr.w	r2, r2, #8
 8004008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0204 	bic.w	r2, r2, #4
 8004018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69d9      	ldr	r1, [r3, #28]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	61da      	str	r2, [r3, #28]
      break;
 800402c:	e062      	b.n	80040f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fa67 	bl	8004508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69d9      	ldr	r1, [r3, #28]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	021a      	lsls	r2, r3, #8
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	61da      	str	r2, [r3, #28]
      break;
 800406e:	e041      	b.n	80040f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 faaa 	bl	80045d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0208 	orr.w	r2, r2, #8
 800408a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0204 	bic.w	r2, r2, #4
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040ae:	e021      	b.n	80040f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fae8 	bl	800468c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	021a      	lsls	r2, r3, #8
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040f0:	e000      	b.n	80040f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80040f2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop

08004110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a32      	ldr	r2, [pc, #200]	; (80041ec <TIM_Base_SetConfig+0xdc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <TIM_Base_SetConfig+0x28>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412e:	d003      	beq.n	8004138 <TIM_Base_SetConfig+0x28>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a2f      	ldr	r2, [pc, #188]	; (80041f0 <TIM_Base_SetConfig+0xe0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d108      	bne.n	800414a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a27      	ldr	r2, [pc, #156]	; (80041ec <TIM_Base_SetConfig+0xdc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <TIM_Base_SetConfig+0x6a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004158:	d00f      	beq.n	800417a <TIM_Base_SetConfig+0x6a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a24      	ldr	r2, [pc, #144]	; (80041f0 <TIM_Base_SetConfig+0xe0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00b      	beq.n	800417a <TIM_Base_SetConfig+0x6a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a23      	ldr	r2, [pc, #140]	; (80041f4 <TIM_Base_SetConfig+0xe4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d007      	beq.n	800417a <TIM_Base_SetConfig+0x6a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a22      	ldr	r2, [pc, #136]	; (80041f8 <TIM_Base_SetConfig+0xe8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_Base_SetConfig+0x6a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a21      	ldr	r2, [pc, #132]	; (80041fc <TIM_Base_SetConfig+0xec>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d108      	bne.n	800418c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <TIM_Base_SetConfig+0xdc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <TIM_Base_SetConfig+0xc0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a0e      	ldr	r2, [pc, #56]	; (80041f4 <TIM_Base_SetConfig+0xe4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_Base_SetConfig+0xc0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <TIM_Base_SetConfig+0xe8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_Base_SetConfig+0xc0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <TIM_Base_SetConfig+0xec>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d103      	bne.n	80041d8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	615a      	str	r2, [r3, #20]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800

08004200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f023 0201 	bic.w	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 0302 	bic.w	r3, r3, #2
 800424c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a28      	ldr	r2, [pc, #160]	; (80042fc <TIM_OC1_SetConfig+0xfc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00b      	beq.n	8004278 <TIM_OC1_SetConfig+0x78>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a27      	ldr	r2, [pc, #156]	; (8004300 <TIM_OC1_SetConfig+0x100>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d007      	beq.n	8004278 <TIM_OC1_SetConfig+0x78>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <TIM_OC1_SetConfig+0x104>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_OC1_SetConfig+0x78>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a25      	ldr	r2, [pc, #148]	; (8004308 <TIM_OC1_SetConfig+0x108>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10c      	bne.n	8004292 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0308 	bic.w	r3, r3, #8
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a19      	ldr	r2, [pc, #100]	; (80042fc <TIM_OC1_SetConfig+0xfc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00b      	beq.n	80042b2 <TIM_OC1_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a18      	ldr	r2, [pc, #96]	; (8004300 <TIM_OC1_SetConfig+0x100>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d007      	beq.n	80042b2 <TIM_OC1_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a17      	ldr	r2, [pc, #92]	; (8004304 <TIM_OC1_SetConfig+0x104>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d003      	beq.n	80042b2 <TIM_OC1_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a16      	ldr	r2, [pc, #88]	; (8004308 <TIM_OC1_SetConfig+0x108>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d111      	bne.n	80042d6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	621a      	str	r2, [r3, #32]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800

0800430c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0210 	bic.w	r2, r3, #16
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0320 	bic.w	r3, r3, #32
 800435a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a24      	ldr	r2, [pc, #144]	; (80043fc <TIM_OC2_SetConfig+0xf0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10d      	bne.n	800438c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <TIM_OC2_SetConfig+0xf0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00b      	beq.n	80043ac <TIM_OC2_SetConfig+0xa0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <TIM_OC2_SetConfig+0xf4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <TIM_OC2_SetConfig+0xa0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a19      	ldr	r2, [pc, #100]	; (8004404 <TIM_OC2_SetConfig+0xf8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_OC2_SetConfig+0xa0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a18      	ldr	r2, [pc, #96]	; (8004408 <TIM_OC2_SetConfig+0xfc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d113      	bne.n	80043d4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043b2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40014000 	.word	0x40014000
 8004404:	40014400 	.word	0x40014400
 8004408:	40014800 	.word	0x40014800

0800440c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0303 	bic.w	r3, r3, #3
 8004446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a23      	ldr	r2, [pc, #140]	; (80044f8 <TIM_OC3_SetConfig+0xec>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10d      	bne.n	800448a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004488:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <TIM_OC3_SetConfig+0xec>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_OC3_SetConfig+0x9e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <TIM_OC3_SetConfig+0xf0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d007      	beq.n	80044aa <TIM_OC3_SetConfig+0x9e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a18      	ldr	r2, [pc, #96]	; (8004500 <TIM_OC3_SetConfig+0xf4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_OC3_SetConfig+0x9e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a17      	ldr	r2, [pc, #92]	; (8004504 <TIM_OC3_SetConfig+0xf8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d113      	bne.n	80044d2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	621a      	str	r2, [r3, #32]
}
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	031b      	lsls	r3, r3, #12
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a16      	ldr	r2, [pc, #88]	; (80045c0 <TIM_OC4_SetConfig+0xb8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_OC4_SetConfig+0x7c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <TIM_OC4_SetConfig+0xbc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_OC4_SetConfig+0x7c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <TIM_OC4_SetConfig+0xc0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_OC4_SetConfig+0x7c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a13      	ldr	r2, [pc, #76]	; (80045cc <TIM_OC4_SetConfig+0xc4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d109      	bne.n	8004598 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800458a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40014400 	.word	0x40014400
 80045cc:	40014800 	.word	0x40014800

080045d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004614:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	041b      	lsls	r3, r3, #16
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a15      	ldr	r2, [pc, #84]	; (800467c <TIM_OC5_SetConfig+0xac>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00b      	beq.n	8004642 <TIM_OC5_SetConfig+0x72>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <TIM_OC5_SetConfig+0xb0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <TIM_OC5_SetConfig+0x72>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <TIM_OC5_SetConfig+0xb4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <TIM_OC5_SetConfig+0x72>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a12      	ldr	r2, [pc, #72]	; (8004688 <TIM_OC5_SetConfig+0xb8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d109      	bne.n	8004656 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004648:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	621a      	str	r2, [r3, #32]
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400
 8004688:	40014800 	.word	0x40014800

0800468c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	051b      	lsls	r3, r3, #20
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a16      	ldr	r2, [pc, #88]	; (800473c <TIM_OC6_SetConfig+0xb0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00b      	beq.n	8004700 <TIM_OC6_SetConfig+0x74>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <TIM_OC6_SetConfig+0xb4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d007      	beq.n	8004700 <TIM_OC6_SetConfig+0x74>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a14      	ldr	r2, [pc, #80]	; (8004744 <TIM_OC6_SetConfig+0xb8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_OC6_SetConfig+0x74>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a13      	ldr	r2, [pc, #76]	; (8004748 <TIM_OC6_SetConfig+0xbc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d109      	bne.n	8004714 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004706:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	029b      	lsls	r3, r3, #10
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40014000 	.word	0x40014000
 8004744:	40014400 	.word	0x40014400
 8004748:	40014800 	.word	0x40014800

0800474c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	2201      	movs	r2, #1
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a1a      	ldr	r2, [r3, #32]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	43db      	mvns	r3, r3
 800476e:	401a      	ands	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1a      	ldr	r2, [r3, #32]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	fa01 f303 	lsl.w	r3, r1, r3
 8004784:	431a      	orrs	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e054      	b.n	800485a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a24      	ldr	r2, [pc, #144]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d108      	bne.n	80047ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a17      	ldr	r2, [pc, #92]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00e      	beq.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004818:	d009      	beq.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a13      	ldr	r2, [pc, #76]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d004      	beq.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a11      	ldr	r2, [pc, #68]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d10c      	bne.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	4313      	orrs	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40000400 	.word	0x40000400
 8004870:	40014000 	.word	0x40014000

08004874 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800488c:	2302      	movs	r3, #2
 800488e:	e060      	b.n	8004952 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a14      	ldr	r2, [pc, #80]	; (8004960 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d115      	bne.n	8004940 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	051b      	lsls	r3, r3, #20
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40012c00 	.word	0x40012c00

08004964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e040      	b.n	80049f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fcca 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2224      	movs	r2, #36	; 0x24
 8004990:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f82c 	bl	8004a00 <UART_SetConfig>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e022      	b.n	80049f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f9a2 	bl	8004d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa29 	bl	8004e48 <UART_CheckIdleState>
 80049f6:	4603      	mov	r3, r0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4ba2      	ldr	r3, [pc, #648]	; (8004cb8 <UART_SetConfig+0x2b8>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	6939      	ldr	r1, [r7, #16]
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a90      	ldr	r2, [pc, #576]	; (8004cbc <UART_SetConfig+0x2bc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d121      	bne.n	8004ac4 <UART_SetConfig+0xc4>
 8004a80:	4b8f      	ldr	r3, [pc, #572]	; (8004cc0 <UART_SetConfig+0x2c0>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d817      	bhi.n	8004abc <UART_SetConfig+0xbc>
 8004a8c:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <UART_SetConfig+0x94>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004aa5 	.word	0x08004aa5
 8004a98:	08004ab1 	.word	0x08004ab1
 8004a9c:	08004ab7 	.word	0x08004ab7
 8004aa0:	08004aab 	.word	0x08004aab
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e01e      	b.n	8004ae8 <UART_SetConfig+0xe8>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e01b      	b.n	8004ae8 <UART_SetConfig+0xe8>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e018      	b.n	8004ae8 <UART_SetConfig+0xe8>
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e015      	b.n	8004ae8 <UART_SetConfig+0xe8>
 8004abc:	2310      	movs	r3, #16
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	bf00      	nop
 8004ac2:	e011      	b.n	8004ae8 <UART_SetConfig+0xe8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a7e      	ldr	r2, [pc, #504]	; (8004cc4 <UART_SetConfig+0x2c4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d102      	bne.n	8004ad4 <UART_SetConfig+0xd4>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e009      	b.n	8004ae8 <UART_SetConfig+0xe8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a7b      	ldr	r2, [pc, #492]	; (8004cc8 <UART_SetConfig+0x2c8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d102      	bne.n	8004ae4 <UART_SetConfig+0xe4>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	77fb      	strb	r3, [r7, #31]
 8004ae2:	e001      	b.n	8004ae8 <UART_SetConfig+0xe8>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af0:	f040 8082 	bne.w	8004bf8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004af4:	7ffb      	ldrb	r3, [r7, #31]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d85e      	bhi.n	8004bb8 <UART_SetConfig+0x1b8>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x100>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b45 	.word	0x08004b45
 8004b08:	08004b65 	.word	0x08004b65
 8004b0c:	08004bb9 	.word	0x08004bb9
 8004b10:	08004b81 	.word	0x08004b81
 8004b14:	08004bb9 	.word	0x08004bb9
 8004b18:	08004bb9 	.word	0x08004bb9
 8004b1c:	08004bb9 	.word	0x08004bb9
 8004b20:	08004ba1 	.word	0x08004ba1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fe fff4 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8004b28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	005a      	lsls	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	441a      	add	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	61bb      	str	r3, [r7, #24]
        break;
 8004b42:	e03c      	b.n	8004bbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b44:	f7ff f806 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 8004b48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	005a      	lsls	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	441a      	add	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	61bb      	str	r3, [r7, #24]
        break;
 8004b62:	e02c      	b.n	8004bbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	085b      	lsrs	r3, r3, #1
 8004b6a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004b6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6852      	ldr	r2, [r2, #4]
 8004b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	61bb      	str	r3, [r7, #24]
        break;
 8004b7e:	e01e      	b.n	8004bbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b80:	f7fe ff50 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 8004b84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	005a      	lsls	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	441a      	add	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	61bb      	str	r3, [r7, #24]
        break;
 8004b9e:	e00e      	b.n	8004bbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	61bb      	str	r3, [r7, #24]
        break;
 8004bb6:	e002      	b.n	8004bbe <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
        break;
 8004bbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b0f      	cmp	r3, #15
 8004bc2:	d916      	bls.n	8004bf2 <UART_SetConfig+0x1f2>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bca:	d212      	bcs.n	8004bf2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f023 030f 	bic.w	r3, r3, #15
 8004bd4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	897b      	ldrh	r3, [r7, #10]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	897a      	ldrh	r2, [r7, #10]
 8004bee:	60da      	str	r2, [r3, #12]
 8004bf0:	e07d      	b.n	8004cee <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	75fb      	strb	r3, [r7, #23]
 8004bf6:	e07a      	b.n	8004cee <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8004bf8:	7ffb      	ldrb	r3, [r7, #31]
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d866      	bhi.n	8004ccc <UART_SetConfig+0x2cc>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0x204>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004ccd 	.word	0x08004ccd
 8004c14:	08004c81 	.word	0x08004c81
 8004c18:	08004ccd 	.word	0x08004ccd
 8004c1c:	08004ccd 	.word	0x08004ccd
 8004c20:	08004ccd 	.word	0x08004ccd
 8004c24:	08004c9f 	.word	0x08004c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fe ff72 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	085a      	lsrs	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	441a      	add	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	61bb      	str	r3, [r7, #24]
        break;
 8004c44:	e045      	b.n	8004cd2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c46:	f7fe ff85 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 8004c4a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	085a      	lsrs	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	441a      	add	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	61bb      	str	r3, [r7, #24]
        break;
 8004c62:	e036      	b.n	8004cd2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	085b      	lsrs	r3, r3, #1
 8004c6a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004c6e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6852      	ldr	r2, [r2, #4]
 8004c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	61bb      	str	r3, [r7, #24]
        break;
 8004c7e:	e028      	b.n	8004cd2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c80:	f7fe fed0 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 8004c84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	085a      	lsrs	r2, r3, #1
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	441a      	add	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	61bb      	str	r3, [r7, #24]
        break;
 8004c9c:	e019      	b.n	8004cd2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	085b      	lsrs	r3, r3, #1
 8004ca4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	61bb      	str	r3, [r7, #24]
        break;
 8004cb4:	e00d      	b.n	8004cd2 <UART_SetConfig+0x2d2>
 8004cb6:	bf00      	nop
 8004cb8:	efff69f3 	.word	0xefff69f3
 8004cbc:	40013800 	.word	0x40013800
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	40004400 	.word	0x40004400
 8004cc8:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
        break;
 8004cd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b0f      	cmp	r3, #15
 8004cd6:	d908      	bls.n	8004cea <UART_SetConfig+0x2ea>
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cde:	d204      	bcs.n	8004cea <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	60da      	str	r2, [r3, #12]
 8004ce8:	e001      	b.n	8004cee <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01a      	beq.n	8004e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e02:	d10a      	bne.n	8004e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e56:	f7fc fb9b 	bl	8001590 <HAL_GetTick>
 8004e5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d10e      	bne.n	8004e88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f82a 	bl	8004ed2 <UART_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e020      	b.n	8004eca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d10e      	bne.n	8004eb4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f814 	bl	8004ed2 <UART_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e00a      	b.n	8004eca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee2:	e05d      	b.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eea:	d059      	beq.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eec:	f7fc fb50 	bl	8001590 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d302      	bcc.n	8004f02 <UART_WaitOnFlagUntilTimeout+0x30>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d11b      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e042      	b.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02b      	beq.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f56:	d123      	bne.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f60:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f70:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2220      	movs	r2, #32
 8004f92:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e00f      	b.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69da      	ldr	r2, [r3, #28]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d092      	beq.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <__errno>:
 8004fc8:	4b01      	ldr	r3, [pc, #4]	; (8004fd0 <__errno+0x8>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	2000000c 	.word	0x2000000c

08004fd4 <__libc_init_array>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4e0d      	ldr	r6, [pc, #52]	; (800500c <__libc_init_array+0x38>)
 8004fd8:	4c0d      	ldr	r4, [pc, #52]	; (8005010 <__libc_init_array+0x3c>)
 8004fda:	1ba4      	subs	r4, r4, r6
 8004fdc:	10a4      	asrs	r4, r4, #2
 8004fde:	2500      	movs	r5, #0
 8004fe0:	42a5      	cmp	r5, r4
 8004fe2:	d109      	bne.n	8004ff8 <__libc_init_array+0x24>
 8004fe4:	4e0b      	ldr	r6, [pc, #44]	; (8005014 <__libc_init_array+0x40>)
 8004fe6:	4c0c      	ldr	r4, [pc, #48]	; (8005018 <__libc_init_array+0x44>)
 8004fe8:	f002 fdf0 	bl	8007bcc <_init>
 8004fec:	1ba4      	subs	r4, r4, r6
 8004fee:	10a4      	asrs	r4, r4, #2
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	42a5      	cmp	r5, r4
 8004ff4:	d105      	bne.n	8005002 <__libc_init_array+0x2e>
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ffc:	4798      	blx	r3
 8004ffe:	3501      	adds	r5, #1
 8005000:	e7ee      	b.n	8004fe0 <__libc_init_array+0xc>
 8005002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005006:	4798      	blx	r3
 8005008:	3501      	adds	r5, #1
 800500a:	e7f2      	b.n	8004ff2 <__libc_init_array+0x1e>
 800500c:	08007f0c 	.word	0x08007f0c
 8005010:	08007f0c 	.word	0x08007f0c
 8005014:	08007f0c 	.word	0x08007f0c
 8005018:	08007f10 	.word	0x08007f10

0800501c <memset>:
 800501c:	4402      	add	r2, r0
 800501e:	4603      	mov	r3, r0
 8005020:	4293      	cmp	r3, r2
 8005022:	d100      	bne.n	8005026 <memset+0xa>
 8005024:	4770      	bx	lr
 8005026:	f803 1b01 	strb.w	r1, [r3], #1
 800502a:	e7f9      	b.n	8005020 <memset+0x4>

0800502c <__cvt>:
 800502c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005030:	ec55 4b10 	vmov	r4, r5, d0
 8005034:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005036:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800503a:	2d00      	cmp	r5, #0
 800503c:	460e      	mov	r6, r1
 800503e:	4691      	mov	r9, r2
 8005040:	4619      	mov	r1, r3
 8005042:	bfb8      	it	lt
 8005044:	4622      	movlt	r2, r4
 8005046:	462b      	mov	r3, r5
 8005048:	f027 0720 	bic.w	r7, r7, #32
 800504c:	bfbb      	ittet	lt
 800504e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005052:	461d      	movlt	r5, r3
 8005054:	2300      	movge	r3, #0
 8005056:	232d      	movlt	r3, #45	; 0x2d
 8005058:	bfb8      	it	lt
 800505a:	4614      	movlt	r4, r2
 800505c:	2f46      	cmp	r7, #70	; 0x46
 800505e:	700b      	strb	r3, [r1, #0]
 8005060:	d004      	beq.n	800506c <__cvt+0x40>
 8005062:	2f45      	cmp	r7, #69	; 0x45
 8005064:	d100      	bne.n	8005068 <__cvt+0x3c>
 8005066:	3601      	adds	r6, #1
 8005068:	2102      	movs	r1, #2
 800506a:	e000      	b.n	800506e <__cvt+0x42>
 800506c:	2103      	movs	r1, #3
 800506e:	ab03      	add	r3, sp, #12
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	ab02      	add	r3, sp, #8
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	4632      	mov	r2, r6
 8005078:	4653      	mov	r3, sl
 800507a:	ec45 4b10 	vmov	d0, r4, r5
 800507e:	f000 fcd7 	bl	8005a30 <_dtoa_r>
 8005082:	2f47      	cmp	r7, #71	; 0x47
 8005084:	4680      	mov	r8, r0
 8005086:	d102      	bne.n	800508e <__cvt+0x62>
 8005088:	f019 0f01 	tst.w	r9, #1
 800508c:	d026      	beq.n	80050dc <__cvt+0xb0>
 800508e:	2f46      	cmp	r7, #70	; 0x46
 8005090:	eb08 0906 	add.w	r9, r8, r6
 8005094:	d111      	bne.n	80050ba <__cvt+0x8e>
 8005096:	f898 3000 	ldrb.w	r3, [r8]
 800509a:	2b30      	cmp	r3, #48	; 0x30
 800509c:	d10a      	bne.n	80050b4 <__cvt+0x88>
 800509e:	2200      	movs	r2, #0
 80050a0:	2300      	movs	r3, #0
 80050a2:	4620      	mov	r0, r4
 80050a4:	4629      	mov	r1, r5
 80050a6:	f7fb fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80050aa:	b918      	cbnz	r0, 80050b4 <__cvt+0x88>
 80050ac:	f1c6 0601 	rsb	r6, r6, #1
 80050b0:	f8ca 6000 	str.w	r6, [sl]
 80050b4:	f8da 3000 	ldr.w	r3, [sl]
 80050b8:	4499      	add	r9, r3
 80050ba:	2200      	movs	r2, #0
 80050bc:	2300      	movs	r3, #0
 80050be:	4620      	mov	r0, r4
 80050c0:	4629      	mov	r1, r5
 80050c2:	f7fb fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80050c6:	b938      	cbnz	r0, 80050d8 <__cvt+0xac>
 80050c8:	2230      	movs	r2, #48	; 0x30
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	454b      	cmp	r3, r9
 80050ce:	d205      	bcs.n	80050dc <__cvt+0xb0>
 80050d0:	1c59      	adds	r1, r3, #1
 80050d2:	9103      	str	r1, [sp, #12]
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	e7f8      	b.n	80050ca <__cvt+0x9e>
 80050d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80050dc:	9b03      	ldr	r3, [sp, #12]
 80050de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050e0:	eba3 0308 	sub.w	r3, r3, r8
 80050e4:	4640      	mov	r0, r8
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	b004      	add	sp, #16
 80050ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080050ee <__exponent>:
 80050ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050f0:	2900      	cmp	r1, #0
 80050f2:	4604      	mov	r4, r0
 80050f4:	bfba      	itte	lt
 80050f6:	4249      	neglt	r1, r1
 80050f8:	232d      	movlt	r3, #45	; 0x2d
 80050fa:	232b      	movge	r3, #43	; 0x2b
 80050fc:	2909      	cmp	r1, #9
 80050fe:	f804 2b02 	strb.w	r2, [r4], #2
 8005102:	7043      	strb	r3, [r0, #1]
 8005104:	dd20      	ble.n	8005148 <__exponent+0x5a>
 8005106:	f10d 0307 	add.w	r3, sp, #7
 800510a:	461f      	mov	r7, r3
 800510c:	260a      	movs	r6, #10
 800510e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005112:	fb06 1115 	mls	r1, r6, r5, r1
 8005116:	3130      	adds	r1, #48	; 0x30
 8005118:	2d09      	cmp	r5, #9
 800511a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800511e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005122:	4629      	mov	r1, r5
 8005124:	dc09      	bgt.n	800513a <__exponent+0x4c>
 8005126:	3130      	adds	r1, #48	; 0x30
 8005128:	3b02      	subs	r3, #2
 800512a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800512e:	42bb      	cmp	r3, r7
 8005130:	4622      	mov	r2, r4
 8005132:	d304      	bcc.n	800513e <__exponent+0x50>
 8005134:	1a10      	subs	r0, r2, r0
 8005136:	b003      	add	sp, #12
 8005138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800513a:	4613      	mov	r3, r2
 800513c:	e7e7      	b.n	800510e <__exponent+0x20>
 800513e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005142:	f804 2b01 	strb.w	r2, [r4], #1
 8005146:	e7f2      	b.n	800512e <__exponent+0x40>
 8005148:	2330      	movs	r3, #48	; 0x30
 800514a:	4419      	add	r1, r3
 800514c:	7083      	strb	r3, [r0, #2]
 800514e:	1d02      	adds	r2, r0, #4
 8005150:	70c1      	strb	r1, [r0, #3]
 8005152:	e7ef      	b.n	8005134 <__exponent+0x46>

08005154 <_printf_float>:
 8005154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005158:	b08d      	sub	sp, #52	; 0x34
 800515a:	460c      	mov	r4, r1
 800515c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005160:	4616      	mov	r6, r2
 8005162:	461f      	mov	r7, r3
 8005164:	4605      	mov	r5, r0
 8005166:	f001 fae5 	bl	8006734 <_localeconv_r>
 800516a:	6803      	ldr	r3, [r0, #0]
 800516c:	9304      	str	r3, [sp, #16]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fb f82e 	bl	80001d0 <strlen>
 8005174:	2300      	movs	r3, #0
 8005176:	930a      	str	r3, [sp, #40]	; 0x28
 8005178:	f8d8 3000 	ldr.w	r3, [r8]
 800517c:	9005      	str	r0, [sp, #20]
 800517e:	3307      	adds	r3, #7
 8005180:	f023 0307 	bic.w	r3, r3, #7
 8005184:	f103 0208 	add.w	r2, r3, #8
 8005188:	f894 a018 	ldrb.w	sl, [r4, #24]
 800518c:	f8d4 b000 	ldr.w	fp, [r4]
 8005190:	f8c8 2000 	str.w	r2, [r8]
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800519c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80051a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80051a4:	9307      	str	r3, [sp, #28]
 80051a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051ae:	4ba7      	ldr	r3, [pc, #668]	; (800544c <_printf_float+0x2f8>)
 80051b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051b4:	f7fb fcba 	bl	8000b2c <__aeabi_dcmpun>
 80051b8:	bb70      	cbnz	r0, 8005218 <_printf_float+0xc4>
 80051ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051be:	4ba3      	ldr	r3, [pc, #652]	; (800544c <_printf_float+0x2f8>)
 80051c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051c4:	f7fb fc94 	bl	8000af0 <__aeabi_dcmple>
 80051c8:	bb30      	cbnz	r0, 8005218 <_printf_float+0xc4>
 80051ca:	2200      	movs	r2, #0
 80051cc:	2300      	movs	r3, #0
 80051ce:	4640      	mov	r0, r8
 80051d0:	4649      	mov	r1, r9
 80051d2:	f7fb fc83 	bl	8000adc <__aeabi_dcmplt>
 80051d6:	b110      	cbz	r0, 80051de <_printf_float+0x8a>
 80051d8:	232d      	movs	r3, #45	; 0x2d
 80051da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051de:	4a9c      	ldr	r2, [pc, #624]	; (8005450 <_printf_float+0x2fc>)
 80051e0:	4b9c      	ldr	r3, [pc, #624]	; (8005454 <_printf_float+0x300>)
 80051e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80051e6:	bf8c      	ite	hi
 80051e8:	4690      	movhi	r8, r2
 80051ea:	4698      	movls	r8, r3
 80051ec:	2303      	movs	r3, #3
 80051ee:	f02b 0204 	bic.w	r2, fp, #4
 80051f2:	6123      	str	r3, [r4, #16]
 80051f4:	6022      	str	r2, [r4, #0]
 80051f6:	f04f 0900 	mov.w	r9, #0
 80051fa:	9700      	str	r7, [sp, #0]
 80051fc:	4633      	mov	r3, r6
 80051fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8005200:	4621      	mov	r1, r4
 8005202:	4628      	mov	r0, r5
 8005204:	f000 f9e6 	bl	80055d4 <_printf_common>
 8005208:	3001      	adds	r0, #1
 800520a:	f040 808d 	bne.w	8005328 <_printf_float+0x1d4>
 800520e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005212:	b00d      	add	sp, #52	; 0x34
 8005214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005218:	4642      	mov	r2, r8
 800521a:	464b      	mov	r3, r9
 800521c:	4640      	mov	r0, r8
 800521e:	4649      	mov	r1, r9
 8005220:	f7fb fc84 	bl	8000b2c <__aeabi_dcmpun>
 8005224:	b110      	cbz	r0, 800522c <_printf_float+0xd8>
 8005226:	4a8c      	ldr	r2, [pc, #560]	; (8005458 <_printf_float+0x304>)
 8005228:	4b8c      	ldr	r3, [pc, #560]	; (800545c <_printf_float+0x308>)
 800522a:	e7da      	b.n	80051e2 <_printf_float+0x8e>
 800522c:	6861      	ldr	r1, [r4, #4]
 800522e:	1c4b      	adds	r3, r1, #1
 8005230:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005234:	a80a      	add	r0, sp, #40	; 0x28
 8005236:	d13e      	bne.n	80052b6 <_printf_float+0x162>
 8005238:	2306      	movs	r3, #6
 800523a:	6063      	str	r3, [r4, #4]
 800523c:	2300      	movs	r3, #0
 800523e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005242:	ab09      	add	r3, sp, #36	; 0x24
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	ec49 8b10 	vmov	d0, r8, r9
 800524a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800524e:	6022      	str	r2, [r4, #0]
 8005250:	f8cd a004 	str.w	sl, [sp, #4]
 8005254:	6861      	ldr	r1, [r4, #4]
 8005256:	4628      	mov	r0, r5
 8005258:	f7ff fee8 	bl	800502c <__cvt>
 800525c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005260:	2b47      	cmp	r3, #71	; 0x47
 8005262:	4680      	mov	r8, r0
 8005264:	d109      	bne.n	800527a <_printf_float+0x126>
 8005266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005268:	1cd8      	adds	r0, r3, #3
 800526a:	db02      	blt.n	8005272 <_printf_float+0x11e>
 800526c:	6862      	ldr	r2, [r4, #4]
 800526e:	4293      	cmp	r3, r2
 8005270:	dd47      	ble.n	8005302 <_printf_float+0x1ae>
 8005272:	f1aa 0a02 	sub.w	sl, sl, #2
 8005276:	fa5f fa8a 	uxtb.w	sl, sl
 800527a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800527e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005280:	d824      	bhi.n	80052cc <_printf_float+0x178>
 8005282:	3901      	subs	r1, #1
 8005284:	4652      	mov	r2, sl
 8005286:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800528a:	9109      	str	r1, [sp, #36]	; 0x24
 800528c:	f7ff ff2f 	bl	80050ee <__exponent>
 8005290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005292:	1813      	adds	r3, r2, r0
 8005294:	2a01      	cmp	r2, #1
 8005296:	4681      	mov	r9, r0
 8005298:	6123      	str	r3, [r4, #16]
 800529a:	dc02      	bgt.n	80052a2 <_printf_float+0x14e>
 800529c:	6822      	ldr	r2, [r4, #0]
 800529e:	07d1      	lsls	r1, r2, #31
 80052a0:	d501      	bpl.n	80052a6 <_printf_float+0x152>
 80052a2:	3301      	adds	r3, #1
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0a5      	beq.n	80051fa <_printf_float+0xa6>
 80052ae:	232d      	movs	r3, #45	; 0x2d
 80052b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b4:	e7a1      	b.n	80051fa <_printf_float+0xa6>
 80052b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80052ba:	f000 8177 	beq.w	80055ac <_printf_float+0x458>
 80052be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80052c2:	d1bb      	bne.n	800523c <_printf_float+0xe8>
 80052c4:	2900      	cmp	r1, #0
 80052c6:	d1b9      	bne.n	800523c <_printf_float+0xe8>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e7b6      	b.n	800523a <_printf_float+0xe6>
 80052cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80052d0:	d119      	bne.n	8005306 <_printf_float+0x1b2>
 80052d2:	2900      	cmp	r1, #0
 80052d4:	6863      	ldr	r3, [r4, #4]
 80052d6:	dd0c      	ble.n	80052f2 <_printf_float+0x19e>
 80052d8:	6121      	str	r1, [r4, #16]
 80052da:	b913      	cbnz	r3, 80052e2 <_printf_float+0x18e>
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	07d2      	lsls	r2, r2, #31
 80052e0:	d502      	bpl.n	80052e8 <_printf_float+0x194>
 80052e2:	3301      	adds	r3, #1
 80052e4:	440b      	add	r3, r1
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80052ec:	f04f 0900 	mov.w	r9, #0
 80052f0:	e7d9      	b.n	80052a6 <_printf_float+0x152>
 80052f2:	b913      	cbnz	r3, 80052fa <_printf_float+0x1a6>
 80052f4:	6822      	ldr	r2, [r4, #0]
 80052f6:	07d0      	lsls	r0, r2, #31
 80052f8:	d501      	bpl.n	80052fe <_printf_float+0x1aa>
 80052fa:	3302      	adds	r3, #2
 80052fc:	e7f3      	b.n	80052e6 <_printf_float+0x192>
 80052fe:	2301      	movs	r3, #1
 8005300:	e7f1      	b.n	80052e6 <_printf_float+0x192>
 8005302:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005306:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800530a:	4293      	cmp	r3, r2
 800530c:	db05      	blt.n	800531a <_printf_float+0x1c6>
 800530e:	6822      	ldr	r2, [r4, #0]
 8005310:	6123      	str	r3, [r4, #16]
 8005312:	07d1      	lsls	r1, r2, #31
 8005314:	d5e8      	bpl.n	80052e8 <_printf_float+0x194>
 8005316:	3301      	adds	r3, #1
 8005318:	e7e5      	b.n	80052e6 <_printf_float+0x192>
 800531a:	2b00      	cmp	r3, #0
 800531c:	bfd4      	ite	le
 800531e:	f1c3 0302 	rsble	r3, r3, #2
 8005322:	2301      	movgt	r3, #1
 8005324:	4413      	add	r3, r2
 8005326:	e7de      	b.n	80052e6 <_printf_float+0x192>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	055a      	lsls	r2, r3, #21
 800532c:	d407      	bmi.n	800533e <_printf_float+0x1ea>
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	4642      	mov	r2, r8
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	47b8      	blx	r7
 8005338:	3001      	adds	r0, #1
 800533a:	d12b      	bne.n	8005394 <_printf_float+0x240>
 800533c:	e767      	b.n	800520e <_printf_float+0xba>
 800533e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005342:	f240 80dc 	bls.w	80054fe <_printf_float+0x3aa>
 8005346:	2200      	movs	r2, #0
 8005348:	2300      	movs	r3, #0
 800534a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800534e:	f7fb fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005352:	2800      	cmp	r0, #0
 8005354:	d033      	beq.n	80053be <_printf_float+0x26a>
 8005356:	2301      	movs	r3, #1
 8005358:	4a41      	ldr	r2, [pc, #260]	; (8005460 <_printf_float+0x30c>)
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	f43f af54 	beq.w	800520e <_printf_float+0xba>
 8005366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800536a:	429a      	cmp	r2, r3
 800536c:	db02      	blt.n	8005374 <_printf_float+0x220>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	07d8      	lsls	r0, r3, #31
 8005372:	d50f      	bpl.n	8005394 <_printf_float+0x240>
 8005374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005378:	4631      	mov	r1, r6
 800537a:	4628      	mov	r0, r5
 800537c:	47b8      	blx	r7
 800537e:	3001      	adds	r0, #1
 8005380:	f43f af45 	beq.w	800520e <_printf_float+0xba>
 8005384:	f04f 0800 	mov.w	r8, #0
 8005388:	f104 091a 	add.w	r9, r4, #26
 800538c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	4543      	cmp	r3, r8
 8005392:	dc09      	bgt.n	80053a8 <_printf_float+0x254>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	079b      	lsls	r3, r3, #30
 8005398:	f100 8103 	bmi.w	80055a2 <_printf_float+0x44e>
 800539c:	68e0      	ldr	r0, [r4, #12]
 800539e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053a0:	4298      	cmp	r0, r3
 80053a2:	bfb8      	it	lt
 80053a4:	4618      	movlt	r0, r3
 80053a6:	e734      	b.n	8005212 <_printf_float+0xbe>
 80053a8:	2301      	movs	r3, #1
 80053aa:	464a      	mov	r2, r9
 80053ac:	4631      	mov	r1, r6
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b8      	blx	r7
 80053b2:	3001      	adds	r0, #1
 80053b4:	f43f af2b 	beq.w	800520e <_printf_float+0xba>
 80053b8:	f108 0801 	add.w	r8, r8, #1
 80053bc:	e7e6      	b.n	800538c <_printf_float+0x238>
 80053be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	dc2b      	bgt.n	800541c <_printf_float+0x2c8>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4a26      	ldr	r2, [pc, #152]	; (8005460 <_printf_float+0x30c>)
 80053c8:	4631      	mov	r1, r6
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	f43f af1d 	beq.w	800520e <_printf_float+0xba>
 80053d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d6:	b923      	cbnz	r3, 80053e2 <_printf_float+0x28e>
 80053d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053da:	b913      	cbnz	r3, 80053e2 <_printf_float+0x28e>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	07d9      	lsls	r1, r3, #31
 80053e0:	d5d8      	bpl.n	8005394 <_printf_float+0x240>
 80053e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053e6:	4631      	mov	r1, r6
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b8      	blx	r7
 80053ec:	3001      	adds	r0, #1
 80053ee:	f43f af0e 	beq.w	800520e <_printf_float+0xba>
 80053f2:	f04f 0900 	mov.w	r9, #0
 80053f6:	f104 0a1a 	add.w	sl, r4, #26
 80053fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fc:	425b      	negs	r3, r3
 80053fe:	454b      	cmp	r3, r9
 8005400:	dc01      	bgt.n	8005406 <_printf_float+0x2b2>
 8005402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005404:	e794      	b.n	8005330 <_printf_float+0x1dc>
 8005406:	2301      	movs	r3, #1
 8005408:	4652      	mov	r2, sl
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	f43f aefc 	beq.w	800520e <_printf_float+0xba>
 8005416:	f109 0901 	add.w	r9, r9, #1
 800541a:	e7ee      	b.n	80053fa <_printf_float+0x2a6>
 800541c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800541e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005420:	429a      	cmp	r2, r3
 8005422:	bfa8      	it	ge
 8005424:	461a      	movge	r2, r3
 8005426:	2a00      	cmp	r2, #0
 8005428:	4691      	mov	r9, r2
 800542a:	dd07      	ble.n	800543c <_printf_float+0x2e8>
 800542c:	4613      	mov	r3, r2
 800542e:	4631      	mov	r1, r6
 8005430:	4642      	mov	r2, r8
 8005432:	4628      	mov	r0, r5
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f aee9 	beq.w	800520e <_printf_float+0xba>
 800543c:	f104 031a 	add.w	r3, r4, #26
 8005440:	f04f 0b00 	mov.w	fp, #0
 8005444:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005448:	9306      	str	r3, [sp, #24]
 800544a:	e015      	b.n	8005478 <_printf_float+0x324>
 800544c:	7fefffff 	.word	0x7fefffff
 8005450:	08007c34 	.word	0x08007c34
 8005454:	08007c30 	.word	0x08007c30
 8005458:	08007c3c 	.word	0x08007c3c
 800545c:	08007c38 	.word	0x08007c38
 8005460:	08007c40 	.word	0x08007c40
 8005464:	2301      	movs	r3, #1
 8005466:	9a06      	ldr	r2, [sp, #24]
 8005468:	4631      	mov	r1, r6
 800546a:	4628      	mov	r0, r5
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	f43f aecd 	beq.w	800520e <_printf_float+0xba>
 8005474:	f10b 0b01 	add.w	fp, fp, #1
 8005478:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800547c:	ebaa 0309 	sub.w	r3, sl, r9
 8005480:	455b      	cmp	r3, fp
 8005482:	dcef      	bgt.n	8005464 <_printf_float+0x310>
 8005484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005488:	429a      	cmp	r2, r3
 800548a:	44d0      	add	r8, sl
 800548c:	db15      	blt.n	80054ba <_printf_float+0x366>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	07da      	lsls	r2, r3, #31
 8005492:	d412      	bmi.n	80054ba <_printf_float+0x366>
 8005494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005496:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005498:	eba3 020a 	sub.w	r2, r3, sl
 800549c:	eba3 0a01 	sub.w	sl, r3, r1
 80054a0:	4592      	cmp	sl, r2
 80054a2:	bfa8      	it	ge
 80054a4:	4692      	movge	sl, r2
 80054a6:	f1ba 0f00 	cmp.w	sl, #0
 80054aa:	dc0e      	bgt.n	80054ca <_printf_float+0x376>
 80054ac:	f04f 0800 	mov.w	r8, #0
 80054b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054b4:	f104 091a 	add.w	r9, r4, #26
 80054b8:	e019      	b.n	80054ee <_printf_float+0x39a>
 80054ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	d1e5      	bne.n	8005494 <_printf_float+0x340>
 80054c8:	e6a1      	b.n	800520e <_printf_float+0xba>
 80054ca:	4653      	mov	r3, sl
 80054cc:	4642      	mov	r2, r8
 80054ce:	4631      	mov	r1, r6
 80054d0:	4628      	mov	r0, r5
 80054d2:	47b8      	blx	r7
 80054d4:	3001      	adds	r0, #1
 80054d6:	d1e9      	bne.n	80054ac <_printf_float+0x358>
 80054d8:	e699      	b.n	800520e <_printf_float+0xba>
 80054da:	2301      	movs	r3, #1
 80054dc:	464a      	mov	r2, r9
 80054de:	4631      	mov	r1, r6
 80054e0:	4628      	mov	r0, r5
 80054e2:	47b8      	blx	r7
 80054e4:	3001      	adds	r0, #1
 80054e6:	f43f ae92 	beq.w	800520e <_printf_float+0xba>
 80054ea:	f108 0801 	add.w	r8, r8, #1
 80054ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	eba3 030a 	sub.w	r3, r3, sl
 80054f8:	4543      	cmp	r3, r8
 80054fa:	dcee      	bgt.n	80054da <_printf_float+0x386>
 80054fc:	e74a      	b.n	8005394 <_printf_float+0x240>
 80054fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005500:	2a01      	cmp	r2, #1
 8005502:	dc01      	bgt.n	8005508 <_printf_float+0x3b4>
 8005504:	07db      	lsls	r3, r3, #31
 8005506:	d53a      	bpl.n	800557e <_printf_float+0x42a>
 8005508:	2301      	movs	r3, #1
 800550a:	4642      	mov	r2, r8
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	f43f ae7b 	beq.w	800520e <_printf_float+0xba>
 8005518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800551c:	4631      	mov	r1, r6
 800551e:	4628      	mov	r0, r5
 8005520:	47b8      	blx	r7
 8005522:	3001      	adds	r0, #1
 8005524:	f108 0801 	add.w	r8, r8, #1
 8005528:	f43f ae71 	beq.w	800520e <_printf_float+0xba>
 800552c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800552e:	2200      	movs	r2, #0
 8005530:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005538:	2300      	movs	r3, #0
 800553a:	f7fb fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800553e:	b9c8      	cbnz	r0, 8005574 <_printf_float+0x420>
 8005540:	4653      	mov	r3, sl
 8005542:	4642      	mov	r2, r8
 8005544:	4631      	mov	r1, r6
 8005546:	4628      	mov	r0, r5
 8005548:	47b8      	blx	r7
 800554a:	3001      	adds	r0, #1
 800554c:	d10e      	bne.n	800556c <_printf_float+0x418>
 800554e:	e65e      	b.n	800520e <_printf_float+0xba>
 8005550:	2301      	movs	r3, #1
 8005552:	4652      	mov	r2, sl
 8005554:	4631      	mov	r1, r6
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	f43f ae57 	beq.w	800520e <_printf_float+0xba>
 8005560:	f108 0801 	add.w	r8, r8, #1
 8005564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005566:	3b01      	subs	r3, #1
 8005568:	4543      	cmp	r3, r8
 800556a:	dcf1      	bgt.n	8005550 <_printf_float+0x3fc>
 800556c:	464b      	mov	r3, r9
 800556e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005572:	e6de      	b.n	8005332 <_printf_float+0x1de>
 8005574:	f04f 0800 	mov.w	r8, #0
 8005578:	f104 0a1a 	add.w	sl, r4, #26
 800557c:	e7f2      	b.n	8005564 <_printf_float+0x410>
 800557e:	2301      	movs	r3, #1
 8005580:	e7df      	b.n	8005542 <_printf_float+0x3ee>
 8005582:	2301      	movs	r3, #1
 8005584:	464a      	mov	r2, r9
 8005586:	4631      	mov	r1, r6
 8005588:	4628      	mov	r0, r5
 800558a:	47b8      	blx	r7
 800558c:	3001      	adds	r0, #1
 800558e:	f43f ae3e 	beq.w	800520e <_printf_float+0xba>
 8005592:	f108 0801 	add.w	r8, r8, #1
 8005596:	68e3      	ldr	r3, [r4, #12]
 8005598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	4543      	cmp	r3, r8
 800559e:	dcf0      	bgt.n	8005582 <_printf_float+0x42e>
 80055a0:	e6fc      	b.n	800539c <_printf_float+0x248>
 80055a2:	f04f 0800 	mov.w	r8, #0
 80055a6:	f104 0919 	add.w	r9, r4, #25
 80055aa:	e7f4      	b.n	8005596 <_printf_float+0x442>
 80055ac:	2900      	cmp	r1, #0
 80055ae:	f43f ae8b 	beq.w	80052c8 <_printf_float+0x174>
 80055b2:	2300      	movs	r3, #0
 80055b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80055b8:	ab09      	add	r3, sp, #36	; 0x24
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	ec49 8b10 	vmov	d0, r8, r9
 80055c0:	6022      	str	r2, [r4, #0]
 80055c2:	f8cd a004 	str.w	sl, [sp, #4]
 80055c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055ca:	4628      	mov	r0, r5
 80055cc:	f7ff fd2e 	bl	800502c <__cvt>
 80055d0:	4680      	mov	r8, r0
 80055d2:	e648      	b.n	8005266 <_printf_float+0x112>

080055d4 <_printf_common>:
 80055d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d8:	4691      	mov	r9, r2
 80055da:	461f      	mov	r7, r3
 80055dc:	688a      	ldr	r2, [r1, #8]
 80055de:	690b      	ldr	r3, [r1, #16]
 80055e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055e4:	4293      	cmp	r3, r2
 80055e6:	bfb8      	it	lt
 80055e8:	4613      	movlt	r3, r2
 80055ea:	f8c9 3000 	str.w	r3, [r9]
 80055ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055f2:	4606      	mov	r6, r0
 80055f4:	460c      	mov	r4, r1
 80055f6:	b112      	cbz	r2, 80055fe <_printf_common+0x2a>
 80055f8:	3301      	adds	r3, #1
 80055fa:	f8c9 3000 	str.w	r3, [r9]
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	0699      	lsls	r1, r3, #26
 8005602:	bf42      	ittt	mi
 8005604:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005608:	3302      	addmi	r3, #2
 800560a:	f8c9 3000 	strmi.w	r3, [r9]
 800560e:	6825      	ldr	r5, [r4, #0]
 8005610:	f015 0506 	ands.w	r5, r5, #6
 8005614:	d107      	bne.n	8005626 <_printf_common+0x52>
 8005616:	f104 0a19 	add.w	sl, r4, #25
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	f8d9 2000 	ldr.w	r2, [r9]
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	42ab      	cmp	r3, r5
 8005624:	dc28      	bgt.n	8005678 <_printf_common+0xa4>
 8005626:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	3300      	adds	r3, #0
 800562e:	bf18      	it	ne
 8005630:	2301      	movne	r3, #1
 8005632:	0692      	lsls	r2, r2, #26
 8005634:	d42d      	bmi.n	8005692 <_printf_common+0xbe>
 8005636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800563a:	4639      	mov	r1, r7
 800563c:	4630      	mov	r0, r6
 800563e:	47c0      	blx	r8
 8005640:	3001      	adds	r0, #1
 8005642:	d020      	beq.n	8005686 <_printf_common+0xb2>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	68e5      	ldr	r5, [r4, #12]
 8005648:	f8d9 2000 	ldr.w	r2, [r9]
 800564c:	f003 0306 	and.w	r3, r3, #6
 8005650:	2b04      	cmp	r3, #4
 8005652:	bf08      	it	eq
 8005654:	1aad      	subeq	r5, r5, r2
 8005656:	68a3      	ldr	r3, [r4, #8]
 8005658:	6922      	ldr	r2, [r4, #16]
 800565a:	bf0c      	ite	eq
 800565c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005660:	2500      	movne	r5, #0
 8005662:	4293      	cmp	r3, r2
 8005664:	bfc4      	itt	gt
 8005666:	1a9b      	subgt	r3, r3, r2
 8005668:	18ed      	addgt	r5, r5, r3
 800566a:	f04f 0900 	mov.w	r9, #0
 800566e:	341a      	adds	r4, #26
 8005670:	454d      	cmp	r5, r9
 8005672:	d11a      	bne.n	80056aa <_printf_common+0xd6>
 8005674:	2000      	movs	r0, #0
 8005676:	e008      	b.n	800568a <_printf_common+0xb6>
 8005678:	2301      	movs	r3, #1
 800567a:	4652      	mov	r2, sl
 800567c:	4639      	mov	r1, r7
 800567e:	4630      	mov	r0, r6
 8005680:	47c0      	blx	r8
 8005682:	3001      	adds	r0, #1
 8005684:	d103      	bne.n	800568e <_printf_common+0xba>
 8005686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800568a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568e:	3501      	adds	r5, #1
 8005690:	e7c3      	b.n	800561a <_printf_common+0x46>
 8005692:	18e1      	adds	r1, r4, r3
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	2030      	movs	r0, #48	; 0x30
 8005698:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800569c:	4422      	add	r2, r4
 800569e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056a6:	3302      	adds	r3, #2
 80056a8:	e7c5      	b.n	8005636 <_printf_common+0x62>
 80056aa:	2301      	movs	r3, #1
 80056ac:	4622      	mov	r2, r4
 80056ae:	4639      	mov	r1, r7
 80056b0:	4630      	mov	r0, r6
 80056b2:	47c0      	blx	r8
 80056b4:	3001      	adds	r0, #1
 80056b6:	d0e6      	beq.n	8005686 <_printf_common+0xb2>
 80056b8:	f109 0901 	add.w	r9, r9, #1
 80056bc:	e7d8      	b.n	8005670 <_printf_common+0x9c>
	...

080056c0 <_printf_i>:
 80056c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80056c8:	460c      	mov	r4, r1
 80056ca:	7e09      	ldrb	r1, [r1, #24]
 80056cc:	b085      	sub	sp, #20
 80056ce:	296e      	cmp	r1, #110	; 0x6e
 80056d0:	4617      	mov	r7, r2
 80056d2:	4606      	mov	r6, r0
 80056d4:	4698      	mov	r8, r3
 80056d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056d8:	f000 80b3 	beq.w	8005842 <_printf_i+0x182>
 80056dc:	d822      	bhi.n	8005724 <_printf_i+0x64>
 80056de:	2963      	cmp	r1, #99	; 0x63
 80056e0:	d036      	beq.n	8005750 <_printf_i+0x90>
 80056e2:	d80a      	bhi.n	80056fa <_printf_i+0x3a>
 80056e4:	2900      	cmp	r1, #0
 80056e6:	f000 80b9 	beq.w	800585c <_printf_i+0x19c>
 80056ea:	2958      	cmp	r1, #88	; 0x58
 80056ec:	f000 8083 	beq.w	80057f6 <_printf_i+0x136>
 80056f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80056f8:	e032      	b.n	8005760 <_printf_i+0xa0>
 80056fa:	2964      	cmp	r1, #100	; 0x64
 80056fc:	d001      	beq.n	8005702 <_printf_i+0x42>
 80056fe:	2969      	cmp	r1, #105	; 0x69
 8005700:	d1f6      	bne.n	80056f0 <_printf_i+0x30>
 8005702:	6820      	ldr	r0, [r4, #0]
 8005704:	6813      	ldr	r3, [r2, #0]
 8005706:	0605      	lsls	r5, r0, #24
 8005708:	f103 0104 	add.w	r1, r3, #4
 800570c:	d52a      	bpl.n	8005764 <_printf_i+0xa4>
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6011      	str	r1, [r2, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	da03      	bge.n	800571e <_printf_i+0x5e>
 8005716:	222d      	movs	r2, #45	; 0x2d
 8005718:	425b      	negs	r3, r3
 800571a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800571e:	486f      	ldr	r0, [pc, #444]	; (80058dc <_printf_i+0x21c>)
 8005720:	220a      	movs	r2, #10
 8005722:	e039      	b.n	8005798 <_printf_i+0xd8>
 8005724:	2973      	cmp	r1, #115	; 0x73
 8005726:	f000 809d 	beq.w	8005864 <_printf_i+0x1a4>
 800572a:	d808      	bhi.n	800573e <_printf_i+0x7e>
 800572c:	296f      	cmp	r1, #111	; 0x6f
 800572e:	d020      	beq.n	8005772 <_printf_i+0xb2>
 8005730:	2970      	cmp	r1, #112	; 0x70
 8005732:	d1dd      	bne.n	80056f0 <_printf_i+0x30>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	f043 0320 	orr.w	r3, r3, #32
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	e003      	b.n	8005746 <_printf_i+0x86>
 800573e:	2975      	cmp	r1, #117	; 0x75
 8005740:	d017      	beq.n	8005772 <_printf_i+0xb2>
 8005742:	2978      	cmp	r1, #120	; 0x78
 8005744:	d1d4      	bne.n	80056f0 <_printf_i+0x30>
 8005746:	2378      	movs	r3, #120	; 0x78
 8005748:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800574c:	4864      	ldr	r0, [pc, #400]	; (80058e0 <_printf_i+0x220>)
 800574e:	e055      	b.n	80057fc <_printf_i+0x13c>
 8005750:	6813      	ldr	r3, [r2, #0]
 8005752:	1d19      	adds	r1, r3, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6011      	str	r1, [r2, #0]
 8005758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005760:	2301      	movs	r3, #1
 8005762:	e08c      	b.n	800587e <_printf_i+0x1be>
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6011      	str	r1, [r2, #0]
 8005768:	f010 0f40 	tst.w	r0, #64	; 0x40
 800576c:	bf18      	it	ne
 800576e:	b21b      	sxthne	r3, r3
 8005770:	e7cf      	b.n	8005712 <_printf_i+0x52>
 8005772:	6813      	ldr	r3, [r2, #0]
 8005774:	6825      	ldr	r5, [r4, #0]
 8005776:	1d18      	adds	r0, r3, #4
 8005778:	6010      	str	r0, [r2, #0]
 800577a:	0628      	lsls	r0, r5, #24
 800577c:	d501      	bpl.n	8005782 <_printf_i+0xc2>
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	e002      	b.n	8005788 <_printf_i+0xc8>
 8005782:	0668      	lsls	r0, r5, #25
 8005784:	d5fb      	bpl.n	800577e <_printf_i+0xbe>
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	4854      	ldr	r0, [pc, #336]	; (80058dc <_printf_i+0x21c>)
 800578a:	296f      	cmp	r1, #111	; 0x6f
 800578c:	bf14      	ite	ne
 800578e:	220a      	movne	r2, #10
 8005790:	2208      	moveq	r2, #8
 8005792:	2100      	movs	r1, #0
 8005794:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005798:	6865      	ldr	r5, [r4, #4]
 800579a:	60a5      	str	r5, [r4, #8]
 800579c:	2d00      	cmp	r5, #0
 800579e:	f2c0 8095 	blt.w	80058cc <_printf_i+0x20c>
 80057a2:	6821      	ldr	r1, [r4, #0]
 80057a4:	f021 0104 	bic.w	r1, r1, #4
 80057a8:	6021      	str	r1, [r4, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d13d      	bne.n	800582a <_printf_i+0x16a>
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	f040 808e 	bne.w	80058d0 <_printf_i+0x210>
 80057b4:	4665      	mov	r5, ip
 80057b6:	2a08      	cmp	r2, #8
 80057b8:	d10b      	bne.n	80057d2 <_printf_i+0x112>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	07db      	lsls	r3, r3, #31
 80057be:	d508      	bpl.n	80057d2 <_printf_i+0x112>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	bfde      	ittt	le
 80057c8:	2330      	movle	r3, #48	; 0x30
 80057ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057d2:	ebac 0305 	sub.w	r3, ip, r5
 80057d6:	6123      	str	r3, [r4, #16]
 80057d8:	f8cd 8000 	str.w	r8, [sp]
 80057dc:	463b      	mov	r3, r7
 80057de:	aa03      	add	r2, sp, #12
 80057e0:	4621      	mov	r1, r4
 80057e2:	4630      	mov	r0, r6
 80057e4:	f7ff fef6 	bl	80055d4 <_printf_common>
 80057e8:	3001      	adds	r0, #1
 80057ea:	d14d      	bne.n	8005888 <_printf_i+0x1c8>
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057f0:	b005      	add	sp, #20
 80057f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057f6:	4839      	ldr	r0, [pc, #228]	; (80058dc <_printf_i+0x21c>)
 80057f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80057fc:	6813      	ldr	r3, [r2, #0]
 80057fe:	6821      	ldr	r1, [r4, #0]
 8005800:	1d1d      	adds	r5, r3, #4
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6015      	str	r5, [r2, #0]
 8005806:	060a      	lsls	r2, r1, #24
 8005808:	d50b      	bpl.n	8005822 <_printf_i+0x162>
 800580a:	07ca      	lsls	r2, r1, #31
 800580c:	bf44      	itt	mi
 800580e:	f041 0120 	orrmi.w	r1, r1, #32
 8005812:	6021      	strmi	r1, [r4, #0]
 8005814:	b91b      	cbnz	r3, 800581e <_printf_i+0x15e>
 8005816:	6822      	ldr	r2, [r4, #0]
 8005818:	f022 0220 	bic.w	r2, r2, #32
 800581c:	6022      	str	r2, [r4, #0]
 800581e:	2210      	movs	r2, #16
 8005820:	e7b7      	b.n	8005792 <_printf_i+0xd2>
 8005822:	064d      	lsls	r5, r1, #25
 8005824:	bf48      	it	mi
 8005826:	b29b      	uxthmi	r3, r3
 8005828:	e7ef      	b.n	800580a <_printf_i+0x14a>
 800582a:	4665      	mov	r5, ip
 800582c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005830:	fb02 3311 	mls	r3, r2, r1, r3
 8005834:	5cc3      	ldrb	r3, [r0, r3]
 8005836:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800583a:	460b      	mov	r3, r1
 800583c:	2900      	cmp	r1, #0
 800583e:	d1f5      	bne.n	800582c <_printf_i+0x16c>
 8005840:	e7b9      	b.n	80057b6 <_printf_i+0xf6>
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	6825      	ldr	r5, [r4, #0]
 8005846:	6961      	ldr	r1, [r4, #20]
 8005848:	1d18      	adds	r0, r3, #4
 800584a:	6010      	str	r0, [r2, #0]
 800584c:	0628      	lsls	r0, r5, #24
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	d501      	bpl.n	8005856 <_printf_i+0x196>
 8005852:	6019      	str	r1, [r3, #0]
 8005854:	e002      	b.n	800585c <_printf_i+0x19c>
 8005856:	066a      	lsls	r2, r5, #25
 8005858:	d5fb      	bpl.n	8005852 <_printf_i+0x192>
 800585a:	8019      	strh	r1, [r3, #0]
 800585c:	2300      	movs	r3, #0
 800585e:	6123      	str	r3, [r4, #16]
 8005860:	4665      	mov	r5, ip
 8005862:	e7b9      	b.n	80057d8 <_printf_i+0x118>
 8005864:	6813      	ldr	r3, [r2, #0]
 8005866:	1d19      	adds	r1, r3, #4
 8005868:	6011      	str	r1, [r2, #0]
 800586a:	681d      	ldr	r5, [r3, #0]
 800586c:	6862      	ldr	r2, [r4, #4]
 800586e:	2100      	movs	r1, #0
 8005870:	4628      	mov	r0, r5
 8005872:	f7fa fcb5 	bl	80001e0 <memchr>
 8005876:	b108      	cbz	r0, 800587c <_printf_i+0x1bc>
 8005878:	1b40      	subs	r0, r0, r5
 800587a:	6060      	str	r0, [r4, #4]
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	2300      	movs	r3, #0
 8005882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005886:	e7a7      	b.n	80057d8 <_printf_i+0x118>
 8005888:	6923      	ldr	r3, [r4, #16]
 800588a:	462a      	mov	r2, r5
 800588c:	4639      	mov	r1, r7
 800588e:	4630      	mov	r0, r6
 8005890:	47c0      	blx	r8
 8005892:	3001      	adds	r0, #1
 8005894:	d0aa      	beq.n	80057ec <_printf_i+0x12c>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	079b      	lsls	r3, r3, #30
 800589a:	d413      	bmi.n	80058c4 <_printf_i+0x204>
 800589c:	68e0      	ldr	r0, [r4, #12]
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	4298      	cmp	r0, r3
 80058a2:	bfb8      	it	lt
 80058a4:	4618      	movlt	r0, r3
 80058a6:	e7a3      	b.n	80057f0 <_printf_i+0x130>
 80058a8:	2301      	movs	r3, #1
 80058aa:	464a      	mov	r2, r9
 80058ac:	4639      	mov	r1, r7
 80058ae:	4630      	mov	r0, r6
 80058b0:	47c0      	blx	r8
 80058b2:	3001      	adds	r0, #1
 80058b4:	d09a      	beq.n	80057ec <_printf_i+0x12c>
 80058b6:	3501      	adds	r5, #1
 80058b8:	68e3      	ldr	r3, [r4, #12]
 80058ba:	9a03      	ldr	r2, [sp, #12]
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	42ab      	cmp	r3, r5
 80058c0:	dcf2      	bgt.n	80058a8 <_printf_i+0x1e8>
 80058c2:	e7eb      	b.n	800589c <_printf_i+0x1dc>
 80058c4:	2500      	movs	r5, #0
 80058c6:	f104 0919 	add.w	r9, r4, #25
 80058ca:	e7f5      	b.n	80058b8 <_printf_i+0x1f8>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1ac      	bne.n	800582a <_printf_i+0x16a>
 80058d0:	7803      	ldrb	r3, [r0, #0]
 80058d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058da:	e76c      	b.n	80057b6 <_printf_i+0xf6>
 80058dc:	08007c42 	.word	0x08007c42
 80058e0:	08007c53 	.word	0x08007c53

080058e4 <iprintf>:
 80058e4:	b40f      	push	{r0, r1, r2, r3}
 80058e6:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <iprintf+0x2c>)
 80058e8:	b513      	push	{r0, r1, r4, lr}
 80058ea:	681c      	ldr	r4, [r3, #0]
 80058ec:	b124      	cbz	r4, 80058f8 <iprintf+0x14>
 80058ee:	69a3      	ldr	r3, [r4, #24]
 80058f0:	b913      	cbnz	r3, 80058f8 <iprintf+0x14>
 80058f2:	4620      	mov	r0, r4
 80058f4:	f000 fe94 	bl	8006620 <__sinit>
 80058f8:	ab05      	add	r3, sp, #20
 80058fa:	9a04      	ldr	r2, [sp, #16]
 80058fc:	68a1      	ldr	r1, [r4, #8]
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	4620      	mov	r0, r4
 8005902:	f001 faf3 	bl	8006eec <_vfiprintf_r>
 8005906:	b002      	add	sp, #8
 8005908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800590c:	b004      	add	sp, #16
 800590e:	4770      	bx	lr
 8005910:	2000000c 	.word	0x2000000c

08005914 <quorem>:
 8005914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005918:	6903      	ldr	r3, [r0, #16]
 800591a:	690c      	ldr	r4, [r1, #16]
 800591c:	42a3      	cmp	r3, r4
 800591e:	4680      	mov	r8, r0
 8005920:	f2c0 8082 	blt.w	8005a28 <quorem+0x114>
 8005924:	3c01      	subs	r4, #1
 8005926:	f101 0714 	add.w	r7, r1, #20
 800592a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800592e:	f100 0614 	add.w	r6, r0, #20
 8005932:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005936:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800593a:	eb06 030c 	add.w	r3, r6, ip
 800593e:	3501      	adds	r5, #1
 8005940:	eb07 090c 	add.w	r9, r7, ip
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	fbb0 f5f5 	udiv	r5, r0, r5
 800594a:	b395      	cbz	r5, 80059b2 <quorem+0x9e>
 800594c:	f04f 0a00 	mov.w	sl, #0
 8005950:	4638      	mov	r0, r7
 8005952:	46b6      	mov	lr, r6
 8005954:	46d3      	mov	fp, sl
 8005956:	f850 2b04 	ldr.w	r2, [r0], #4
 800595a:	b293      	uxth	r3, r2
 800595c:	fb05 a303 	mla	r3, r5, r3, sl
 8005960:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005964:	b29b      	uxth	r3, r3
 8005966:	ebab 0303 	sub.w	r3, fp, r3
 800596a:	0c12      	lsrs	r2, r2, #16
 800596c:	f8de b000 	ldr.w	fp, [lr]
 8005970:	fb05 a202 	mla	r2, r5, r2, sl
 8005974:	fa13 f38b 	uxtah	r3, r3, fp
 8005978:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800597c:	fa1f fb82 	uxth.w	fp, r2
 8005980:	f8de 2000 	ldr.w	r2, [lr]
 8005984:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800598c:	b29b      	uxth	r3, r3
 800598e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005992:	4581      	cmp	r9, r0
 8005994:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005998:	f84e 3b04 	str.w	r3, [lr], #4
 800599c:	d2db      	bcs.n	8005956 <quorem+0x42>
 800599e:	f856 300c 	ldr.w	r3, [r6, ip]
 80059a2:	b933      	cbnz	r3, 80059b2 <quorem+0x9e>
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	3b04      	subs	r3, #4
 80059a8:	429e      	cmp	r6, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	d330      	bcc.n	8005a10 <quorem+0xfc>
 80059ae:	f8c8 4010 	str.w	r4, [r8, #16]
 80059b2:	4640      	mov	r0, r8
 80059b4:	f001 f8f4 	bl	8006ba0 <__mcmp>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	db25      	blt.n	8005a08 <quorem+0xf4>
 80059bc:	3501      	adds	r5, #1
 80059be:	4630      	mov	r0, r6
 80059c0:	f04f 0c00 	mov.w	ip, #0
 80059c4:	f857 2b04 	ldr.w	r2, [r7], #4
 80059c8:	f8d0 e000 	ldr.w	lr, [r0]
 80059cc:	b293      	uxth	r3, r2
 80059ce:	ebac 0303 	sub.w	r3, ip, r3
 80059d2:	0c12      	lsrs	r2, r2, #16
 80059d4:	fa13 f38e 	uxtah	r3, r3, lr
 80059d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059e6:	45b9      	cmp	r9, r7
 80059e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059ec:	f840 3b04 	str.w	r3, [r0], #4
 80059f0:	d2e8      	bcs.n	80059c4 <quorem+0xb0>
 80059f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80059f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80059fa:	b92a      	cbnz	r2, 8005a08 <quorem+0xf4>
 80059fc:	3b04      	subs	r3, #4
 80059fe:	429e      	cmp	r6, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	d30b      	bcc.n	8005a1c <quorem+0x108>
 8005a04:	f8c8 4010 	str.w	r4, [r8, #16]
 8005a08:	4628      	mov	r0, r5
 8005a0a:	b003      	add	sp, #12
 8005a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	3b04      	subs	r3, #4
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	d1ca      	bne.n	80059ae <quorem+0x9a>
 8005a18:	3c01      	subs	r4, #1
 8005a1a:	e7c5      	b.n	80059a8 <quorem+0x94>
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	3b04      	subs	r3, #4
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	d1ef      	bne.n	8005a04 <quorem+0xf0>
 8005a24:	3c01      	subs	r4, #1
 8005a26:	e7ea      	b.n	80059fe <quorem+0xea>
 8005a28:	2000      	movs	r0, #0
 8005a2a:	e7ee      	b.n	8005a0a <quorem+0xf6>
 8005a2c:	0000      	movs	r0, r0
	...

08005a30 <_dtoa_r>:
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	ec57 6b10 	vmov	r6, r7, d0
 8005a38:	b097      	sub	sp, #92	; 0x5c
 8005a3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a3c:	9106      	str	r1, [sp, #24]
 8005a3e:	4604      	mov	r4, r0
 8005a40:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a42:	9312      	str	r3, [sp, #72]	; 0x48
 8005a44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a48:	e9cd 6700 	strd	r6, r7, [sp]
 8005a4c:	b93d      	cbnz	r5, 8005a5e <_dtoa_r+0x2e>
 8005a4e:	2010      	movs	r0, #16
 8005a50:	f000 fe7e 	bl	8006750 <malloc>
 8005a54:	6260      	str	r0, [r4, #36]	; 0x24
 8005a56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a5a:	6005      	str	r5, [r0, #0]
 8005a5c:	60c5      	str	r5, [r0, #12]
 8005a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a60:	6819      	ldr	r1, [r3, #0]
 8005a62:	b151      	cbz	r1, 8005a7a <_dtoa_r+0x4a>
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	604a      	str	r2, [r1, #4]
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4093      	lsls	r3, r2
 8005a6c:	608b      	str	r3, [r1, #8]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 feb5 	bl	80067de <_Bfree>
 8005a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	1e3b      	subs	r3, r7, #0
 8005a7c:	bfbb      	ittet	lt
 8005a7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a82:	9301      	strlt	r3, [sp, #4]
 8005a84:	2300      	movge	r3, #0
 8005a86:	2201      	movlt	r2, #1
 8005a88:	bfac      	ite	ge
 8005a8a:	f8c8 3000 	strge.w	r3, [r8]
 8005a8e:	f8c8 2000 	strlt.w	r2, [r8]
 8005a92:	4baf      	ldr	r3, [pc, #700]	; (8005d50 <_dtoa_r+0x320>)
 8005a94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005a98:	ea33 0308 	bics.w	r3, r3, r8
 8005a9c:	d114      	bne.n	8005ac8 <_dtoa_r+0x98>
 8005a9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005aa0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	9b00      	ldr	r3, [sp, #0]
 8005aa8:	b923      	cbnz	r3, 8005ab4 <_dtoa_r+0x84>
 8005aaa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	f000 8542 	beq.w	8006538 <_dtoa_r+0xb08>
 8005ab4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ab6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005d64 <_dtoa_r+0x334>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 8544 	beq.w	8006548 <_dtoa_r+0xb18>
 8005ac0:	f10b 0303 	add.w	r3, fp, #3
 8005ac4:	f000 bd3e 	b.w	8006544 <_dtoa_r+0xb14>
 8005ac8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005acc:	2200      	movs	r2, #0
 8005ace:	2300      	movs	r3, #0
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	f7fa fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ad8:	4681      	mov	r9, r0
 8005ada:	b168      	cbz	r0, 8005af8 <_dtoa_r+0xc8>
 8005adc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ade:	2301      	movs	r3, #1
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 8524 	beq.w	8006532 <_dtoa_r+0xb02>
 8005aea:	4b9a      	ldr	r3, [pc, #616]	; (8005d54 <_dtoa_r+0x324>)
 8005aec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005aee:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	f000 bd28 	b.w	8006548 <_dtoa_r+0xb18>
 8005af8:	aa14      	add	r2, sp, #80	; 0x50
 8005afa:	a915      	add	r1, sp, #84	; 0x54
 8005afc:	ec47 6b10 	vmov	d0, r6, r7
 8005b00:	4620      	mov	r0, r4
 8005b02:	f001 f8c4 	bl	8006c8e <__d2b>
 8005b06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005b0a:	9004      	str	r0, [sp, #16]
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	d07c      	beq.n	8005c0a <_dtoa_r+0x1da>
 8005b10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005b18:	46b2      	mov	sl, r6
 8005b1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005b1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005b26:	2200      	movs	r2, #0
 8005b28:	4b8b      	ldr	r3, [pc, #556]	; (8005d58 <_dtoa_r+0x328>)
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	f7fa fbab 	bl	8000288 <__aeabi_dsub>
 8005b32:	a381      	add	r3, pc, #516	; (adr r3, 8005d38 <_dtoa_r+0x308>)
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f7fa fd5e 	bl	80005f8 <__aeabi_dmul>
 8005b3c:	a380      	add	r3, pc, #512	; (adr r3, 8005d40 <_dtoa_r+0x310>)
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f7fa fba3 	bl	800028c <__adddf3>
 8005b46:	4606      	mov	r6, r0
 8005b48:	4628      	mov	r0, r5
 8005b4a:	460f      	mov	r7, r1
 8005b4c:	f7fa fcea 	bl	8000524 <__aeabi_i2d>
 8005b50:	a37d      	add	r3, pc, #500	; (adr r3, 8005d48 <_dtoa_r+0x318>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fd4f 	bl	80005f8 <__aeabi_dmul>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4630      	mov	r0, r6
 8005b60:	4639      	mov	r1, r7
 8005b62:	f7fa fb93 	bl	800028c <__adddf3>
 8005b66:	4606      	mov	r6, r0
 8005b68:	460f      	mov	r7, r1
 8005b6a:	f7fa fff5 	bl	8000b58 <__aeabi_d2iz>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4682      	mov	sl, r0
 8005b72:	2300      	movs	r3, #0
 8005b74:	4630      	mov	r0, r6
 8005b76:	4639      	mov	r1, r7
 8005b78:	f7fa ffb0 	bl	8000adc <__aeabi_dcmplt>
 8005b7c:	b148      	cbz	r0, 8005b92 <_dtoa_r+0x162>
 8005b7e:	4650      	mov	r0, sl
 8005b80:	f7fa fcd0 	bl	8000524 <__aeabi_i2d>
 8005b84:	4632      	mov	r2, r6
 8005b86:	463b      	mov	r3, r7
 8005b88:	f7fa ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b8c:	b908      	cbnz	r0, 8005b92 <_dtoa_r+0x162>
 8005b8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b92:	f1ba 0f16 	cmp.w	sl, #22
 8005b96:	d859      	bhi.n	8005c4c <_dtoa_r+0x21c>
 8005b98:	4970      	ldr	r1, [pc, #448]	; (8005d5c <_dtoa_r+0x32c>)
 8005b9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005b9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ba6:	f7fa ffb7 	bl	8000b18 <__aeabi_dcmpgt>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d050      	beq.n	8005c50 <_dtoa_r+0x220>
 8005bae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bb8:	1b5d      	subs	r5, r3, r5
 8005bba:	f1b5 0801 	subs.w	r8, r5, #1
 8005bbe:	bf49      	itett	mi
 8005bc0:	f1c5 0301 	rsbmi	r3, r5, #1
 8005bc4:	2300      	movpl	r3, #0
 8005bc6:	9305      	strmi	r3, [sp, #20]
 8005bc8:	f04f 0800 	movmi.w	r8, #0
 8005bcc:	bf58      	it	pl
 8005bce:	9305      	strpl	r3, [sp, #20]
 8005bd0:	f1ba 0f00 	cmp.w	sl, #0
 8005bd4:	db3e      	blt.n	8005c54 <_dtoa_r+0x224>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	44d0      	add	r8, sl
 8005bda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005bde:	9307      	str	r3, [sp, #28]
 8005be0:	9b06      	ldr	r3, [sp, #24]
 8005be2:	2b09      	cmp	r3, #9
 8005be4:	f200 8090 	bhi.w	8005d08 <_dtoa_r+0x2d8>
 8005be8:	2b05      	cmp	r3, #5
 8005bea:	bfc4      	itt	gt
 8005bec:	3b04      	subgt	r3, #4
 8005bee:	9306      	strgt	r3, [sp, #24]
 8005bf0:	9b06      	ldr	r3, [sp, #24]
 8005bf2:	f1a3 0302 	sub.w	r3, r3, #2
 8005bf6:	bfcc      	ite	gt
 8005bf8:	2500      	movgt	r5, #0
 8005bfa:	2501      	movle	r5, #1
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	f200 808f 	bhi.w	8005d20 <_dtoa_r+0x2f0>
 8005c02:	e8df f003 	tbb	[pc, r3]
 8005c06:	7f7d      	.short	0x7f7d
 8005c08:	7131      	.short	0x7131
 8005c0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005c0e:	441d      	add	r5, r3
 8005c10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005c14:	2820      	cmp	r0, #32
 8005c16:	dd13      	ble.n	8005c40 <_dtoa_r+0x210>
 8005c18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005c1c:	9b00      	ldr	r3, [sp, #0]
 8005c1e:	fa08 f800 	lsl.w	r8, r8, r0
 8005c22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005c26:	fa23 f000 	lsr.w	r0, r3, r0
 8005c2a:	ea48 0000 	orr.w	r0, r8, r0
 8005c2e:	f7fa fc69 	bl	8000504 <__aeabi_ui2d>
 8005c32:	2301      	movs	r3, #1
 8005c34:	4682      	mov	sl, r0
 8005c36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005c3a:	3d01      	subs	r5, #1
 8005c3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c3e:	e772      	b.n	8005b26 <_dtoa_r+0xf6>
 8005c40:	9b00      	ldr	r3, [sp, #0]
 8005c42:	f1c0 0020 	rsb	r0, r0, #32
 8005c46:	fa03 f000 	lsl.w	r0, r3, r0
 8005c4a:	e7f0      	b.n	8005c2e <_dtoa_r+0x1fe>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e7b1      	b.n	8005bb4 <_dtoa_r+0x184>
 8005c50:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c52:	e7b0      	b.n	8005bb6 <_dtoa_r+0x186>
 8005c54:	9b05      	ldr	r3, [sp, #20]
 8005c56:	eba3 030a 	sub.w	r3, r3, sl
 8005c5a:	9305      	str	r3, [sp, #20]
 8005c5c:	f1ca 0300 	rsb	r3, sl, #0
 8005c60:	9307      	str	r3, [sp, #28]
 8005c62:	2300      	movs	r3, #0
 8005c64:	930e      	str	r3, [sp, #56]	; 0x38
 8005c66:	e7bb      	b.n	8005be0 <_dtoa_r+0x1b0>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	dd59      	ble.n	8005d26 <_dtoa_r+0x2f6>
 8005c72:	9302      	str	r3, [sp, #8]
 8005c74:	4699      	mov	r9, r3
 8005c76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c78:	2200      	movs	r2, #0
 8005c7a:	6072      	str	r2, [r6, #4]
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	f102 0014 	add.w	r0, r2, #20
 8005c82:	4298      	cmp	r0, r3
 8005c84:	6871      	ldr	r1, [r6, #4]
 8005c86:	d953      	bls.n	8005d30 <_dtoa_r+0x300>
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 fd74 	bl	8006776 <_Balloc>
 8005c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c90:	6030      	str	r0, [r6, #0]
 8005c92:	f1b9 0f0e 	cmp.w	r9, #14
 8005c96:	f8d3 b000 	ldr.w	fp, [r3]
 8005c9a:	f200 80e6 	bhi.w	8005e6a <_dtoa_r+0x43a>
 8005c9e:	2d00      	cmp	r5, #0
 8005ca0:	f000 80e3 	beq.w	8005e6a <_dtoa_r+0x43a>
 8005ca4:	ed9d 7b00 	vldr	d7, [sp]
 8005ca8:	f1ba 0f00 	cmp.w	sl, #0
 8005cac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005cb0:	dd74      	ble.n	8005d9c <_dtoa_r+0x36c>
 8005cb2:	4a2a      	ldr	r2, [pc, #168]	; (8005d5c <_dtoa_r+0x32c>)
 8005cb4:	f00a 030f 	and.w	r3, sl, #15
 8005cb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005cbc:	ed93 7b00 	vldr	d7, [r3]
 8005cc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005cc4:	06f0      	lsls	r0, r6, #27
 8005cc6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005cca:	d565      	bpl.n	8005d98 <_dtoa_r+0x368>
 8005ccc:	4b24      	ldr	r3, [pc, #144]	; (8005d60 <_dtoa_r+0x330>)
 8005cce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cd6:	f7fa fdb9 	bl	800084c <__aeabi_ddiv>
 8005cda:	e9cd 0100 	strd	r0, r1, [sp]
 8005cde:	f006 060f 	and.w	r6, r6, #15
 8005ce2:	2503      	movs	r5, #3
 8005ce4:	4f1e      	ldr	r7, [pc, #120]	; (8005d60 <_dtoa_r+0x330>)
 8005ce6:	e04c      	b.n	8005d82 <_dtoa_r+0x352>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	930a      	str	r3, [sp, #40]	; 0x28
 8005cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cee:	4453      	add	r3, sl
 8005cf0:	f103 0901 	add.w	r9, r3, #1
 8005cf4:	9302      	str	r3, [sp, #8]
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	bfb8      	it	lt
 8005cfc:	2301      	movlt	r3, #1
 8005cfe:	e7ba      	b.n	8005c76 <_dtoa_r+0x246>
 8005d00:	2300      	movs	r3, #0
 8005d02:	e7b2      	b.n	8005c6a <_dtoa_r+0x23a>
 8005d04:	2300      	movs	r3, #0
 8005d06:	e7f0      	b.n	8005cea <_dtoa_r+0x2ba>
 8005d08:	2501      	movs	r5, #1
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	9306      	str	r3, [sp, #24]
 8005d0e:	950a      	str	r5, [sp, #40]	; 0x28
 8005d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d14:	9302      	str	r3, [sp, #8]
 8005d16:	4699      	mov	r9, r3
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2312      	movs	r3, #18
 8005d1c:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d1e:	e7aa      	b.n	8005c76 <_dtoa_r+0x246>
 8005d20:	2301      	movs	r3, #1
 8005d22:	930a      	str	r3, [sp, #40]	; 0x28
 8005d24:	e7f4      	b.n	8005d10 <_dtoa_r+0x2e0>
 8005d26:	2301      	movs	r3, #1
 8005d28:	9302      	str	r3, [sp, #8]
 8005d2a:	4699      	mov	r9, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	e7f5      	b.n	8005d1c <_dtoa_r+0x2ec>
 8005d30:	3101      	adds	r1, #1
 8005d32:	6071      	str	r1, [r6, #4]
 8005d34:	0052      	lsls	r2, r2, #1
 8005d36:	e7a2      	b.n	8005c7e <_dtoa_r+0x24e>
 8005d38:	636f4361 	.word	0x636f4361
 8005d3c:	3fd287a7 	.word	0x3fd287a7
 8005d40:	8b60c8b3 	.word	0x8b60c8b3
 8005d44:	3fc68a28 	.word	0x3fc68a28
 8005d48:	509f79fb 	.word	0x509f79fb
 8005d4c:	3fd34413 	.word	0x3fd34413
 8005d50:	7ff00000 	.word	0x7ff00000
 8005d54:	08007c41 	.word	0x08007c41
 8005d58:	3ff80000 	.word	0x3ff80000
 8005d5c:	08007d00 	.word	0x08007d00
 8005d60:	08007cd8 	.word	0x08007cd8
 8005d64:	08007c6d 	.word	0x08007c6d
 8005d68:	07f1      	lsls	r1, r6, #31
 8005d6a:	d508      	bpl.n	8005d7e <_dtoa_r+0x34e>
 8005d6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d74:	f7fa fc40 	bl	80005f8 <__aeabi_dmul>
 8005d78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005d7c:	3501      	adds	r5, #1
 8005d7e:	1076      	asrs	r6, r6, #1
 8005d80:	3708      	adds	r7, #8
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	d1f0      	bne.n	8005d68 <_dtoa_r+0x338>
 8005d86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d8e:	f7fa fd5d 	bl	800084c <__aeabi_ddiv>
 8005d92:	e9cd 0100 	strd	r0, r1, [sp]
 8005d96:	e01a      	b.n	8005dce <_dtoa_r+0x39e>
 8005d98:	2502      	movs	r5, #2
 8005d9a:	e7a3      	b.n	8005ce4 <_dtoa_r+0x2b4>
 8005d9c:	f000 80a0 	beq.w	8005ee0 <_dtoa_r+0x4b0>
 8005da0:	f1ca 0600 	rsb	r6, sl, #0
 8005da4:	4b9f      	ldr	r3, [pc, #636]	; (8006024 <_dtoa_r+0x5f4>)
 8005da6:	4fa0      	ldr	r7, [pc, #640]	; (8006028 <_dtoa_r+0x5f8>)
 8005da8:	f006 020f 	and.w	r2, r6, #15
 8005dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005db8:	f7fa fc1e 	bl	80005f8 <__aeabi_dmul>
 8005dbc:	e9cd 0100 	strd	r0, r1, [sp]
 8005dc0:	1136      	asrs	r6, r6, #4
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2502      	movs	r5, #2
 8005dc6:	2e00      	cmp	r6, #0
 8005dc8:	d17f      	bne.n	8005eca <_dtoa_r+0x49a>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1e1      	bne.n	8005d92 <_dtoa_r+0x362>
 8005dce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8087 	beq.w	8005ee4 <_dtoa_r+0x4b4>
 8005dd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4b93      	ldr	r3, [pc, #588]	; (800602c <_dtoa_r+0x5fc>)
 8005dde:	4630      	mov	r0, r6
 8005de0:	4639      	mov	r1, r7
 8005de2:	f7fa fe7b 	bl	8000adc <__aeabi_dcmplt>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d07c      	beq.n	8005ee4 <_dtoa_r+0x4b4>
 8005dea:	f1b9 0f00 	cmp.w	r9, #0
 8005dee:	d079      	beq.n	8005ee4 <_dtoa_r+0x4b4>
 8005df0:	9b02      	ldr	r3, [sp, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dd35      	ble.n	8005e62 <_dtoa_r+0x432>
 8005df6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005dfa:	9308      	str	r3, [sp, #32]
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4b8b      	ldr	r3, [pc, #556]	; (8006030 <_dtoa_r+0x600>)
 8005e02:	4630      	mov	r0, r6
 8005e04:	f7fa fbf8 	bl	80005f8 <__aeabi_dmul>
 8005e08:	e9cd 0100 	strd	r0, r1, [sp]
 8005e0c:	9f02      	ldr	r7, [sp, #8]
 8005e0e:	3501      	adds	r5, #1
 8005e10:	4628      	mov	r0, r5
 8005e12:	f7fa fb87 	bl	8000524 <__aeabi_i2d>
 8005e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e1a:	f7fa fbed 	bl	80005f8 <__aeabi_dmul>
 8005e1e:	2200      	movs	r2, #0
 8005e20:	4b84      	ldr	r3, [pc, #528]	; (8006034 <_dtoa_r+0x604>)
 8005e22:	f7fa fa33 	bl	800028c <__adddf3>
 8005e26:	4605      	mov	r5, r0
 8005e28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e2c:	2f00      	cmp	r7, #0
 8005e2e:	d15d      	bne.n	8005eec <_dtoa_r+0x4bc>
 8005e30:	2200      	movs	r2, #0
 8005e32:	4b81      	ldr	r3, [pc, #516]	; (8006038 <_dtoa_r+0x608>)
 8005e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e38:	f7fa fa26 	bl	8000288 <__aeabi_dsub>
 8005e3c:	462a      	mov	r2, r5
 8005e3e:	4633      	mov	r3, r6
 8005e40:	e9cd 0100 	strd	r0, r1, [sp]
 8005e44:	f7fa fe68 	bl	8000b18 <__aeabi_dcmpgt>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	f040 8288 	bne.w	800635e <_dtoa_r+0x92e>
 8005e4e:	462a      	mov	r2, r5
 8005e50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e58:	f7fa fe40 	bl	8000adc <__aeabi_dcmplt>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	f040 827c 	bne.w	800635a <_dtoa_r+0x92a>
 8005e62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e66:	e9cd 2300 	strd	r2, r3, [sp]
 8005e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f2c0 8150 	blt.w	8006112 <_dtoa_r+0x6e2>
 8005e72:	f1ba 0f0e 	cmp.w	sl, #14
 8005e76:	f300 814c 	bgt.w	8006112 <_dtoa_r+0x6e2>
 8005e7a:	4b6a      	ldr	r3, [pc, #424]	; (8006024 <_dtoa_r+0x5f4>)
 8005e7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e80:	ed93 7b00 	vldr	d7, [r3]
 8005e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005e8c:	f280 80d8 	bge.w	8006040 <_dtoa_r+0x610>
 8005e90:	f1b9 0f00 	cmp.w	r9, #0
 8005e94:	f300 80d4 	bgt.w	8006040 <_dtoa_r+0x610>
 8005e98:	f040 825e 	bne.w	8006358 <_dtoa_r+0x928>
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	4b66      	ldr	r3, [pc, #408]	; (8006038 <_dtoa_r+0x608>)
 8005ea0:	ec51 0b17 	vmov	r0, r1, d7
 8005ea4:	f7fa fba8 	bl	80005f8 <__aeabi_dmul>
 8005ea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eac:	f7fa fe2a 	bl	8000b04 <__aeabi_dcmpge>
 8005eb0:	464f      	mov	r7, r9
 8005eb2:	464e      	mov	r6, r9
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	f040 8234 	bne.w	8006322 <_dtoa_r+0x8f2>
 8005eba:	2331      	movs	r3, #49	; 0x31
 8005ebc:	f10b 0501 	add.w	r5, fp, #1
 8005ec0:	f88b 3000 	strb.w	r3, [fp]
 8005ec4:	f10a 0a01 	add.w	sl, sl, #1
 8005ec8:	e22f      	b.n	800632a <_dtoa_r+0x8fa>
 8005eca:	07f2      	lsls	r2, r6, #31
 8005ecc:	d505      	bpl.n	8005eda <_dtoa_r+0x4aa>
 8005ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed2:	f7fa fb91 	bl	80005f8 <__aeabi_dmul>
 8005ed6:	3501      	adds	r5, #1
 8005ed8:	2301      	movs	r3, #1
 8005eda:	1076      	asrs	r6, r6, #1
 8005edc:	3708      	adds	r7, #8
 8005ede:	e772      	b.n	8005dc6 <_dtoa_r+0x396>
 8005ee0:	2502      	movs	r5, #2
 8005ee2:	e774      	b.n	8005dce <_dtoa_r+0x39e>
 8005ee4:	f8cd a020 	str.w	sl, [sp, #32]
 8005ee8:	464f      	mov	r7, r9
 8005eea:	e791      	b.n	8005e10 <_dtoa_r+0x3e0>
 8005eec:	4b4d      	ldr	r3, [pc, #308]	; (8006024 <_dtoa_r+0x5f4>)
 8005eee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ef2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d047      	beq.n	8005f8c <_dtoa_r+0x55c>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	2000      	movs	r0, #0
 8005f02:	494e      	ldr	r1, [pc, #312]	; (800603c <_dtoa_r+0x60c>)
 8005f04:	f7fa fca2 	bl	800084c <__aeabi_ddiv>
 8005f08:	462a      	mov	r2, r5
 8005f0a:	4633      	mov	r3, r6
 8005f0c:	f7fa f9bc 	bl	8000288 <__aeabi_dsub>
 8005f10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f14:	465d      	mov	r5, fp
 8005f16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f1a:	f7fa fe1d 	bl	8000b58 <__aeabi_d2iz>
 8005f1e:	4606      	mov	r6, r0
 8005f20:	f7fa fb00 	bl	8000524 <__aeabi_i2d>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f2c:	f7fa f9ac 	bl	8000288 <__aeabi_dsub>
 8005f30:	3630      	adds	r6, #48	; 0x30
 8005f32:	f805 6b01 	strb.w	r6, [r5], #1
 8005f36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005f3a:	e9cd 0100 	strd	r0, r1, [sp]
 8005f3e:	f7fa fdcd 	bl	8000adc <__aeabi_dcmplt>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d163      	bne.n	800600e <_dtoa_r+0x5de>
 8005f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	4937      	ldr	r1, [pc, #220]	; (800602c <_dtoa_r+0x5fc>)
 8005f4e:	f7fa f99b 	bl	8000288 <__aeabi_dsub>
 8005f52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005f56:	f7fa fdc1 	bl	8000adc <__aeabi_dcmplt>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	f040 80b7 	bne.w	80060ce <_dtoa_r+0x69e>
 8005f60:	eba5 030b 	sub.w	r3, r5, fp
 8005f64:	429f      	cmp	r7, r3
 8005f66:	f77f af7c 	ble.w	8005e62 <_dtoa_r+0x432>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4b30      	ldr	r3, [pc, #192]	; (8006030 <_dtoa_r+0x600>)
 8005f6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f72:	f7fa fb41 	bl	80005f8 <__aeabi_dmul>
 8005f76:	2200      	movs	r2, #0
 8005f78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f7c:	4b2c      	ldr	r3, [pc, #176]	; (8006030 <_dtoa_r+0x600>)
 8005f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f82:	f7fa fb39 	bl	80005f8 <__aeabi_dmul>
 8005f86:	e9cd 0100 	strd	r0, r1, [sp]
 8005f8a:	e7c4      	b.n	8005f16 <_dtoa_r+0x4e6>
 8005f8c:	462a      	mov	r2, r5
 8005f8e:	4633      	mov	r3, r6
 8005f90:	f7fa fb32 	bl	80005f8 <__aeabi_dmul>
 8005f94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f98:	eb0b 0507 	add.w	r5, fp, r7
 8005f9c:	465e      	mov	r6, fp
 8005f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fa2:	f7fa fdd9 	bl	8000b58 <__aeabi_d2iz>
 8005fa6:	4607      	mov	r7, r0
 8005fa8:	f7fa fabc 	bl	8000524 <__aeabi_i2d>
 8005fac:	3730      	adds	r7, #48	; 0x30
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fb6:	f7fa f967 	bl	8000288 <__aeabi_dsub>
 8005fba:	f806 7b01 	strb.w	r7, [r6], #1
 8005fbe:	42ae      	cmp	r6, r5
 8005fc0:	e9cd 0100 	strd	r0, r1, [sp]
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	d126      	bne.n	8006018 <_dtoa_r+0x5e8>
 8005fca:	4b1c      	ldr	r3, [pc, #112]	; (800603c <_dtoa_r+0x60c>)
 8005fcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fd0:	f7fa f95c 	bl	800028c <__adddf3>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fdc:	f7fa fd9c 	bl	8000b18 <__aeabi_dcmpgt>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d174      	bne.n	80060ce <_dtoa_r+0x69e>
 8005fe4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005fe8:	2000      	movs	r0, #0
 8005fea:	4914      	ldr	r1, [pc, #80]	; (800603c <_dtoa_r+0x60c>)
 8005fec:	f7fa f94c 	bl	8000288 <__aeabi_dsub>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ff8:	f7fa fd70 	bl	8000adc <__aeabi_dcmplt>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	f43f af30 	beq.w	8005e62 <_dtoa_r+0x432>
 8006002:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006006:	2b30      	cmp	r3, #48	; 0x30
 8006008:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800600c:	d002      	beq.n	8006014 <_dtoa_r+0x5e4>
 800600e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006012:	e04a      	b.n	80060aa <_dtoa_r+0x67a>
 8006014:	4615      	mov	r5, r2
 8006016:	e7f4      	b.n	8006002 <_dtoa_r+0x5d2>
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <_dtoa_r+0x600>)
 800601a:	f7fa faed 	bl	80005f8 <__aeabi_dmul>
 800601e:	e9cd 0100 	strd	r0, r1, [sp]
 8006022:	e7bc      	b.n	8005f9e <_dtoa_r+0x56e>
 8006024:	08007d00 	.word	0x08007d00
 8006028:	08007cd8 	.word	0x08007cd8
 800602c:	3ff00000 	.word	0x3ff00000
 8006030:	40240000 	.word	0x40240000
 8006034:	401c0000 	.word	0x401c0000
 8006038:	40140000 	.word	0x40140000
 800603c:	3fe00000 	.word	0x3fe00000
 8006040:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006044:	465d      	mov	r5, fp
 8006046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7fa fbfd 	bl	800084c <__aeabi_ddiv>
 8006052:	f7fa fd81 	bl	8000b58 <__aeabi_d2iz>
 8006056:	4680      	mov	r8, r0
 8006058:	f7fa fa64 	bl	8000524 <__aeabi_i2d>
 800605c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006060:	f7fa faca 	bl	80005f8 <__aeabi_dmul>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4630      	mov	r0, r6
 800606a:	4639      	mov	r1, r7
 800606c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006070:	f7fa f90a 	bl	8000288 <__aeabi_dsub>
 8006074:	f805 6b01 	strb.w	r6, [r5], #1
 8006078:	eba5 060b 	sub.w	r6, r5, fp
 800607c:	45b1      	cmp	r9, r6
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	d139      	bne.n	80060f8 <_dtoa_r+0x6c8>
 8006084:	f7fa f902 	bl	800028c <__adddf3>
 8006088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800608c:	4606      	mov	r6, r0
 800608e:	460f      	mov	r7, r1
 8006090:	f7fa fd42 	bl	8000b18 <__aeabi_dcmpgt>
 8006094:	b9c8      	cbnz	r0, 80060ca <_dtoa_r+0x69a>
 8006096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800609a:	4630      	mov	r0, r6
 800609c:	4639      	mov	r1, r7
 800609e:	f7fa fd13 	bl	8000ac8 <__aeabi_dcmpeq>
 80060a2:	b110      	cbz	r0, 80060aa <_dtoa_r+0x67a>
 80060a4:	f018 0f01 	tst.w	r8, #1
 80060a8:	d10f      	bne.n	80060ca <_dtoa_r+0x69a>
 80060aa:	9904      	ldr	r1, [sp, #16]
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 fb96 	bl	80067de <_Bfree>
 80060b2:	2300      	movs	r3, #0
 80060b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060b6:	702b      	strb	r3, [r5, #0]
 80060b8:	f10a 0301 	add.w	r3, sl, #1
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8241 	beq.w	8006548 <_dtoa_r+0xb18>
 80060c6:	601d      	str	r5, [r3, #0]
 80060c8:	e23e      	b.n	8006548 <_dtoa_r+0xb18>
 80060ca:	f8cd a020 	str.w	sl, [sp, #32]
 80060ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060d2:	2a39      	cmp	r2, #57	; 0x39
 80060d4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80060d8:	d108      	bne.n	80060ec <_dtoa_r+0x6bc>
 80060da:	459b      	cmp	fp, r3
 80060dc:	d10a      	bne.n	80060f4 <_dtoa_r+0x6c4>
 80060de:	9b08      	ldr	r3, [sp, #32]
 80060e0:	3301      	adds	r3, #1
 80060e2:	9308      	str	r3, [sp, #32]
 80060e4:	2330      	movs	r3, #48	; 0x30
 80060e6:	f88b 3000 	strb.w	r3, [fp]
 80060ea:	465b      	mov	r3, fp
 80060ec:	781a      	ldrb	r2, [r3, #0]
 80060ee:	3201      	adds	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e78c      	b.n	800600e <_dtoa_r+0x5de>
 80060f4:	461d      	mov	r5, r3
 80060f6:	e7ea      	b.n	80060ce <_dtoa_r+0x69e>
 80060f8:	2200      	movs	r2, #0
 80060fa:	4b9b      	ldr	r3, [pc, #620]	; (8006368 <_dtoa_r+0x938>)
 80060fc:	f7fa fa7c 	bl	80005f8 <__aeabi_dmul>
 8006100:	2200      	movs	r2, #0
 8006102:	2300      	movs	r3, #0
 8006104:	4606      	mov	r6, r0
 8006106:	460f      	mov	r7, r1
 8006108:	f7fa fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800610c:	2800      	cmp	r0, #0
 800610e:	d09a      	beq.n	8006046 <_dtoa_r+0x616>
 8006110:	e7cb      	b.n	80060aa <_dtoa_r+0x67a>
 8006112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006114:	2a00      	cmp	r2, #0
 8006116:	f000 808b 	beq.w	8006230 <_dtoa_r+0x800>
 800611a:	9a06      	ldr	r2, [sp, #24]
 800611c:	2a01      	cmp	r2, #1
 800611e:	dc6e      	bgt.n	80061fe <_dtoa_r+0x7ce>
 8006120:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006122:	2a00      	cmp	r2, #0
 8006124:	d067      	beq.n	80061f6 <_dtoa_r+0x7c6>
 8006126:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800612a:	9f07      	ldr	r7, [sp, #28]
 800612c:	9d05      	ldr	r5, [sp, #20]
 800612e:	9a05      	ldr	r2, [sp, #20]
 8006130:	2101      	movs	r1, #1
 8006132:	441a      	add	r2, r3
 8006134:	4620      	mov	r0, r4
 8006136:	9205      	str	r2, [sp, #20]
 8006138:	4498      	add	r8, r3
 800613a:	f000 fbf0 	bl	800691e <__i2b>
 800613e:	4606      	mov	r6, r0
 8006140:	2d00      	cmp	r5, #0
 8006142:	dd0c      	ble.n	800615e <_dtoa_r+0x72e>
 8006144:	f1b8 0f00 	cmp.w	r8, #0
 8006148:	dd09      	ble.n	800615e <_dtoa_r+0x72e>
 800614a:	4545      	cmp	r5, r8
 800614c:	9a05      	ldr	r2, [sp, #20]
 800614e:	462b      	mov	r3, r5
 8006150:	bfa8      	it	ge
 8006152:	4643      	movge	r3, r8
 8006154:	1ad2      	subs	r2, r2, r3
 8006156:	9205      	str	r2, [sp, #20]
 8006158:	1aed      	subs	r5, r5, r3
 800615a:	eba8 0803 	sub.w	r8, r8, r3
 800615e:	9b07      	ldr	r3, [sp, #28]
 8006160:	b1eb      	cbz	r3, 800619e <_dtoa_r+0x76e>
 8006162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006164:	2b00      	cmp	r3, #0
 8006166:	d067      	beq.n	8006238 <_dtoa_r+0x808>
 8006168:	b18f      	cbz	r7, 800618e <_dtoa_r+0x75e>
 800616a:	4631      	mov	r1, r6
 800616c:	463a      	mov	r2, r7
 800616e:	4620      	mov	r0, r4
 8006170:	f000 fc74 	bl	8006a5c <__pow5mult>
 8006174:	9a04      	ldr	r2, [sp, #16]
 8006176:	4601      	mov	r1, r0
 8006178:	4606      	mov	r6, r0
 800617a:	4620      	mov	r0, r4
 800617c:	f000 fbd8 	bl	8006930 <__multiply>
 8006180:	9904      	ldr	r1, [sp, #16]
 8006182:	9008      	str	r0, [sp, #32]
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fb2a 	bl	80067de <_Bfree>
 800618a:	9b08      	ldr	r3, [sp, #32]
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	9b07      	ldr	r3, [sp, #28]
 8006190:	1bda      	subs	r2, r3, r7
 8006192:	d004      	beq.n	800619e <_dtoa_r+0x76e>
 8006194:	9904      	ldr	r1, [sp, #16]
 8006196:	4620      	mov	r0, r4
 8006198:	f000 fc60 	bl	8006a5c <__pow5mult>
 800619c:	9004      	str	r0, [sp, #16]
 800619e:	2101      	movs	r1, #1
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 fbbc 	bl	800691e <__i2b>
 80061a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061a8:	4607      	mov	r7, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 81d0 	beq.w	8006550 <_dtoa_r+0xb20>
 80061b0:	461a      	mov	r2, r3
 80061b2:	4601      	mov	r1, r0
 80061b4:	4620      	mov	r0, r4
 80061b6:	f000 fc51 	bl	8006a5c <__pow5mult>
 80061ba:	9b06      	ldr	r3, [sp, #24]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	4607      	mov	r7, r0
 80061c0:	dc40      	bgt.n	8006244 <_dtoa_r+0x814>
 80061c2:	9b00      	ldr	r3, [sp, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d139      	bne.n	800623c <_dtoa_r+0x80c>
 80061c8:	9b01      	ldr	r3, [sp, #4]
 80061ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d136      	bne.n	8006240 <_dtoa_r+0x810>
 80061d2:	9b01      	ldr	r3, [sp, #4]
 80061d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061d8:	0d1b      	lsrs	r3, r3, #20
 80061da:	051b      	lsls	r3, r3, #20
 80061dc:	b12b      	cbz	r3, 80061ea <_dtoa_r+0x7ba>
 80061de:	9b05      	ldr	r3, [sp, #20]
 80061e0:	3301      	adds	r3, #1
 80061e2:	9305      	str	r3, [sp, #20]
 80061e4:	f108 0801 	add.w	r8, r8, #1
 80061e8:	2301      	movs	r3, #1
 80061ea:	9307      	str	r3, [sp, #28]
 80061ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d12a      	bne.n	8006248 <_dtoa_r+0x818>
 80061f2:	2001      	movs	r0, #1
 80061f4:	e030      	b.n	8006258 <_dtoa_r+0x828>
 80061f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061fc:	e795      	b.n	800612a <_dtoa_r+0x6fa>
 80061fe:	9b07      	ldr	r3, [sp, #28]
 8006200:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006204:	42bb      	cmp	r3, r7
 8006206:	bfbf      	itttt	lt
 8006208:	9b07      	ldrlt	r3, [sp, #28]
 800620a:	9707      	strlt	r7, [sp, #28]
 800620c:	1afa      	sublt	r2, r7, r3
 800620e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006210:	bfbb      	ittet	lt
 8006212:	189b      	addlt	r3, r3, r2
 8006214:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006216:	1bdf      	subge	r7, r3, r7
 8006218:	2700      	movlt	r7, #0
 800621a:	f1b9 0f00 	cmp.w	r9, #0
 800621e:	bfb5      	itete	lt
 8006220:	9b05      	ldrlt	r3, [sp, #20]
 8006222:	9d05      	ldrge	r5, [sp, #20]
 8006224:	eba3 0509 	sublt.w	r5, r3, r9
 8006228:	464b      	movge	r3, r9
 800622a:	bfb8      	it	lt
 800622c:	2300      	movlt	r3, #0
 800622e:	e77e      	b.n	800612e <_dtoa_r+0x6fe>
 8006230:	9f07      	ldr	r7, [sp, #28]
 8006232:	9d05      	ldr	r5, [sp, #20]
 8006234:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006236:	e783      	b.n	8006140 <_dtoa_r+0x710>
 8006238:	9a07      	ldr	r2, [sp, #28]
 800623a:	e7ab      	b.n	8006194 <_dtoa_r+0x764>
 800623c:	2300      	movs	r3, #0
 800623e:	e7d4      	b.n	80061ea <_dtoa_r+0x7ba>
 8006240:	9b00      	ldr	r3, [sp, #0]
 8006242:	e7d2      	b.n	80061ea <_dtoa_r+0x7ba>
 8006244:	2300      	movs	r3, #0
 8006246:	9307      	str	r3, [sp, #28]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800624e:	6918      	ldr	r0, [r3, #16]
 8006250:	f000 fb17 	bl	8006882 <__hi0bits>
 8006254:	f1c0 0020 	rsb	r0, r0, #32
 8006258:	4440      	add	r0, r8
 800625a:	f010 001f 	ands.w	r0, r0, #31
 800625e:	d047      	beq.n	80062f0 <_dtoa_r+0x8c0>
 8006260:	f1c0 0320 	rsb	r3, r0, #32
 8006264:	2b04      	cmp	r3, #4
 8006266:	dd3b      	ble.n	80062e0 <_dtoa_r+0x8b0>
 8006268:	9b05      	ldr	r3, [sp, #20]
 800626a:	f1c0 001c 	rsb	r0, r0, #28
 800626e:	4403      	add	r3, r0
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	4405      	add	r5, r0
 8006274:	4480      	add	r8, r0
 8006276:	9b05      	ldr	r3, [sp, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	dd05      	ble.n	8006288 <_dtoa_r+0x858>
 800627c:	461a      	mov	r2, r3
 800627e:	9904      	ldr	r1, [sp, #16]
 8006280:	4620      	mov	r0, r4
 8006282:	f000 fc39 	bl	8006af8 <__lshift>
 8006286:	9004      	str	r0, [sp, #16]
 8006288:	f1b8 0f00 	cmp.w	r8, #0
 800628c:	dd05      	ble.n	800629a <_dtoa_r+0x86a>
 800628e:	4639      	mov	r1, r7
 8006290:	4642      	mov	r2, r8
 8006292:	4620      	mov	r0, r4
 8006294:	f000 fc30 	bl	8006af8 <__lshift>
 8006298:	4607      	mov	r7, r0
 800629a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800629c:	b353      	cbz	r3, 80062f4 <_dtoa_r+0x8c4>
 800629e:	4639      	mov	r1, r7
 80062a0:	9804      	ldr	r0, [sp, #16]
 80062a2:	f000 fc7d 	bl	8006ba0 <__mcmp>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	da24      	bge.n	80062f4 <_dtoa_r+0x8c4>
 80062aa:	2300      	movs	r3, #0
 80062ac:	220a      	movs	r2, #10
 80062ae:	9904      	ldr	r1, [sp, #16]
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 faab 	bl	800680c <__multadd>
 80062b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b8:	9004      	str	r0, [sp, #16]
 80062ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 814d 	beq.w	800655e <_dtoa_r+0xb2e>
 80062c4:	2300      	movs	r3, #0
 80062c6:	4631      	mov	r1, r6
 80062c8:	220a      	movs	r2, #10
 80062ca:	4620      	mov	r0, r4
 80062cc:	f000 fa9e 	bl	800680c <__multadd>
 80062d0:	9b02      	ldr	r3, [sp, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	4606      	mov	r6, r0
 80062d6:	dc4f      	bgt.n	8006378 <_dtoa_r+0x948>
 80062d8:	9b06      	ldr	r3, [sp, #24]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	dd4c      	ble.n	8006378 <_dtoa_r+0x948>
 80062de:	e011      	b.n	8006304 <_dtoa_r+0x8d4>
 80062e0:	d0c9      	beq.n	8006276 <_dtoa_r+0x846>
 80062e2:	9a05      	ldr	r2, [sp, #20]
 80062e4:	331c      	adds	r3, #28
 80062e6:	441a      	add	r2, r3
 80062e8:	9205      	str	r2, [sp, #20]
 80062ea:	441d      	add	r5, r3
 80062ec:	4498      	add	r8, r3
 80062ee:	e7c2      	b.n	8006276 <_dtoa_r+0x846>
 80062f0:	4603      	mov	r3, r0
 80062f2:	e7f6      	b.n	80062e2 <_dtoa_r+0x8b2>
 80062f4:	f1b9 0f00 	cmp.w	r9, #0
 80062f8:	dc38      	bgt.n	800636c <_dtoa_r+0x93c>
 80062fa:	9b06      	ldr	r3, [sp, #24]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	dd35      	ble.n	800636c <_dtoa_r+0x93c>
 8006300:	f8cd 9008 	str.w	r9, [sp, #8]
 8006304:	9b02      	ldr	r3, [sp, #8]
 8006306:	b963      	cbnz	r3, 8006322 <_dtoa_r+0x8f2>
 8006308:	4639      	mov	r1, r7
 800630a:	2205      	movs	r2, #5
 800630c:	4620      	mov	r0, r4
 800630e:	f000 fa7d 	bl	800680c <__multadd>
 8006312:	4601      	mov	r1, r0
 8006314:	4607      	mov	r7, r0
 8006316:	9804      	ldr	r0, [sp, #16]
 8006318:	f000 fc42 	bl	8006ba0 <__mcmp>
 800631c:	2800      	cmp	r0, #0
 800631e:	f73f adcc 	bgt.w	8005eba <_dtoa_r+0x48a>
 8006322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006324:	465d      	mov	r5, fp
 8006326:	ea6f 0a03 	mvn.w	sl, r3
 800632a:	f04f 0900 	mov.w	r9, #0
 800632e:	4639      	mov	r1, r7
 8006330:	4620      	mov	r0, r4
 8006332:	f000 fa54 	bl	80067de <_Bfree>
 8006336:	2e00      	cmp	r6, #0
 8006338:	f43f aeb7 	beq.w	80060aa <_dtoa_r+0x67a>
 800633c:	f1b9 0f00 	cmp.w	r9, #0
 8006340:	d005      	beq.n	800634e <_dtoa_r+0x91e>
 8006342:	45b1      	cmp	r9, r6
 8006344:	d003      	beq.n	800634e <_dtoa_r+0x91e>
 8006346:	4649      	mov	r1, r9
 8006348:	4620      	mov	r0, r4
 800634a:	f000 fa48 	bl	80067de <_Bfree>
 800634e:	4631      	mov	r1, r6
 8006350:	4620      	mov	r0, r4
 8006352:	f000 fa44 	bl	80067de <_Bfree>
 8006356:	e6a8      	b.n	80060aa <_dtoa_r+0x67a>
 8006358:	2700      	movs	r7, #0
 800635a:	463e      	mov	r6, r7
 800635c:	e7e1      	b.n	8006322 <_dtoa_r+0x8f2>
 800635e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006362:	463e      	mov	r6, r7
 8006364:	e5a9      	b.n	8005eba <_dtoa_r+0x48a>
 8006366:	bf00      	nop
 8006368:	40240000 	.word	0x40240000
 800636c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800636e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 80fa 	beq.w	800656c <_dtoa_r+0xb3c>
 8006378:	2d00      	cmp	r5, #0
 800637a:	dd05      	ble.n	8006388 <_dtoa_r+0x958>
 800637c:	4631      	mov	r1, r6
 800637e:	462a      	mov	r2, r5
 8006380:	4620      	mov	r0, r4
 8006382:	f000 fbb9 	bl	8006af8 <__lshift>
 8006386:	4606      	mov	r6, r0
 8006388:	9b07      	ldr	r3, [sp, #28]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d04c      	beq.n	8006428 <_dtoa_r+0x9f8>
 800638e:	6871      	ldr	r1, [r6, #4]
 8006390:	4620      	mov	r0, r4
 8006392:	f000 f9f0 	bl	8006776 <_Balloc>
 8006396:	6932      	ldr	r2, [r6, #16]
 8006398:	3202      	adds	r2, #2
 800639a:	4605      	mov	r5, r0
 800639c:	0092      	lsls	r2, r2, #2
 800639e:	f106 010c 	add.w	r1, r6, #12
 80063a2:	300c      	adds	r0, #12
 80063a4:	f000 f9dc 	bl	8006760 <memcpy>
 80063a8:	2201      	movs	r2, #1
 80063aa:	4629      	mov	r1, r5
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 fba3 	bl	8006af8 <__lshift>
 80063b2:	9b00      	ldr	r3, [sp, #0]
 80063b4:	f8cd b014 	str.w	fp, [sp, #20]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	46b1      	mov	r9, r6
 80063be:	9307      	str	r3, [sp, #28]
 80063c0:	4606      	mov	r6, r0
 80063c2:	4639      	mov	r1, r7
 80063c4:	9804      	ldr	r0, [sp, #16]
 80063c6:	f7ff faa5 	bl	8005914 <quorem>
 80063ca:	4649      	mov	r1, r9
 80063cc:	4605      	mov	r5, r0
 80063ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80063d2:	9804      	ldr	r0, [sp, #16]
 80063d4:	f000 fbe4 	bl	8006ba0 <__mcmp>
 80063d8:	4632      	mov	r2, r6
 80063da:	9000      	str	r0, [sp, #0]
 80063dc:	4639      	mov	r1, r7
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 fbf8 	bl	8006bd4 <__mdiff>
 80063e4:	68c3      	ldr	r3, [r0, #12]
 80063e6:	4602      	mov	r2, r0
 80063e8:	bb03      	cbnz	r3, 800642c <_dtoa_r+0x9fc>
 80063ea:	4601      	mov	r1, r0
 80063ec:	9008      	str	r0, [sp, #32]
 80063ee:	9804      	ldr	r0, [sp, #16]
 80063f0:	f000 fbd6 	bl	8006ba0 <__mcmp>
 80063f4:	9a08      	ldr	r2, [sp, #32]
 80063f6:	4603      	mov	r3, r0
 80063f8:	4611      	mov	r1, r2
 80063fa:	4620      	mov	r0, r4
 80063fc:	9308      	str	r3, [sp, #32]
 80063fe:	f000 f9ee 	bl	80067de <_Bfree>
 8006402:	9b08      	ldr	r3, [sp, #32]
 8006404:	b9a3      	cbnz	r3, 8006430 <_dtoa_r+0xa00>
 8006406:	9a06      	ldr	r2, [sp, #24]
 8006408:	b992      	cbnz	r2, 8006430 <_dtoa_r+0xa00>
 800640a:	9a07      	ldr	r2, [sp, #28]
 800640c:	b982      	cbnz	r2, 8006430 <_dtoa_r+0xa00>
 800640e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006412:	d029      	beq.n	8006468 <_dtoa_r+0xa38>
 8006414:	9b00      	ldr	r3, [sp, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	dd01      	ble.n	800641e <_dtoa_r+0x9ee>
 800641a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800641e:	9b05      	ldr	r3, [sp, #20]
 8006420:	1c5d      	adds	r5, r3, #1
 8006422:	f883 8000 	strb.w	r8, [r3]
 8006426:	e782      	b.n	800632e <_dtoa_r+0x8fe>
 8006428:	4630      	mov	r0, r6
 800642a:	e7c2      	b.n	80063b2 <_dtoa_r+0x982>
 800642c:	2301      	movs	r3, #1
 800642e:	e7e3      	b.n	80063f8 <_dtoa_r+0x9c8>
 8006430:	9a00      	ldr	r2, [sp, #0]
 8006432:	2a00      	cmp	r2, #0
 8006434:	db04      	blt.n	8006440 <_dtoa_r+0xa10>
 8006436:	d125      	bne.n	8006484 <_dtoa_r+0xa54>
 8006438:	9a06      	ldr	r2, [sp, #24]
 800643a:	bb1a      	cbnz	r2, 8006484 <_dtoa_r+0xa54>
 800643c:	9a07      	ldr	r2, [sp, #28]
 800643e:	bb0a      	cbnz	r2, 8006484 <_dtoa_r+0xa54>
 8006440:	2b00      	cmp	r3, #0
 8006442:	ddec      	ble.n	800641e <_dtoa_r+0x9ee>
 8006444:	2201      	movs	r2, #1
 8006446:	9904      	ldr	r1, [sp, #16]
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fb55 	bl	8006af8 <__lshift>
 800644e:	4639      	mov	r1, r7
 8006450:	9004      	str	r0, [sp, #16]
 8006452:	f000 fba5 	bl	8006ba0 <__mcmp>
 8006456:	2800      	cmp	r0, #0
 8006458:	dc03      	bgt.n	8006462 <_dtoa_r+0xa32>
 800645a:	d1e0      	bne.n	800641e <_dtoa_r+0x9ee>
 800645c:	f018 0f01 	tst.w	r8, #1
 8006460:	d0dd      	beq.n	800641e <_dtoa_r+0x9ee>
 8006462:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006466:	d1d8      	bne.n	800641a <_dtoa_r+0x9ea>
 8006468:	9b05      	ldr	r3, [sp, #20]
 800646a:	9a05      	ldr	r2, [sp, #20]
 800646c:	1c5d      	adds	r5, r3, #1
 800646e:	2339      	movs	r3, #57	; 0x39
 8006470:	7013      	strb	r3, [r2, #0]
 8006472:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006476:	2b39      	cmp	r3, #57	; 0x39
 8006478:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800647c:	d04f      	beq.n	800651e <_dtoa_r+0xaee>
 800647e:	3301      	adds	r3, #1
 8006480:	7013      	strb	r3, [r2, #0]
 8006482:	e754      	b.n	800632e <_dtoa_r+0x8fe>
 8006484:	9a05      	ldr	r2, [sp, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f102 0501 	add.w	r5, r2, #1
 800648c:	dd06      	ble.n	800649c <_dtoa_r+0xa6c>
 800648e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006492:	d0e9      	beq.n	8006468 <_dtoa_r+0xa38>
 8006494:	f108 0801 	add.w	r8, r8, #1
 8006498:	9b05      	ldr	r3, [sp, #20]
 800649a:	e7c2      	b.n	8006422 <_dtoa_r+0x9f2>
 800649c:	9a02      	ldr	r2, [sp, #8]
 800649e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80064a2:	eba5 030b 	sub.w	r3, r5, fp
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d021      	beq.n	80064ee <_dtoa_r+0xabe>
 80064aa:	2300      	movs	r3, #0
 80064ac:	220a      	movs	r2, #10
 80064ae:	9904      	ldr	r1, [sp, #16]
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 f9ab 	bl	800680c <__multadd>
 80064b6:	45b1      	cmp	r9, r6
 80064b8:	9004      	str	r0, [sp, #16]
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	f04f 020a 	mov.w	r2, #10
 80064c2:	4649      	mov	r1, r9
 80064c4:	4620      	mov	r0, r4
 80064c6:	d105      	bne.n	80064d4 <_dtoa_r+0xaa4>
 80064c8:	f000 f9a0 	bl	800680c <__multadd>
 80064cc:	4681      	mov	r9, r0
 80064ce:	4606      	mov	r6, r0
 80064d0:	9505      	str	r5, [sp, #20]
 80064d2:	e776      	b.n	80063c2 <_dtoa_r+0x992>
 80064d4:	f000 f99a 	bl	800680c <__multadd>
 80064d8:	4631      	mov	r1, r6
 80064da:	4681      	mov	r9, r0
 80064dc:	2300      	movs	r3, #0
 80064de:	220a      	movs	r2, #10
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 f993 	bl	800680c <__multadd>
 80064e6:	4606      	mov	r6, r0
 80064e8:	e7f2      	b.n	80064d0 <_dtoa_r+0xaa0>
 80064ea:	f04f 0900 	mov.w	r9, #0
 80064ee:	2201      	movs	r2, #1
 80064f0:	9904      	ldr	r1, [sp, #16]
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 fb00 	bl	8006af8 <__lshift>
 80064f8:	4639      	mov	r1, r7
 80064fa:	9004      	str	r0, [sp, #16]
 80064fc:	f000 fb50 	bl	8006ba0 <__mcmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	dcb6      	bgt.n	8006472 <_dtoa_r+0xa42>
 8006504:	d102      	bne.n	800650c <_dtoa_r+0xadc>
 8006506:	f018 0f01 	tst.w	r8, #1
 800650a:	d1b2      	bne.n	8006472 <_dtoa_r+0xa42>
 800650c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006510:	2b30      	cmp	r3, #48	; 0x30
 8006512:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006516:	f47f af0a 	bne.w	800632e <_dtoa_r+0x8fe>
 800651a:	4615      	mov	r5, r2
 800651c:	e7f6      	b.n	800650c <_dtoa_r+0xadc>
 800651e:	4593      	cmp	fp, r2
 8006520:	d105      	bne.n	800652e <_dtoa_r+0xafe>
 8006522:	2331      	movs	r3, #49	; 0x31
 8006524:	f10a 0a01 	add.w	sl, sl, #1
 8006528:	f88b 3000 	strb.w	r3, [fp]
 800652c:	e6ff      	b.n	800632e <_dtoa_r+0x8fe>
 800652e:	4615      	mov	r5, r2
 8006530:	e79f      	b.n	8006472 <_dtoa_r+0xa42>
 8006532:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006598 <_dtoa_r+0xb68>
 8006536:	e007      	b.n	8006548 <_dtoa_r+0xb18>
 8006538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800653a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800659c <_dtoa_r+0xb6c>
 800653e:	b11b      	cbz	r3, 8006548 <_dtoa_r+0xb18>
 8006540:	f10b 0308 	add.w	r3, fp, #8
 8006544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	4658      	mov	r0, fp
 800654a:	b017      	add	sp, #92	; 0x5c
 800654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006550:	9b06      	ldr	r3, [sp, #24]
 8006552:	2b01      	cmp	r3, #1
 8006554:	f77f ae35 	ble.w	80061c2 <_dtoa_r+0x792>
 8006558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800655a:	9307      	str	r3, [sp, #28]
 800655c:	e649      	b.n	80061f2 <_dtoa_r+0x7c2>
 800655e:	9b02      	ldr	r3, [sp, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	dc03      	bgt.n	800656c <_dtoa_r+0xb3c>
 8006564:	9b06      	ldr	r3, [sp, #24]
 8006566:	2b02      	cmp	r3, #2
 8006568:	f73f aecc 	bgt.w	8006304 <_dtoa_r+0x8d4>
 800656c:	465d      	mov	r5, fp
 800656e:	4639      	mov	r1, r7
 8006570:	9804      	ldr	r0, [sp, #16]
 8006572:	f7ff f9cf 	bl	8005914 <quorem>
 8006576:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800657a:	f805 8b01 	strb.w	r8, [r5], #1
 800657e:	9a02      	ldr	r2, [sp, #8]
 8006580:	eba5 030b 	sub.w	r3, r5, fp
 8006584:	429a      	cmp	r2, r3
 8006586:	ddb0      	ble.n	80064ea <_dtoa_r+0xaba>
 8006588:	2300      	movs	r3, #0
 800658a:	220a      	movs	r2, #10
 800658c:	9904      	ldr	r1, [sp, #16]
 800658e:	4620      	mov	r0, r4
 8006590:	f000 f93c 	bl	800680c <__multadd>
 8006594:	9004      	str	r0, [sp, #16]
 8006596:	e7ea      	b.n	800656e <_dtoa_r+0xb3e>
 8006598:	08007c40 	.word	0x08007c40
 800659c:	08007c64 	.word	0x08007c64

080065a0 <std>:
 80065a0:	2300      	movs	r3, #0
 80065a2:	b510      	push	{r4, lr}
 80065a4:	4604      	mov	r4, r0
 80065a6:	e9c0 3300 	strd	r3, r3, [r0]
 80065aa:	6083      	str	r3, [r0, #8]
 80065ac:	8181      	strh	r1, [r0, #12]
 80065ae:	6643      	str	r3, [r0, #100]	; 0x64
 80065b0:	81c2      	strh	r2, [r0, #14]
 80065b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065b6:	6183      	str	r3, [r0, #24]
 80065b8:	4619      	mov	r1, r3
 80065ba:	2208      	movs	r2, #8
 80065bc:	305c      	adds	r0, #92	; 0x5c
 80065be:	f7fe fd2d 	bl	800501c <memset>
 80065c2:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <std+0x38>)
 80065c4:	6263      	str	r3, [r4, #36]	; 0x24
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <std+0x3c>)
 80065c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80065ca:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <std+0x40>)
 80065cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065ce:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <std+0x44>)
 80065d0:	6224      	str	r4, [r4, #32]
 80065d2:	6323      	str	r3, [r4, #48]	; 0x30
 80065d4:	bd10      	pop	{r4, pc}
 80065d6:	bf00      	nop
 80065d8:	08007139 	.word	0x08007139
 80065dc:	0800715b 	.word	0x0800715b
 80065e0:	08007193 	.word	0x08007193
 80065e4:	080071b7 	.word	0x080071b7

080065e8 <_cleanup_r>:
 80065e8:	4901      	ldr	r1, [pc, #4]	; (80065f0 <_cleanup_r+0x8>)
 80065ea:	f000 b885 	b.w	80066f8 <_fwalk_reent>
 80065ee:	bf00      	nop
 80065f0:	08007491 	.word	0x08007491

080065f4 <__sfmoreglue>:
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	1e4a      	subs	r2, r1, #1
 80065f8:	2568      	movs	r5, #104	; 0x68
 80065fa:	4355      	muls	r5, r2
 80065fc:	460e      	mov	r6, r1
 80065fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006602:	f000 fbef 	bl	8006de4 <_malloc_r>
 8006606:	4604      	mov	r4, r0
 8006608:	b140      	cbz	r0, 800661c <__sfmoreglue+0x28>
 800660a:	2100      	movs	r1, #0
 800660c:	e9c0 1600 	strd	r1, r6, [r0]
 8006610:	300c      	adds	r0, #12
 8006612:	60a0      	str	r0, [r4, #8]
 8006614:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006618:	f7fe fd00 	bl	800501c <memset>
 800661c:	4620      	mov	r0, r4
 800661e:	bd70      	pop	{r4, r5, r6, pc}

08006620 <__sinit>:
 8006620:	6983      	ldr	r3, [r0, #24]
 8006622:	b510      	push	{r4, lr}
 8006624:	4604      	mov	r4, r0
 8006626:	bb33      	cbnz	r3, 8006676 <__sinit+0x56>
 8006628:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800662c:	6503      	str	r3, [r0, #80]	; 0x50
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <__sinit+0x58>)
 8006630:	4a12      	ldr	r2, [pc, #72]	; (800667c <__sinit+0x5c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6282      	str	r2, [r0, #40]	; 0x28
 8006636:	4298      	cmp	r0, r3
 8006638:	bf04      	itt	eq
 800663a:	2301      	moveq	r3, #1
 800663c:	6183      	streq	r3, [r0, #24]
 800663e:	f000 f81f 	bl	8006680 <__sfp>
 8006642:	6060      	str	r0, [r4, #4]
 8006644:	4620      	mov	r0, r4
 8006646:	f000 f81b 	bl	8006680 <__sfp>
 800664a:	60a0      	str	r0, [r4, #8]
 800664c:	4620      	mov	r0, r4
 800664e:	f000 f817 	bl	8006680 <__sfp>
 8006652:	2200      	movs	r2, #0
 8006654:	60e0      	str	r0, [r4, #12]
 8006656:	2104      	movs	r1, #4
 8006658:	6860      	ldr	r0, [r4, #4]
 800665a:	f7ff ffa1 	bl	80065a0 <std>
 800665e:	2201      	movs	r2, #1
 8006660:	2109      	movs	r1, #9
 8006662:	68a0      	ldr	r0, [r4, #8]
 8006664:	f7ff ff9c 	bl	80065a0 <std>
 8006668:	2202      	movs	r2, #2
 800666a:	2112      	movs	r1, #18
 800666c:	68e0      	ldr	r0, [r4, #12]
 800666e:	f7ff ff97 	bl	80065a0 <std>
 8006672:	2301      	movs	r3, #1
 8006674:	61a3      	str	r3, [r4, #24]
 8006676:	bd10      	pop	{r4, pc}
 8006678:	08007c2c 	.word	0x08007c2c
 800667c:	080065e9 	.word	0x080065e9

08006680 <__sfp>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <__sfp+0x70>)
 8006684:	681e      	ldr	r6, [r3, #0]
 8006686:	69b3      	ldr	r3, [r6, #24]
 8006688:	4607      	mov	r7, r0
 800668a:	b913      	cbnz	r3, 8006692 <__sfp+0x12>
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff ffc7 	bl	8006620 <__sinit>
 8006692:	3648      	adds	r6, #72	; 0x48
 8006694:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006698:	3b01      	subs	r3, #1
 800669a:	d503      	bpl.n	80066a4 <__sfp+0x24>
 800669c:	6833      	ldr	r3, [r6, #0]
 800669e:	b133      	cbz	r3, 80066ae <__sfp+0x2e>
 80066a0:	6836      	ldr	r6, [r6, #0]
 80066a2:	e7f7      	b.n	8006694 <__sfp+0x14>
 80066a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066a8:	b16d      	cbz	r5, 80066c6 <__sfp+0x46>
 80066aa:	3468      	adds	r4, #104	; 0x68
 80066ac:	e7f4      	b.n	8006698 <__sfp+0x18>
 80066ae:	2104      	movs	r1, #4
 80066b0:	4638      	mov	r0, r7
 80066b2:	f7ff ff9f 	bl	80065f4 <__sfmoreglue>
 80066b6:	6030      	str	r0, [r6, #0]
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d1f1      	bne.n	80066a0 <__sfp+0x20>
 80066bc:	230c      	movs	r3, #12
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	4604      	mov	r4, r0
 80066c2:	4620      	mov	r0, r4
 80066c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <__sfp+0x74>)
 80066c8:	6665      	str	r5, [r4, #100]	; 0x64
 80066ca:	e9c4 5500 	strd	r5, r5, [r4]
 80066ce:	60a5      	str	r5, [r4, #8]
 80066d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80066d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80066d8:	2208      	movs	r2, #8
 80066da:	4629      	mov	r1, r5
 80066dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066e0:	f7fe fc9c 	bl	800501c <memset>
 80066e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80066ec:	e7e9      	b.n	80066c2 <__sfp+0x42>
 80066ee:	bf00      	nop
 80066f0:	08007c2c 	.word	0x08007c2c
 80066f4:	ffff0001 	.word	0xffff0001

080066f8 <_fwalk_reent>:
 80066f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066fc:	4680      	mov	r8, r0
 80066fe:	4689      	mov	r9, r1
 8006700:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006704:	2600      	movs	r6, #0
 8006706:	b914      	cbnz	r4, 800670e <_fwalk_reent+0x16>
 8006708:	4630      	mov	r0, r6
 800670a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006712:	3f01      	subs	r7, #1
 8006714:	d501      	bpl.n	800671a <_fwalk_reent+0x22>
 8006716:	6824      	ldr	r4, [r4, #0]
 8006718:	e7f5      	b.n	8006706 <_fwalk_reent+0xe>
 800671a:	89ab      	ldrh	r3, [r5, #12]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d907      	bls.n	8006730 <_fwalk_reent+0x38>
 8006720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006724:	3301      	adds	r3, #1
 8006726:	d003      	beq.n	8006730 <_fwalk_reent+0x38>
 8006728:	4629      	mov	r1, r5
 800672a:	4640      	mov	r0, r8
 800672c:	47c8      	blx	r9
 800672e:	4306      	orrs	r6, r0
 8006730:	3568      	adds	r5, #104	; 0x68
 8006732:	e7ee      	b.n	8006712 <_fwalk_reent+0x1a>

08006734 <_localeconv_r>:
 8006734:	4b04      	ldr	r3, [pc, #16]	; (8006748 <_localeconv_r+0x14>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a18      	ldr	r0, [r3, #32]
 800673a:	4b04      	ldr	r3, [pc, #16]	; (800674c <_localeconv_r+0x18>)
 800673c:	2800      	cmp	r0, #0
 800673e:	bf08      	it	eq
 8006740:	4618      	moveq	r0, r3
 8006742:	30f0      	adds	r0, #240	; 0xf0
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	2000000c 	.word	0x2000000c
 800674c:	20000070 	.word	0x20000070

08006750 <malloc>:
 8006750:	4b02      	ldr	r3, [pc, #8]	; (800675c <malloc+0xc>)
 8006752:	4601      	mov	r1, r0
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	f000 bb45 	b.w	8006de4 <_malloc_r>
 800675a:	bf00      	nop
 800675c:	2000000c 	.word	0x2000000c

08006760 <memcpy>:
 8006760:	b510      	push	{r4, lr}
 8006762:	1e43      	subs	r3, r0, #1
 8006764:	440a      	add	r2, r1
 8006766:	4291      	cmp	r1, r2
 8006768:	d100      	bne.n	800676c <memcpy+0xc>
 800676a:	bd10      	pop	{r4, pc}
 800676c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006770:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006774:	e7f7      	b.n	8006766 <memcpy+0x6>

08006776 <_Balloc>:
 8006776:	b570      	push	{r4, r5, r6, lr}
 8006778:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800677a:	4604      	mov	r4, r0
 800677c:	460e      	mov	r6, r1
 800677e:	b93d      	cbnz	r5, 8006790 <_Balloc+0x1a>
 8006780:	2010      	movs	r0, #16
 8006782:	f7ff ffe5 	bl	8006750 <malloc>
 8006786:	6260      	str	r0, [r4, #36]	; 0x24
 8006788:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800678c:	6005      	str	r5, [r0, #0]
 800678e:	60c5      	str	r5, [r0, #12]
 8006790:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006792:	68eb      	ldr	r3, [r5, #12]
 8006794:	b183      	cbz	r3, 80067b8 <_Balloc+0x42>
 8006796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800679e:	b9b8      	cbnz	r0, 80067d0 <_Balloc+0x5a>
 80067a0:	2101      	movs	r1, #1
 80067a2:	fa01 f506 	lsl.w	r5, r1, r6
 80067a6:	1d6a      	adds	r2, r5, #5
 80067a8:	0092      	lsls	r2, r2, #2
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 fabe 	bl	8006d2c <_calloc_r>
 80067b0:	b160      	cbz	r0, 80067cc <_Balloc+0x56>
 80067b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80067b6:	e00e      	b.n	80067d6 <_Balloc+0x60>
 80067b8:	2221      	movs	r2, #33	; 0x21
 80067ba:	2104      	movs	r1, #4
 80067bc:	4620      	mov	r0, r4
 80067be:	f000 fab5 	bl	8006d2c <_calloc_r>
 80067c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067c4:	60e8      	str	r0, [r5, #12]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e4      	bne.n	8006796 <_Balloc+0x20>
 80067cc:	2000      	movs	r0, #0
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	6802      	ldr	r2, [r0, #0]
 80067d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80067d6:	2300      	movs	r3, #0
 80067d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067dc:	e7f7      	b.n	80067ce <_Balloc+0x58>

080067de <_Bfree>:
 80067de:	b570      	push	{r4, r5, r6, lr}
 80067e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80067e2:	4606      	mov	r6, r0
 80067e4:	460d      	mov	r5, r1
 80067e6:	b93c      	cbnz	r4, 80067f8 <_Bfree+0x1a>
 80067e8:	2010      	movs	r0, #16
 80067ea:	f7ff ffb1 	bl	8006750 <malloc>
 80067ee:	6270      	str	r0, [r6, #36]	; 0x24
 80067f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067f4:	6004      	str	r4, [r0, #0]
 80067f6:	60c4      	str	r4, [r0, #12]
 80067f8:	b13d      	cbz	r5, 800680a <_Bfree+0x2c>
 80067fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80067fc:	686a      	ldr	r2, [r5, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006804:	6029      	str	r1, [r5, #0]
 8006806:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800680a:	bd70      	pop	{r4, r5, r6, pc}

0800680c <__multadd>:
 800680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006810:	690d      	ldr	r5, [r1, #16]
 8006812:	461f      	mov	r7, r3
 8006814:	4606      	mov	r6, r0
 8006816:	460c      	mov	r4, r1
 8006818:	f101 0c14 	add.w	ip, r1, #20
 800681c:	2300      	movs	r3, #0
 800681e:	f8dc 0000 	ldr.w	r0, [ip]
 8006822:	b281      	uxth	r1, r0
 8006824:	fb02 7101 	mla	r1, r2, r1, r7
 8006828:	0c0f      	lsrs	r7, r1, #16
 800682a:	0c00      	lsrs	r0, r0, #16
 800682c:	fb02 7000 	mla	r0, r2, r0, r7
 8006830:	b289      	uxth	r1, r1
 8006832:	3301      	adds	r3, #1
 8006834:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006838:	429d      	cmp	r5, r3
 800683a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800683e:	f84c 1b04 	str.w	r1, [ip], #4
 8006842:	dcec      	bgt.n	800681e <__multadd+0x12>
 8006844:	b1d7      	cbz	r7, 800687c <__multadd+0x70>
 8006846:	68a3      	ldr	r3, [r4, #8]
 8006848:	42ab      	cmp	r3, r5
 800684a:	dc12      	bgt.n	8006872 <__multadd+0x66>
 800684c:	6861      	ldr	r1, [r4, #4]
 800684e:	4630      	mov	r0, r6
 8006850:	3101      	adds	r1, #1
 8006852:	f7ff ff90 	bl	8006776 <_Balloc>
 8006856:	6922      	ldr	r2, [r4, #16]
 8006858:	3202      	adds	r2, #2
 800685a:	f104 010c 	add.w	r1, r4, #12
 800685e:	4680      	mov	r8, r0
 8006860:	0092      	lsls	r2, r2, #2
 8006862:	300c      	adds	r0, #12
 8006864:	f7ff ff7c 	bl	8006760 <memcpy>
 8006868:	4621      	mov	r1, r4
 800686a:	4630      	mov	r0, r6
 800686c:	f7ff ffb7 	bl	80067de <_Bfree>
 8006870:	4644      	mov	r4, r8
 8006872:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006876:	3501      	adds	r5, #1
 8006878:	615f      	str	r7, [r3, #20]
 800687a:	6125      	str	r5, [r4, #16]
 800687c:	4620      	mov	r0, r4
 800687e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006882 <__hi0bits>:
 8006882:	0c02      	lsrs	r2, r0, #16
 8006884:	0412      	lsls	r2, r2, #16
 8006886:	4603      	mov	r3, r0
 8006888:	b9b2      	cbnz	r2, 80068b8 <__hi0bits+0x36>
 800688a:	0403      	lsls	r3, r0, #16
 800688c:	2010      	movs	r0, #16
 800688e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006892:	bf04      	itt	eq
 8006894:	021b      	lsleq	r3, r3, #8
 8006896:	3008      	addeq	r0, #8
 8006898:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800689c:	bf04      	itt	eq
 800689e:	011b      	lsleq	r3, r3, #4
 80068a0:	3004      	addeq	r0, #4
 80068a2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80068a6:	bf04      	itt	eq
 80068a8:	009b      	lsleq	r3, r3, #2
 80068aa:	3002      	addeq	r0, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	db06      	blt.n	80068be <__hi0bits+0x3c>
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	d503      	bpl.n	80068bc <__hi0bits+0x3a>
 80068b4:	3001      	adds	r0, #1
 80068b6:	4770      	bx	lr
 80068b8:	2000      	movs	r0, #0
 80068ba:	e7e8      	b.n	800688e <__hi0bits+0xc>
 80068bc:	2020      	movs	r0, #32
 80068be:	4770      	bx	lr

080068c0 <__lo0bits>:
 80068c0:	6803      	ldr	r3, [r0, #0]
 80068c2:	f013 0207 	ands.w	r2, r3, #7
 80068c6:	4601      	mov	r1, r0
 80068c8:	d00b      	beq.n	80068e2 <__lo0bits+0x22>
 80068ca:	07da      	lsls	r2, r3, #31
 80068cc:	d423      	bmi.n	8006916 <__lo0bits+0x56>
 80068ce:	0798      	lsls	r0, r3, #30
 80068d0:	bf49      	itett	mi
 80068d2:	085b      	lsrmi	r3, r3, #1
 80068d4:	089b      	lsrpl	r3, r3, #2
 80068d6:	2001      	movmi	r0, #1
 80068d8:	600b      	strmi	r3, [r1, #0]
 80068da:	bf5c      	itt	pl
 80068dc:	600b      	strpl	r3, [r1, #0]
 80068de:	2002      	movpl	r0, #2
 80068e0:	4770      	bx	lr
 80068e2:	b298      	uxth	r0, r3
 80068e4:	b9a8      	cbnz	r0, 8006912 <__lo0bits+0x52>
 80068e6:	0c1b      	lsrs	r3, r3, #16
 80068e8:	2010      	movs	r0, #16
 80068ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80068ee:	bf04      	itt	eq
 80068f0:	0a1b      	lsreq	r3, r3, #8
 80068f2:	3008      	addeq	r0, #8
 80068f4:	071a      	lsls	r2, r3, #28
 80068f6:	bf04      	itt	eq
 80068f8:	091b      	lsreq	r3, r3, #4
 80068fa:	3004      	addeq	r0, #4
 80068fc:	079a      	lsls	r2, r3, #30
 80068fe:	bf04      	itt	eq
 8006900:	089b      	lsreq	r3, r3, #2
 8006902:	3002      	addeq	r0, #2
 8006904:	07da      	lsls	r2, r3, #31
 8006906:	d402      	bmi.n	800690e <__lo0bits+0x4e>
 8006908:	085b      	lsrs	r3, r3, #1
 800690a:	d006      	beq.n	800691a <__lo0bits+0x5a>
 800690c:	3001      	adds	r0, #1
 800690e:	600b      	str	r3, [r1, #0]
 8006910:	4770      	bx	lr
 8006912:	4610      	mov	r0, r2
 8006914:	e7e9      	b.n	80068ea <__lo0bits+0x2a>
 8006916:	2000      	movs	r0, #0
 8006918:	4770      	bx	lr
 800691a:	2020      	movs	r0, #32
 800691c:	4770      	bx	lr

0800691e <__i2b>:
 800691e:	b510      	push	{r4, lr}
 8006920:	460c      	mov	r4, r1
 8006922:	2101      	movs	r1, #1
 8006924:	f7ff ff27 	bl	8006776 <_Balloc>
 8006928:	2201      	movs	r2, #1
 800692a:	6144      	str	r4, [r0, #20]
 800692c:	6102      	str	r2, [r0, #16]
 800692e:	bd10      	pop	{r4, pc}

08006930 <__multiply>:
 8006930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006934:	4614      	mov	r4, r2
 8006936:	690a      	ldr	r2, [r1, #16]
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	429a      	cmp	r2, r3
 800693c:	bfb8      	it	lt
 800693e:	460b      	movlt	r3, r1
 8006940:	4688      	mov	r8, r1
 8006942:	bfbc      	itt	lt
 8006944:	46a0      	movlt	r8, r4
 8006946:	461c      	movlt	r4, r3
 8006948:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800694c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006950:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006954:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006958:	eb07 0609 	add.w	r6, r7, r9
 800695c:	42b3      	cmp	r3, r6
 800695e:	bfb8      	it	lt
 8006960:	3101      	addlt	r1, #1
 8006962:	f7ff ff08 	bl	8006776 <_Balloc>
 8006966:	f100 0514 	add.w	r5, r0, #20
 800696a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800696e:	462b      	mov	r3, r5
 8006970:	2200      	movs	r2, #0
 8006972:	4573      	cmp	r3, lr
 8006974:	d316      	bcc.n	80069a4 <__multiply+0x74>
 8006976:	f104 0214 	add.w	r2, r4, #20
 800697a:	f108 0114 	add.w	r1, r8, #20
 800697e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006982:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	9b00      	ldr	r3, [sp, #0]
 800698a:	9201      	str	r2, [sp, #4]
 800698c:	4293      	cmp	r3, r2
 800698e:	d80c      	bhi.n	80069aa <__multiply+0x7a>
 8006990:	2e00      	cmp	r6, #0
 8006992:	dd03      	ble.n	800699c <__multiply+0x6c>
 8006994:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006998:	2b00      	cmp	r3, #0
 800699a:	d05d      	beq.n	8006a58 <__multiply+0x128>
 800699c:	6106      	str	r6, [r0, #16]
 800699e:	b003      	add	sp, #12
 80069a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a4:	f843 2b04 	str.w	r2, [r3], #4
 80069a8:	e7e3      	b.n	8006972 <__multiply+0x42>
 80069aa:	f8b2 b000 	ldrh.w	fp, [r2]
 80069ae:	f1bb 0f00 	cmp.w	fp, #0
 80069b2:	d023      	beq.n	80069fc <__multiply+0xcc>
 80069b4:	4689      	mov	r9, r1
 80069b6:	46ac      	mov	ip, r5
 80069b8:	f04f 0800 	mov.w	r8, #0
 80069bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80069c0:	f8dc a000 	ldr.w	sl, [ip]
 80069c4:	b2a3      	uxth	r3, r4
 80069c6:	fa1f fa8a 	uxth.w	sl, sl
 80069ca:	fb0b a303 	mla	r3, fp, r3, sl
 80069ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80069d2:	f8dc 4000 	ldr.w	r4, [ip]
 80069d6:	4443      	add	r3, r8
 80069d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80069dc:	fb0b 840a 	mla	r4, fp, sl, r8
 80069e0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80069e4:	46e2      	mov	sl, ip
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80069ec:	454f      	cmp	r7, r9
 80069ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80069f2:	f84a 3b04 	str.w	r3, [sl], #4
 80069f6:	d82b      	bhi.n	8006a50 <__multiply+0x120>
 80069f8:	f8cc 8004 	str.w	r8, [ip, #4]
 80069fc:	9b01      	ldr	r3, [sp, #4]
 80069fe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006a02:	3204      	adds	r2, #4
 8006a04:	f1ba 0f00 	cmp.w	sl, #0
 8006a08:	d020      	beq.n	8006a4c <__multiply+0x11c>
 8006a0a:	682b      	ldr	r3, [r5, #0]
 8006a0c:	4689      	mov	r9, r1
 8006a0e:	46a8      	mov	r8, r5
 8006a10:	f04f 0b00 	mov.w	fp, #0
 8006a14:	f8b9 c000 	ldrh.w	ip, [r9]
 8006a18:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006a1c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006a20:	445c      	add	r4, fp
 8006a22:	46c4      	mov	ip, r8
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a2a:	f84c 3b04 	str.w	r3, [ip], #4
 8006a2e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a32:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006a36:	0c1b      	lsrs	r3, r3, #16
 8006a38:	fb0a b303 	mla	r3, sl, r3, fp
 8006a3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a40:	454f      	cmp	r7, r9
 8006a42:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006a46:	d805      	bhi.n	8006a54 <__multiply+0x124>
 8006a48:	f8c8 3004 	str.w	r3, [r8, #4]
 8006a4c:	3504      	adds	r5, #4
 8006a4e:	e79b      	b.n	8006988 <__multiply+0x58>
 8006a50:	46d4      	mov	ip, sl
 8006a52:	e7b3      	b.n	80069bc <__multiply+0x8c>
 8006a54:	46e0      	mov	r8, ip
 8006a56:	e7dd      	b.n	8006a14 <__multiply+0xe4>
 8006a58:	3e01      	subs	r6, #1
 8006a5a:	e799      	b.n	8006990 <__multiply+0x60>

08006a5c <__pow5mult>:
 8006a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a60:	4615      	mov	r5, r2
 8006a62:	f012 0203 	ands.w	r2, r2, #3
 8006a66:	4606      	mov	r6, r0
 8006a68:	460f      	mov	r7, r1
 8006a6a:	d007      	beq.n	8006a7c <__pow5mult+0x20>
 8006a6c:	3a01      	subs	r2, #1
 8006a6e:	4c21      	ldr	r4, [pc, #132]	; (8006af4 <__pow5mult+0x98>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a76:	f7ff fec9 	bl	800680c <__multadd>
 8006a7a:	4607      	mov	r7, r0
 8006a7c:	10ad      	asrs	r5, r5, #2
 8006a7e:	d035      	beq.n	8006aec <__pow5mult+0x90>
 8006a80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a82:	b93c      	cbnz	r4, 8006a94 <__pow5mult+0x38>
 8006a84:	2010      	movs	r0, #16
 8006a86:	f7ff fe63 	bl	8006750 <malloc>
 8006a8a:	6270      	str	r0, [r6, #36]	; 0x24
 8006a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a90:	6004      	str	r4, [r0, #0]
 8006a92:	60c4      	str	r4, [r0, #12]
 8006a94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a9c:	b94c      	cbnz	r4, 8006ab2 <__pow5mult+0x56>
 8006a9e:	f240 2171 	movw	r1, #625	; 0x271
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f7ff ff3b 	bl	800691e <__i2b>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8006aae:	4604      	mov	r4, r0
 8006ab0:	6003      	str	r3, [r0, #0]
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	07eb      	lsls	r3, r5, #31
 8006ab8:	d50a      	bpl.n	8006ad0 <__pow5mult+0x74>
 8006aba:	4639      	mov	r1, r7
 8006abc:	4622      	mov	r2, r4
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7ff ff36 	bl	8006930 <__multiply>
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	4681      	mov	r9, r0
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f7ff fe88 	bl	80067de <_Bfree>
 8006ace:	464f      	mov	r7, r9
 8006ad0:	106d      	asrs	r5, r5, #1
 8006ad2:	d00b      	beq.n	8006aec <__pow5mult+0x90>
 8006ad4:	6820      	ldr	r0, [r4, #0]
 8006ad6:	b938      	cbnz	r0, 8006ae8 <__pow5mult+0x8c>
 8006ad8:	4622      	mov	r2, r4
 8006ada:	4621      	mov	r1, r4
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7ff ff27 	bl	8006930 <__multiply>
 8006ae2:	6020      	str	r0, [r4, #0]
 8006ae4:	f8c0 8000 	str.w	r8, [r0]
 8006ae8:	4604      	mov	r4, r0
 8006aea:	e7e4      	b.n	8006ab6 <__pow5mult+0x5a>
 8006aec:	4638      	mov	r0, r7
 8006aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af2:	bf00      	nop
 8006af4:	08007dc8 	.word	0x08007dc8

08006af8 <__lshift>:
 8006af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006afc:	460c      	mov	r4, r1
 8006afe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b02:	6923      	ldr	r3, [r4, #16]
 8006b04:	6849      	ldr	r1, [r1, #4]
 8006b06:	eb0a 0903 	add.w	r9, sl, r3
 8006b0a:	68a3      	ldr	r3, [r4, #8]
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	4616      	mov	r6, r2
 8006b10:	f109 0501 	add.w	r5, r9, #1
 8006b14:	42ab      	cmp	r3, r5
 8006b16:	db32      	blt.n	8006b7e <__lshift+0x86>
 8006b18:	4638      	mov	r0, r7
 8006b1a:	f7ff fe2c 	bl	8006776 <_Balloc>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	4680      	mov	r8, r0
 8006b22:	f100 0114 	add.w	r1, r0, #20
 8006b26:	461a      	mov	r2, r3
 8006b28:	4553      	cmp	r3, sl
 8006b2a:	db2b      	blt.n	8006b84 <__lshift+0x8c>
 8006b2c:	6920      	ldr	r0, [r4, #16]
 8006b2e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b32:	f104 0314 	add.w	r3, r4, #20
 8006b36:	f016 021f 	ands.w	r2, r6, #31
 8006b3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b3e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b42:	d025      	beq.n	8006b90 <__lshift+0x98>
 8006b44:	f1c2 0e20 	rsb	lr, r2, #32
 8006b48:	2000      	movs	r0, #0
 8006b4a:	681e      	ldr	r6, [r3, #0]
 8006b4c:	468a      	mov	sl, r1
 8006b4e:	4096      	lsls	r6, r2
 8006b50:	4330      	orrs	r0, r6
 8006b52:	f84a 0b04 	str.w	r0, [sl], #4
 8006b56:	f853 0b04 	ldr.w	r0, [r3], #4
 8006b5a:	459c      	cmp	ip, r3
 8006b5c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006b60:	d814      	bhi.n	8006b8c <__lshift+0x94>
 8006b62:	6048      	str	r0, [r1, #4]
 8006b64:	b108      	cbz	r0, 8006b6a <__lshift+0x72>
 8006b66:	f109 0502 	add.w	r5, r9, #2
 8006b6a:	3d01      	subs	r5, #1
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006b72:	4621      	mov	r1, r4
 8006b74:	f7ff fe33 	bl	80067de <_Bfree>
 8006b78:	4640      	mov	r0, r8
 8006b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7e:	3101      	adds	r1, #1
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	e7c7      	b.n	8006b14 <__lshift+0x1c>
 8006b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	e7cd      	b.n	8006b28 <__lshift+0x30>
 8006b8c:	4651      	mov	r1, sl
 8006b8e:	e7dc      	b.n	8006b4a <__lshift+0x52>
 8006b90:	3904      	subs	r1, #4
 8006b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b96:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b9a:	459c      	cmp	ip, r3
 8006b9c:	d8f9      	bhi.n	8006b92 <__lshift+0x9a>
 8006b9e:	e7e4      	b.n	8006b6a <__lshift+0x72>

08006ba0 <__mcmp>:
 8006ba0:	6903      	ldr	r3, [r0, #16]
 8006ba2:	690a      	ldr	r2, [r1, #16]
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	b530      	push	{r4, r5, lr}
 8006ba8:	d10c      	bne.n	8006bc4 <__mcmp+0x24>
 8006baa:	0092      	lsls	r2, r2, #2
 8006bac:	3014      	adds	r0, #20
 8006bae:	3114      	adds	r1, #20
 8006bb0:	1884      	adds	r4, r0, r2
 8006bb2:	4411      	add	r1, r2
 8006bb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006bb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006bbc:	4295      	cmp	r5, r2
 8006bbe:	d003      	beq.n	8006bc8 <__mcmp+0x28>
 8006bc0:	d305      	bcc.n	8006bce <__mcmp+0x2e>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	bd30      	pop	{r4, r5, pc}
 8006bc8:	42a0      	cmp	r0, r4
 8006bca:	d3f3      	bcc.n	8006bb4 <__mcmp+0x14>
 8006bcc:	e7fa      	b.n	8006bc4 <__mcmp+0x24>
 8006bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bd2:	e7f7      	b.n	8006bc4 <__mcmp+0x24>

08006bd4 <__mdiff>:
 8006bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd8:	460d      	mov	r5, r1
 8006bda:	4607      	mov	r7, r0
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4628      	mov	r0, r5
 8006be0:	4614      	mov	r4, r2
 8006be2:	f7ff ffdd 	bl	8006ba0 <__mcmp>
 8006be6:	1e06      	subs	r6, r0, #0
 8006be8:	d108      	bne.n	8006bfc <__mdiff+0x28>
 8006bea:	4631      	mov	r1, r6
 8006bec:	4638      	mov	r0, r7
 8006bee:	f7ff fdc2 	bl	8006776 <_Balloc>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfc:	bfa4      	itt	ge
 8006bfe:	4623      	movge	r3, r4
 8006c00:	462c      	movge	r4, r5
 8006c02:	4638      	mov	r0, r7
 8006c04:	6861      	ldr	r1, [r4, #4]
 8006c06:	bfa6      	itte	ge
 8006c08:	461d      	movge	r5, r3
 8006c0a:	2600      	movge	r6, #0
 8006c0c:	2601      	movlt	r6, #1
 8006c0e:	f7ff fdb2 	bl	8006776 <_Balloc>
 8006c12:	692b      	ldr	r3, [r5, #16]
 8006c14:	60c6      	str	r6, [r0, #12]
 8006c16:	6926      	ldr	r6, [r4, #16]
 8006c18:	f105 0914 	add.w	r9, r5, #20
 8006c1c:	f104 0214 	add.w	r2, r4, #20
 8006c20:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006c24:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006c28:	f100 0514 	add.w	r5, r0, #20
 8006c2c:	f04f 0e00 	mov.w	lr, #0
 8006c30:	f852 ab04 	ldr.w	sl, [r2], #4
 8006c34:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c38:	fa1e f18a 	uxtah	r1, lr, sl
 8006c3c:	b2a3      	uxth	r3, r4
 8006c3e:	1ac9      	subs	r1, r1, r3
 8006c40:	0c23      	lsrs	r3, r4, #16
 8006c42:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006c46:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c4a:	b289      	uxth	r1, r1
 8006c4c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006c50:	45c8      	cmp	r8, r9
 8006c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c56:	4694      	mov	ip, r2
 8006c58:	f845 3b04 	str.w	r3, [r5], #4
 8006c5c:	d8e8      	bhi.n	8006c30 <__mdiff+0x5c>
 8006c5e:	45bc      	cmp	ip, r7
 8006c60:	d304      	bcc.n	8006c6c <__mdiff+0x98>
 8006c62:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006c66:	b183      	cbz	r3, 8006c8a <__mdiff+0xb6>
 8006c68:	6106      	str	r6, [r0, #16]
 8006c6a:	e7c5      	b.n	8006bf8 <__mdiff+0x24>
 8006c6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c70:	fa1e f381 	uxtah	r3, lr, r1
 8006c74:	141a      	asrs	r2, r3, #16
 8006c76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c80:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006c84:	f845 3b04 	str.w	r3, [r5], #4
 8006c88:	e7e9      	b.n	8006c5e <__mdiff+0x8a>
 8006c8a:	3e01      	subs	r6, #1
 8006c8c:	e7e9      	b.n	8006c62 <__mdiff+0x8e>

08006c8e <__d2b>:
 8006c8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c92:	460e      	mov	r6, r1
 8006c94:	2101      	movs	r1, #1
 8006c96:	ec59 8b10 	vmov	r8, r9, d0
 8006c9a:	4615      	mov	r5, r2
 8006c9c:	f7ff fd6b 	bl	8006776 <_Balloc>
 8006ca0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006ca4:	4607      	mov	r7, r0
 8006ca6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006caa:	bb34      	cbnz	r4, 8006cfa <__d2b+0x6c>
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	f1b8 0300 	subs.w	r3, r8, #0
 8006cb2:	d027      	beq.n	8006d04 <__d2b+0x76>
 8006cb4:	a802      	add	r0, sp, #8
 8006cb6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006cba:	f7ff fe01 	bl	80068c0 <__lo0bits>
 8006cbe:	9900      	ldr	r1, [sp, #0]
 8006cc0:	b1f0      	cbz	r0, 8006d00 <__d2b+0x72>
 8006cc2:	9a01      	ldr	r2, [sp, #4]
 8006cc4:	f1c0 0320 	rsb	r3, r0, #32
 8006cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	40c2      	lsrs	r2, r0
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	9201      	str	r2, [sp, #4]
 8006cd4:	9b01      	ldr	r3, [sp, #4]
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bf14      	ite	ne
 8006cdc:	2102      	movne	r1, #2
 8006cde:	2101      	moveq	r1, #1
 8006ce0:	6139      	str	r1, [r7, #16]
 8006ce2:	b1c4      	cbz	r4, 8006d16 <__d2b+0x88>
 8006ce4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ce8:	4404      	add	r4, r0
 8006cea:	6034      	str	r4, [r6, #0]
 8006cec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006cf0:	6028      	str	r0, [r5, #0]
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	b003      	add	sp, #12
 8006cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cfe:	e7d5      	b.n	8006cac <__d2b+0x1e>
 8006d00:	6179      	str	r1, [r7, #20]
 8006d02:	e7e7      	b.n	8006cd4 <__d2b+0x46>
 8006d04:	a801      	add	r0, sp, #4
 8006d06:	f7ff fddb 	bl	80068c0 <__lo0bits>
 8006d0a:	9b01      	ldr	r3, [sp, #4]
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	2101      	movs	r1, #1
 8006d10:	6139      	str	r1, [r7, #16]
 8006d12:	3020      	adds	r0, #32
 8006d14:	e7e5      	b.n	8006ce2 <__d2b+0x54>
 8006d16:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006d1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d1e:	6030      	str	r0, [r6, #0]
 8006d20:	6918      	ldr	r0, [r3, #16]
 8006d22:	f7ff fdae 	bl	8006882 <__hi0bits>
 8006d26:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d2a:	e7e1      	b.n	8006cf0 <__d2b+0x62>

08006d2c <_calloc_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	fb02 f401 	mul.w	r4, r2, r1
 8006d32:	4621      	mov	r1, r4
 8006d34:	f000 f856 	bl	8006de4 <_malloc_r>
 8006d38:	4605      	mov	r5, r0
 8006d3a:	b118      	cbz	r0, 8006d44 <_calloc_r+0x18>
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	2100      	movs	r1, #0
 8006d40:	f7fe f96c 	bl	800501c <memset>
 8006d44:	4628      	mov	r0, r5
 8006d46:	bd38      	pop	{r3, r4, r5, pc}

08006d48 <_free_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	d045      	beq.n	8006ddc <_free_r+0x94>
 8006d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d54:	1f0c      	subs	r4, r1, #4
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bfb8      	it	lt
 8006d5a:	18e4      	addlt	r4, r4, r3
 8006d5c:	f000 fc4a 	bl	80075f4 <__malloc_lock>
 8006d60:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <_free_r+0x98>)
 8006d62:	6813      	ldr	r3, [r2, #0]
 8006d64:	4610      	mov	r0, r2
 8006d66:	b933      	cbnz	r3, 8006d76 <_free_r+0x2e>
 8006d68:	6063      	str	r3, [r4, #4]
 8006d6a:	6014      	str	r4, [r2, #0]
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d72:	f000 bc40 	b.w	80075f6 <__malloc_unlock>
 8006d76:	42a3      	cmp	r3, r4
 8006d78:	d90c      	bls.n	8006d94 <_free_r+0x4c>
 8006d7a:	6821      	ldr	r1, [r4, #0]
 8006d7c:	1862      	adds	r2, r4, r1
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	bf04      	itt	eq
 8006d82:	681a      	ldreq	r2, [r3, #0]
 8006d84:	685b      	ldreq	r3, [r3, #4]
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	bf04      	itt	eq
 8006d8a:	1852      	addeq	r2, r2, r1
 8006d8c:	6022      	streq	r2, [r4, #0]
 8006d8e:	6004      	str	r4, [r0, #0]
 8006d90:	e7ec      	b.n	8006d6c <_free_r+0x24>
 8006d92:	4613      	mov	r3, r2
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	b10a      	cbz	r2, 8006d9c <_free_r+0x54>
 8006d98:	42a2      	cmp	r2, r4
 8006d9a:	d9fa      	bls.n	8006d92 <_free_r+0x4a>
 8006d9c:	6819      	ldr	r1, [r3, #0]
 8006d9e:	1858      	adds	r0, r3, r1
 8006da0:	42a0      	cmp	r0, r4
 8006da2:	d10b      	bne.n	8006dbc <_free_r+0x74>
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	4401      	add	r1, r0
 8006da8:	1858      	adds	r0, r3, r1
 8006daa:	4282      	cmp	r2, r0
 8006dac:	6019      	str	r1, [r3, #0]
 8006dae:	d1dd      	bne.n	8006d6c <_free_r+0x24>
 8006db0:	6810      	ldr	r0, [r2, #0]
 8006db2:	6852      	ldr	r2, [r2, #4]
 8006db4:	605a      	str	r2, [r3, #4]
 8006db6:	4401      	add	r1, r0
 8006db8:	6019      	str	r1, [r3, #0]
 8006dba:	e7d7      	b.n	8006d6c <_free_r+0x24>
 8006dbc:	d902      	bls.n	8006dc4 <_free_r+0x7c>
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	602b      	str	r3, [r5, #0]
 8006dc2:	e7d3      	b.n	8006d6c <_free_r+0x24>
 8006dc4:	6820      	ldr	r0, [r4, #0]
 8006dc6:	1821      	adds	r1, r4, r0
 8006dc8:	428a      	cmp	r2, r1
 8006dca:	bf04      	itt	eq
 8006dcc:	6811      	ldreq	r1, [r2, #0]
 8006dce:	6852      	ldreq	r2, [r2, #4]
 8006dd0:	6062      	str	r2, [r4, #4]
 8006dd2:	bf04      	itt	eq
 8006dd4:	1809      	addeq	r1, r1, r0
 8006dd6:	6021      	streq	r1, [r4, #0]
 8006dd8:	605c      	str	r4, [r3, #4]
 8006dda:	e7c7      	b.n	8006d6c <_free_r+0x24>
 8006ddc:	bd38      	pop	{r3, r4, r5, pc}
 8006dde:	bf00      	nop
 8006de0:	20000208 	.word	0x20000208

08006de4 <_malloc_r>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	1ccd      	adds	r5, r1, #3
 8006de8:	f025 0503 	bic.w	r5, r5, #3
 8006dec:	3508      	adds	r5, #8
 8006dee:	2d0c      	cmp	r5, #12
 8006df0:	bf38      	it	cc
 8006df2:	250c      	movcc	r5, #12
 8006df4:	2d00      	cmp	r5, #0
 8006df6:	4606      	mov	r6, r0
 8006df8:	db01      	blt.n	8006dfe <_malloc_r+0x1a>
 8006dfa:	42a9      	cmp	r1, r5
 8006dfc:	d903      	bls.n	8006e06 <_malloc_r+0x22>
 8006dfe:	230c      	movs	r3, #12
 8006e00:	6033      	str	r3, [r6, #0]
 8006e02:	2000      	movs	r0, #0
 8006e04:	bd70      	pop	{r4, r5, r6, pc}
 8006e06:	f000 fbf5 	bl	80075f4 <__malloc_lock>
 8006e0a:	4a21      	ldr	r2, [pc, #132]	; (8006e90 <_malloc_r+0xac>)
 8006e0c:	6814      	ldr	r4, [r2, #0]
 8006e0e:	4621      	mov	r1, r4
 8006e10:	b991      	cbnz	r1, 8006e38 <_malloc_r+0x54>
 8006e12:	4c20      	ldr	r4, [pc, #128]	; (8006e94 <_malloc_r+0xb0>)
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	b91b      	cbnz	r3, 8006e20 <_malloc_r+0x3c>
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f000 f97d 	bl	8007118 <_sbrk_r>
 8006e1e:	6020      	str	r0, [r4, #0]
 8006e20:	4629      	mov	r1, r5
 8006e22:	4630      	mov	r0, r6
 8006e24:	f000 f978 	bl	8007118 <_sbrk_r>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d124      	bne.n	8006e76 <_malloc_r+0x92>
 8006e2c:	230c      	movs	r3, #12
 8006e2e:	6033      	str	r3, [r6, #0]
 8006e30:	4630      	mov	r0, r6
 8006e32:	f000 fbe0 	bl	80075f6 <__malloc_unlock>
 8006e36:	e7e4      	b.n	8006e02 <_malloc_r+0x1e>
 8006e38:	680b      	ldr	r3, [r1, #0]
 8006e3a:	1b5b      	subs	r3, r3, r5
 8006e3c:	d418      	bmi.n	8006e70 <_malloc_r+0x8c>
 8006e3e:	2b0b      	cmp	r3, #11
 8006e40:	d90f      	bls.n	8006e62 <_malloc_r+0x7e>
 8006e42:	600b      	str	r3, [r1, #0]
 8006e44:	50cd      	str	r5, [r1, r3]
 8006e46:	18cc      	adds	r4, r1, r3
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 fbd4 	bl	80075f6 <__malloc_unlock>
 8006e4e:	f104 000b 	add.w	r0, r4, #11
 8006e52:	1d23      	adds	r3, r4, #4
 8006e54:	f020 0007 	bic.w	r0, r0, #7
 8006e58:	1ac3      	subs	r3, r0, r3
 8006e5a:	d0d3      	beq.n	8006e04 <_malloc_r+0x20>
 8006e5c:	425a      	negs	r2, r3
 8006e5e:	50e2      	str	r2, [r4, r3]
 8006e60:	e7d0      	b.n	8006e04 <_malloc_r+0x20>
 8006e62:	428c      	cmp	r4, r1
 8006e64:	684b      	ldr	r3, [r1, #4]
 8006e66:	bf16      	itet	ne
 8006e68:	6063      	strne	r3, [r4, #4]
 8006e6a:	6013      	streq	r3, [r2, #0]
 8006e6c:	460c      	movne	r4, r1
 8006e6e:	e7eb      	b.n	8006e48 <_malloc_r+0x64>
 8006e70:	460c      	mov	r4, r1
 8006e72:	6849      	ldr	r1, [r1, #4]
 8006e74:	e7cc      	b.n	8006e10 <_malloc_r+0x2c>
 8006e76:	1cc4      	adds	r4, r0, #3
 8006e78:	f024 0403 	bic.w	r4, r4, #3
 8006e7c:	42a0      	cmp	r0, r4
 8006e7e:	d005      	beq.n	8006e8c <_malloc_r+0xa8>
 8006e80:	1a21      	subs	r1, r4, r0
 8006e82:	4630      	mov	r0, r6
 8006e84:	f000 f948 	bl	8007118 <_sbrk_r>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d0cf      	beq.n	8006e2c <_malloc_r+0x48>
 8006e8c:	6025      	str	r5, [r4, #0]
 8006e8e:	e7db      	b.n	8006e48 <_malloc_r+0x64>
 8006e90:	20000208 	.word	0x20000208
 8006e94:	2000020c 	.word	0x2000020c

08006e98 <__sfputc_r>:
 8006e98:	6893      	ldr	r3, [r2, #8]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	b410      	push	{r4}
 8006ea0:	6093      	str	r3, [r2, #8]
 8006ea2:	da08      	bge.n	8006eb6 <__sfputc_r+0x1e>
 8006ea4:	6994      	ldr	r4, [r2, #24]
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	db01      	blt.n	8006eae <__sfputc_r+0x16>
 8006eaa:	290a      	cmp	r1, #10
 8006eac:	d103      	bne.n	8006eb6 <__sfputc_r+0x1e>
 8006eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eb2:	f000 b985 	b.w	80071c0 <__swbuf_r>
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	1c58      	adds	r0, r3, #1
 8006eba:	6010      	str	r0, [r2, #0]
 8006ebc:	7019      	strb	r1, [r3, #0]
 8006ebe:	4608      	mov	r0, r1
 8006ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <__sfputs_r>:
 8006ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec8:	4606      	mov	r6, r0
 8006eca:	460f      	mov	r7, r1
 8006ecc:	4614      	mov	r4, r2
 8006ece:	18d5      	adds	r5, r2, r3
 8006ed0:	42ac      	cmp	r4, r5
 8006ed2:	d101      	bne.n	8006ed8 <__sfputs_r+0x12>
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	e007      	b.n	8006ee8 <__sfputs_r+0x22>
 8006ed8:	463a      	mov	r2, r7
 8006eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f7ff ffda 	bl	8006e98 <__sfputc_r>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d1f3      	bne.n	8006ed0 <__sfputs_r+0xa>
 8006ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006eec <_vfiprintf_r>:
 8006eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	b09d      	sub	sp, #116	; 0x74
 8006ef4:	4617      	mov	r7, r2
 8006ef6:	461d      	mov	r5, r3
 8006ef8:	4606      	mov	r6, r0
 8006efa:	b118      	cbz	r0, 8006f04 <_vfiprintf_r+0x18>
 8006efc:	6983      	ldr	r3, [r0, #24]
 8006efe:	b90b      	cbnz	r3, 8006f04 <_vfiprintf_r+0x18>
 8006f00:	f7ff fb8e 	bl	8006620 <__sinit>
 8006f04:	4b7c      	ldr	r3, [pc, #496]	; (80070f8 <_vfiprintf_r+0x20c>)
 8006f06:	429c      	cmp	r4, r3
 8006f08:	d158      	bne.n	8006fbc <_vfiprintf_r+0xd0>
 8006f0a:	6874      	ldr	r4, [r6, #4]
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	0718      	lsls	r0, r3, #28
 8006f10:	d55e      	bpl.n	8006fd0 <_vfiprintf_r+0xe4>
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d05b      	beq.n	8006fd0 <_vfiprintf_r+0xe4>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1c:	2320      	movs	r3, #32
 8006f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f22:	2330      	movs	r3, #48	; 0x30
 8006f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f28:	9503      	str	r5, [sp, #12]
 8006f2a:	f04f 0b01 	mov.w	fp, #1
 8006f2e:	46b8      	mov	r8, r7
 8006f30:	4645      	mov	r5, r8
 8006f32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f36:	b10b      	cbz	r3, 8006f3c <_vfiprintf_r+0x50>
 8006f38:	2b25      	cmp	r3, #37	; 0x25
 8006f3a:	d154      	bne.n	8006fe6 <_vfiprintf_r+0xfa>
 8006f3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006f40:	d00b      	beq.n	8006f5a <_vfiprintf_r+0x6e>
 8006f42:	4653      	mov	r3, sl
 8006f44:	463a      	mov	r2, r7
 8006f46:	4621      	mov	r1, r4
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f7ff ffbc 	bl	8006ec6 <__sfputs_r>
 8006f4e:	3001      	adds	r0, #1
 8006f50:	f000 80c2 	beq.w	80070d8 <_vfiprintf_r+0x1ec>
 8006f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f56:	4453      	add	r3, sl
 8006f58:	9309      	str	r3, [sp, #36]	; 0x24
 8006f5a:	f898 3000 	ldrb.w	r3, [r8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 80ba 	beq.w	80070d8 <_vfiprintf_r+0x1ec>
 8006f64:	2300      	movs	r3, #0
 8006f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f6e:	9304      	str	r3, [sp, #16]
 8006f70:	9307      	str	r3, [sp, #28]
 8006f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f76:	931a      	str	r3, [sp, #104]	; 0x68
 8006f78:	46a8      	mov	r8, r5
 8006f7a:	2205      	movs	r2, #5
 8006f7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006f80:	485e      	ldr	r0, [pc, #376]	; (80070fc <_vfiprintf_r+0x210>)
 8006f82:	f7f9 f92d 	bl	80001e0 <memchr>
 8006f86:	9b04      	ldr	r3, [sp, #16]
 8006f88:	bb78      	cbnz	r0, 8006fea <_vfiprintf_r+0xfe>
 8006f8a:	06d9      	lsls	r1, r3, #27
 8006f8c:	bf44      	itt	mi
 8006f8e:	2220      	movmi	r2, #32
 8006f90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f94:	071a      	lsls	r2, r3, #28
 8006f96:	bf44      	itt	mi
 8006f98:	222b      	movmi	r2, #43	; 0x2b
 8006f9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f9e:	782a      	ldrb	r2, [r5, #0]
 8006fa0:	2a2a      	cmp	r2, #42	; 0x2a
 8006fa2:	d02a      	beq.n	8006ffa <_vfiprintf_r+0x10e>
 8006fa4:	9a07      	ldr	r2, [sp, #28]
 8006fa6:	46a8      	mov	r8, r5
 8006fa8:	2000      	movs	r0, #0
 8006faa:	250a      	movs	r5, #10
 8006fac:	4641      	mov	r1, r8
 8006fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fb2:	3b30      	subs	r3, #48	; 0x30
 8006fb4:	2b09      	cmp	r3, #9
 8006fb6:	d969      	bls.n	800708c <_vfiprintf_r+0x1a0>
 8006fb8:	b360      	cbz	r0, 8007014 <_vfiprintf_r+0x128>
 8006fba:	e024      	b.n	8007006 <_vfiprintf_r+0x11a>
 8006fbc:	4b50      	ldr	r3, [pc, #320]	; (8007100 <_vfiprintf_r+0x214>)
 8006fbe:	429c      	cmp	r4, r3
 8006fc0:	d101      	bne.n	8006fc6 <_vfiprintf_r+0xda>
 8006fc2:	68b4      	ldr	r4, [r6, #8]
 8006fc4:	e7a2      	b.n	8006f0c <_vfiprintf_r+0x20>
 8006fc6:	4b4f      	ldr	r3, [pc, #316]	; (8007104 <_vfiprintf_r+0x218>)
 8006fc8:	429c      	cmp	r4, r3
 8006fca:	bf08      	it	eq
 8006fcc:	68f4      	ldreq	r4, [r6, #12]
 8006fce:	e79d      	b.n	8006f0c <_vfiprintf_r+0x20>
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f000 f958 	bl	8007288 <__swsetup_r>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d09d      	beq.n	8006f18 <_vfiprintf_r+0x2c>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe0:	b01d      	add	sp, #116	; 0x74
 8006fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe6:	46a8      	mov	r8, r5
 8006fe8:	e7a2      	b.n	8006f30 <_vfiprintf_r+0x44>
 8006fea:	4a44      	ldr	r2, [pc, #272]	; (80070fc <_vfiprintf_r+0x210>)
 8006fec:	1a80      	subs	r0, r0, r2
 8006fee:	fa0b f000 	lsl.w	r0, fp, r0
 8006ff2:	4318      	orrs	r0, r3
 8006ff4:	9004      	str	r0, [sp, #16]
 8006ff6:	4645      	mov	r5, r8
 8006ff8:	e7be      	b.n	8006f78 <_vfiprintf_r+0x8c>
 8006ffa:	9a03      	ldr	r2, [sp, #12]
 8006ffc:	1d11      	adds	r1, r2, #4
 8006ffe:	6812      	ldr	r2, [r2, #0]
 8007000:	9103      	str	r1, [sp, #12]
 8007002:	2a00      	cmp	r2, #0
 8007004:	db01      	blt.n	800700a <_vfiprintf_r+0x11e>
 8007006:	9207      	str	r2, [sp, #28]
 8007008:	e004      	b.n	8007014 <_vfiprintf_r+0x128>
 800700a:	4252      	negs	r2, r2
 800700c:	f043 0302 	orr.w	r3, r3, #2
 8007010:	9207      	str	r2, [sp, #28]
 8007012:	9304      	str	r3, [sp, #16]
 8007014:	f898 3000 	ldrb.w	r3, [r8]
 8007018:	2b2e      	cmp	r3, #46	; 0x2e
 800701a:	d10e      	bne.n	800703a <_vfiprintf_r+0x14e>
 800701c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007020:	2b2a      	cmp	r3, #42	; 0x2a
 8007022:	d138      	bne.n	8007096 <_vfiprintf_r+0x1aa>
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	1d1a      	adds	r2, r3, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	9203      	str	r2, [sp, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	bfb8      	it	lt
 8007030:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007034:	f108 0802 	add.w	r8, r8, #2
 8007038:	9305      	str	r3, [sp, #20]
 800703a:	4d33      	ldr	r5, [pc, #204]	; (8007108 <_vfiprintf_r+0x21c>)
 800703c:	f898 1000 	ldrb.w	r1, [r8]
 8007040:	2203      	movs	r2, #3
 8007042:	4628      	mov	r0, r5
 8007044:	f7f9 f8cc 	bl	80001e0 <memchr>
 8007048:	b140      	cbz	r0, 800705c <_vfiprintf_r+0x170>
 800704a:	2340      	movs	r3, #64	; 0x40
 800704c:	1b40      	subs	r0, r0, r5
 800704e:	fa03 f000 	lsl.w	r0, r3, r0
 8007052:	9b04      	ldr	r3, [sp, #16]
 8007054:	4303      	orrs	r3, r0
 8007056:	f108 0801 	add.w	r8, r8, #1
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	f898 1000 	ldrb.w	r1, [r8]
 8007060:	482a      	ldr	r0, [pc, #168]	; (800710c <_vfiprintf_r+0x220>)
 8007062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007066:	2206      	movs	r2, #6
 8007068:	f108 0701 	add.w	r7, r8, #1
 800706c:	f7f9 f8b8 	bl	80001e0 <memchr>
 8007070:	2800      	cmp	r0, #0
 8007072:	d037      	beq.n	80070e4 <_vfiprintf_r+0x1f8>
 8007074:	4b26      	ldr	r3, [pc, #152]	; (8007110 <_vfiprintf_r+0x224>)
 8007076:	bb1b      	cbnz	r3, 80070c0 <_vfiprintf_r+0x1d4>
 8007078:	9b03      	ldr	r3, [sp, #12]
 800707a:	3307      	adds	r3, #7
 800707c:	f023 0307 	bic.w	r3, r3, #7
 8007080:	3308      	adds	r3, #8
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007086:	444b      	add	r3, r9
 8007088:	9309      	str	r3, [sp, #36]	; 0x24
 800708a:	e750      	b.n	8006f2e <_vfiprintf_r+0x42>
 800708c:	fb05 3202 	mla	r2, r5, r2, r3
 8007090:	2001      	movs	r0, #1
 8007092:	4688      	mov	r8, r1
 8007094:	e78a      	b.n	8006fac <_vfiprintf_r+0xc0>
 8007096:	2300      	movs	r3, #0
 8007098:	f108 0801 	add.w	r8, r8, #1
 800709c:	9305      	str	r3, [sp, #20]
 800709e:	4619      	mov	r1, r3
 80070a0:	250a      	movs	r5, #10
 80070a2:	4640      	mov	r0, r8
 80070a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a8:	3a30      	subs	r2, #48	; 0x30
 80070aa:	2a09      	cmp	r2, #9
 80070ac:	d903      	bls.n	80070b6 <_vfiprintf_r+0x1ca>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0c3      	beq.n	800703a <_vfiprintf_r+0x14e>
 80070b2:	9105      	str	r1, [sp, #20]
 80070b4:	e7c1      	b.n	800703a <_vfiprintf_r+0x14e>
 80070b6:	fb05 2101 	mla	r1, r5, r1, r2
 80070ba:	2301      	movs	r3, #1
 80070bc:	4680      	mov	r8, r0
 80070be:	e7f0      	b.n	80070a2 <_vfiprintf_r+0x1b6>
 80070c0:	ab03      	add	r3, sp, #12
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	4622      	mov	r2, r4
 80070c6:	4b13      	ldr	r3, [pc, #76]	; (8007114 <_vfiprintf_r+0x228>)
 80070c8:	a904      	add	r1, sp, #16
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7fe f842 	bl	8005154 <_printf_float>
 80070d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80070d4:	4681      	mov	r9, r0
 80070d6:	d1d5      	bne.n	8007084 <_vfiprintf_r+0x198>
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	065b      	lsls	r3, r3, #25
 80070dc:	f53f af7e 	bmi.w	8006fdc <_vfiprintf_r+0xf0>
 80070e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070e2:	e77d      	b.n	8006fe0 <_vfiprintf_r+0xf4>
 80070e4:	ab03      	add	r3, sp, #12
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	4622      	mov	r2, r4
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <_vfiprintf_r+0x228>)
 80070ec:	a904      	add	r1, sp, #16
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7fe fae6 	bl	80056c0 <_printf_i>
 80070f4:	e7ec      	b.n	80070d0 <_vfiprintf_r+0x1e4>
 80070f6:	bf00      	nop
 80070f8:	08007c94 	.word	0x08007c94
 80070fc:	08007dd4 	.word	0x08007dd4
 8007100:	08007cb4 	.word	0x08007cb4
 8007104:	08007c74 	.word	0x08007c74
 8007108:	08007dda 	.word	0x08007dda
 800710c:	08007dde 	.word	0x08007dde
 8007110:	08005155 	.word	0x08005155
 8007114:	08006ec7 	.word	0x08006ec7

08007118 <_sbrk_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4c06      	ldr	r4, [pc, #24]	; (8007134 <_sbrk_r+0x1c>)
 800711c:	2300      	movs	r3, #0
 800711e:	4605      	mov	r5, r0
 8007120:	4608      	mov	r0, r1
 8007122:	6023      	str	r3, [r4, #0]
 8007124:	f7fa f96e 	bl	8001404 <_sbrk>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_sbrk_r+0x1a>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	b103      	cbz	r3, 8007132 <_sbrk_r+0x1a>
 8007130:	602b      	str	r3, [r5, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20000424 	.word	0x20000424

08007138 <__sread>:
 8007138:	b510      	push	{r4, lr}
 800713a:	460c      	mov	r4, r1
 800713c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007140:	f000 fa5a 	bl	80075f8 <_read_r>
 8007144:	2800      	cmp	r0, #0
 8007146:	bfab      	itete	ge
 8007148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800714a:	89a3      	ldrhlt	r3, [r4, #12]
 800714c:	181b      	addge	r3, r3, r0
 800714e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007152:	bfac      	ite	ge
 8007154:	6563      	strge	r3, [r4, #84]	; 0x54
 8007156:	81a3      	strhlt	r3, [r4, #12]
 8007158:	bd10      	pop	{r4, pc}

0800715a <__swrite>:
 800715a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715e:	461f      	mov	r7, r3
 8007160:	898b      	ldrh	r3, [r1, #12]
 8007162:	05db      	lsls	r3, r3, #23
 8007164:	4605      	mov	r5, r0
 8007166:	460c      	mov	r4, r1
 8007168:	4616      	mov	r6, r2
 800716a:	d505      	bpl.n	8007178 <__swrite+0x1e>
 800716c:	2302      	movs	r3, #2
 800716e:	2200      	movs	r2, #0
 8007170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007174:	f000 f9b6 	bl	80074e4 <_lseek_r>
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800717e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	4632      	mov	r2, r6
 8007186:	463b      	mov	r3, r7
 8007188:	4628      	mov	r0, r5
 800718a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800718e:	f000 b869 	b.w	8007264 <_write_r>

08007192 <__sseek>:
 8007192:	b510      	push	{r4, lr}
 8007194:	460c      	mov	r4, r1
 8007196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719a:	f000 f9a3 	bl	80074e4 <_lseek_r>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	bf15      	itete	ne
 80071a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80071a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071ae:	81a3      	strheq	r3, [r4, #12]
 80071b0:	bf18      	it	ne
 80071b2:	81a3      	strhne	r3, [r4, #12]
 80071b4:	bd10      	pop	{r4, pc}

080071b6 <__sclose>:
 80071b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ba:	f000 b8d3 	b.w	8007364 <_close_r>
	...

080071c0 <__swbuf_r>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	460e      	mov	r6, r1
 80071c4:	4614      	mov	r4, r2
 80071c6:	4605      	mov	r5, r0
 80071c8:	b118      	cbz	r0, 80071d2 <__swbuf_r+0x12>
 80071ca:	6983      	ldr	r3, [r0, #24]
 80071cc:	b90b      	cbnz	r3, 80071d2 <__swbuf_r+0x12>
 80071ce:	f7ff fa27 	bl	8006620 <__sinit>
 80071d2:	4b21      	ldr	r3, [pc, #132]	; (8007258 <__swbuf_r+0x98>)
 80071d4:	429c      	cmp	r4, r3
 80071d6:	d12a      	bne.n	800722e <__swbuf_r+0x6e>
 80071d8:	686c      	ldr	r4, [r5, #4]
 80071da:	69a3      	ldr	r3, [r4, #24]
 80071dc:	60a3      	str	r3, [r4, #8]
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	071a      	lsls	r2, r3, #28
 80071e2:	d52e      	bpl.n	8007242 <__swbuf_r+0x82>
 80071e4:	6923      	ldr	r3, [r4, #16]
 80071e6:	b363      	cbz	r3, 8007242 <__swbuf_r+0x82>
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	6820      	ldr	r0, [r4, #0]
 80071ec:	1ac0      	subs	r0, r0, r3
 80071ee:	6963      	ldr	r3, [r4, #20]
 80071f0:	b2f6      	uxtb	r6, r6
 80071f2:	4283      	cmp	r3, r0
 80071f4:	4637      	mov	r7, r6
 80071f6:	dc04      	bgt.n	8007202 <__swbuf_r+0x42>
 80071f8:	4621      	mov	r1, r4
 80071fa:	4628      	mov	r0, r5
 80071fc:	f000 f948 	bl	8007490 <_fflush_r>
 8007200:	bb28      	cbnz	r0, 800724e <__swbuf_r+0x8e>
 8007202:	68a3      	ldr	r3, [r4, #8]
 8007204:	3b01      	subs	r3, #1
 8007206:	60a3      	str	r3, [r4, #8]
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	6022      	str	r2, [r4, #0]
 800720e:	701e      	strb	r6, [r3, #0]
 8007210:	6963      	ldr	r3, [r4, #20]
 8007212:	3001      	adds	r0, #1
 8007214:	4283      	cmp	r3, r0
 8007216:	d004      	beq.n	8007222 <__swbuf_r+0x62>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	07db      	lsls	r3, r3, #31
 800721c:	d519      	bpl.n	8007252 <__swbuf_r+0x92>
 800721e:	2e0a      	cmp	r6, #10
 8007220:	d117      	bne.n	8007252 <__swbuf_r+0x92>
 8007222:	4621      	mov	r1, r4
 8007224:	4628      	mov	r0, r5
 8007226:	f000 f933 	bl	8007490 <_fflush_r>
 800722a:	b190      	cbz	r0, 8007252 <__swbuf_r+0x92>
 800722c:	e00f      	b.n	800724e <__swbuf_r+0x8e>
 800722e:	4b0b      	ldr	r3, [pc, #44]	; (800725c <__swbuf_r+0x9c>)
 8007230:	429c      	cmp	r4, r3
 8007232:	d101      	bne.n	8007238 <__swbuf_r+0x78>
 8007234:	68ac      	ldr	r4, [r5, #8]
 8007236:	e7d0      	b.n	80071da <__swbuf_r+0x1a>
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <__swbuf_r+0xa0>)
 800723a:	429c      	cmp	r4, r3
 800723c:	bf08      	it	eq
 800723e:	68ec      	ldreq	r4, [r5, #12]
 8007240:	e7cb      	b.n	80071da <__swbuf_r+0x1a>
 8007242:	4621      	mov	r1, r4
 8007244:	4628      	mov	r0, r5
 8007246:	f000 f81f 	bl	8007288 <__swsetup_r>
 800724a:	2800      	cmp	r0, #0
 800724c:	d0cc      	beq.n	80071e8 <__swbuf_r+0x28>
 800724e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007252:	4638      	mov	r0, r7
 8007254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007256:	bf00      	nop
 8007258:	08007c94 	.word	0x08007c94
 800725c:	08007cb4 	.word	0x08007cb4
 8007260:	08007c74 	.word	0x08007c74

08007264 <_write_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4c07      	ldr	r4, [pc, #28]	; (8007284 <_write_r+0x20>)
 8007268:	4605      	mov	r5, r0
 800726a:	4608      	mov	r0, r1
 800726c:	4611      	mov	r1, r2
 800726e:	2200      	movs	r2, #0
 8007270:	6022      	str	r2, [r4, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f000 fab3 	bl	80077de <_write>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_write_r+0x1e>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	b103      	cbz	r3, 8007282 <_write_r+0x1e>
 8007280:	602b      	str	r3, [r5, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	20000424 	.word	0x20000424

08007288 <__swsetup_r>:
 8007288:	4b32      	ldr	r3, [pc, #200]	; (8007354 <__swsetup_r+0xcc>)
 800728a:	b570      	push	{r4, r5, r6, lr}
 800728c:	681d      	ldr	r5, [r3, #0]
 800728e:	4606      	mov	r6, r0
 8007290:	460c      	mov	r4, r1
 8007292:	b125      	cbz	r5, 800729e <__swsetup_r+0x16>
 8007294:	69ab      	ldr	r3, [r5, #24]
 8007296:	b913      	cbnz	r3, 800729e <__swsetup_r+0x16>
 8007298:	4628      	mov	r0, r5
 800729a:	f7ff f9c1 	bl	8006620 <__sinit>
 800729e:	4b2e      	ldr	r3, [pc, #184]	; (8007358 <__swsetup_r+0xd0>)
 80072a0:	429c      	cmp	r4, r3
 80072a2:	d10f      	bne.n	80072c4 <__swsetup_r+0x3c>
 80072a4:	686c      	ldr	r4, [r5, #4]
 80072a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	0715      	lsls	r5, r2, #28
 80072ae:	d42c      	bmi.n	800730a <__swsetup_r+0x82>
 80072b0:	06d0      	lsls	r0, r2, #27
 80072b2:	d411      	bmi.n	80072d8 <__swsetup_r+0x50>
 80072b4:	2209      	movs	r2, #9
 80072b6:	6032      	str	r2, [r6, #0]
 80072b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072bc:	81a3      	strh	r3, [r4, #12]
 80072be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072c2:	e03e      	b.n	8007342 <__swsetup_r+0xba>
 80072c4:	4b25      	ldr	r3, [pc, #148]	; (800735c <__swsetup_r+0xd4>)
 80072c6:	429c      	cmp	r4, r3
 80072c8:	d101      	bne.n	80072ce <__swsetup_r+0x46>
 80072ca:	68ac      	ldr	r4, [r5, #8]
 80072cc:	e7eb      	b.n	80072a6 <__swsetup_r+0x1e>
 80072ce:	4b24      	ldr	r3, [pc, #144]	; (8007360 <__swsetup_r+0xd8>)
 80072d0:	429c      	cmp	r4, r3
 80072d2:	bf08      	it	eq
 80072d4:	68ec      	ldreq	r4, [r5, #12]
 80072d6:	e7e6      	b.n	80072a6 <__swsetup_r+0x1e>
 80072d8:	0751      	lsls	r1, r2, #29
 80072da:	d512      	bpl.n	8007302 <__swsetup_r+0x7a>
 80072dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072de:	b141      	cbz	r1, 80072f2 <__swsetup_r+0x6a>
 80072e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072e4:	4299      	cmp	r1, r3
 80072e6:	d002      	beq.n	80072ee <__swsetup_r+0x66>
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff fd2d 	bl	8006d48 <_free_r>
 80072ee:	2300      	movs	r3, #0
 80072f0:	6363      	str	r3, [r4, #52]	; 0x34
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072f8:	81a3      	strh	r3, [r4, #12]
 80072fa:	2300      	movs	r3, #0
 80072fc:	6063      	str	r3, [r4, #4]
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	f043 0308 	orr.w	r3, r3, #8
 8007308:	81a3      	strh	r3, [r4, #12]
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	b94b      	cbnz	r3, 8007322 <__swsetup_r+0x9a>
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007318:	d003      	beq.n	8007322 <__swsetup_r+0x9a>
 800731a:	4621      	mov	r1, r4
 800731c:	4630      	mov	r0, r6
 800731e:	f000 f917 	bl	8007550 <__smakebuf_r>
 8007322:	89a2      	ldrh	r2, [r4, #12]
 8007324:	f012 0301 	ands.w	r3, r2, #1
 8007328:	d00c      	beq.n	8007344 <__swsetup_r+0xbc>
 800732a:	2300      	movs	r3, #0
 800732c:	60a3      	str	r3, [r4, #8]
 800732e:	6963      	ldr	r3, [r4, #20]
 8007330:	425b      	negs	r3, r3
 8007332:	61a3      	str	r3, [r4, #24]
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	b953      	cbnz	r3, 800734e <__swsetup_r+0xc6>
 8007338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800733c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007340:	d1ba      	bne.n	80072b8 <__swsetup_r+0x30>
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	0792      	lsls	r2, r2, #30
 8007346:	bf58      	it	pl
 8007348:	6963      	ldrpl	r3, [r4, #20]
 800734a:	60a3      	str	r3, [r4, #8]
 800734c:	e7f2      	b.n	8007334 <__swsetup_r+0xac>
 800734e:	2000      	movs	r0, #0
 8007350:	e7f7      	b.n	8007342 <__swsetup_r+0xba>
 8007352:	bf00      	nop
 8007354:	2000000c 	.word	0x2000000c
 8007358:	08007c94 	.word	0x08007c94
 800735c:	08007cb4 	.word	0x08007cb4
 8007360:	08007c74 	.word	0x08007c74

08007364 <_close_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	4c06      	ldr	r4, [pc, #24]	; (8007380 <_close_r+0x1c>)
 8007368:	2300      	movs	r3, #0
 800736a:	4605      	mov	r5, r0
 800736c:	4608      	mov	r0, r1
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	f000 fa64 	bl	800783c <_close>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_close_r+0x1a>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	b103      	cbz	r3, 800737e <_close_r+0x1a>
 800737c:	602b      	str	r3, [r5, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	20000424 	.word	0x20000424

08007384 <__sflush_r>:
 8007384:	898a      	ldrh	r2, [r1, #12]
 8007386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800738a:	4605      	mov	r5, r0
 800738c:	0710      	lsls	r0, r2, #28
 800738e:	460c      	mov	r4, r1
 8007390:	d458      	bmi.n	8007444 <__sflush_r+0xc0>
 8007392:	684b      	ldr	r3, [r1, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	dc05      	bgt.n	80073a4 <__sflush_r+0x20>
 8007398:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800739a:	2b00      	cmp	r3, #0
 800739c:	dc02      	bgt.n	80073a4 <__sflush_r+0x20>
 800739e:	2000      	movs	r0, #0
 80073a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	d0f9      	beq.n	800739e <__sflush_r+0x1a>
 80073aa:	2300      	movs	r3, #0
 80073ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073b0:	682f      	ldr	r7, [r5, #0]
 80073b2:	6a21      	ldr	r1, [r4, #32]
 80073b4:	602b      	str	r3, [r5, #0]
 80073b6:	d032      	beq.n	800741e <__sflush_r+0x9a>
 80073b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	075a      	lsls	r2, r3, #29
 80073be:	d505      	bpl.n	80073cc <__sflush_r+0x48>
 80073c0:	6863      	ldr	r3, [r4, #4]
 80073c2:	1ac0      	subs	r0, r0, r3
 80073c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073c6:	b10b      	cbz	r3, 80073cc <__sflush_r+0x48>
 80073c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073ca:	1ac0      	subs	r0, r0, r3
 80073cc:	2300      	movs	r3, #0
 80073ce:	4602      	mov	r2, r0
 80073d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073d2:	6a21      	ldr	r1, [r4, #32]
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b0      	blx	r6
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	d106      	bne.n	80073ec <__sflush_r+0x68>
 80073de:	6829      	ldr	r1, [r5, #0]
 80073e0:	291d      	cmp	r1, #29
 80073e2:	d848      	bhi.n	8007476 <__sflush_r+0xf2>
 80073e4:	4a29      	ldr	r2, [pc, #164]	; (800748c <__sflush_r+0x108>)
 80073e6:	40ca      	lsrs	r2, r1
 80073e8:	07d6      	lsls	r6, r2, #31
 80073ea:	d544      	bpl.n	8007476 <__sflush_r+0xf2>
 80073ec:	2200      	movs	r2, #0
 80073ee:	6062      	str	r2, [r4, #4]
 80073f0:	04d9      	lsls	r1, r3, #19
 80073f2:	6922      	ldr	r2, [r4, #16]
 80073f4:	6022      	str	r2, [r4, #0]
 80073f6:	d504      	bpl.n	8007402 <__sflush_r+0x7e>
 80073f8:	1c42      	adds	r2, r0, #1
 80073fa:	d101      	bne.n	8007400 <__sflush_r+0x7c>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	b903      	cbnz	r3, 8007402 <__sflush_r+0x7e>
 8007400:	6560      	str	r0, [r4, #84]	; 0x54
 8007402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007404:	602f      	str	r7, [r5, #0]
 8007406:	2900      	cmp	r1, #0
 8007408:	d0c9      	beq.n	800739e <__sflush_r+0x1a>
 800740a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800740e:	4299      	cmp	r1, r3
 8007410:	d002      	beq.n	8007418 <__sflush_r+0x94>
 8007412:	4628      	mov	r0, r5
 8007414:	f7ff fc98 	bl	8006d48 <_free_r>
 8007418:	2000      	movs	r0, #0
 800741a:	6360      	str	r0, [r4, #52]	; 0x34
 800741c:	e7c0      	b.n	80073a0 <__sflush_r+0x1c>
 800741e:	2301      	movs	r3, #1
 8007420:	4628      	mov	r0, r5
 8007422:	47b0      	blx	r6
 8007424:	1c41      	adds	r1, r0, #1
 8007426:	d1c8      	bne.n	80073ba <__sflush_r+0x36>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0c5      	beq.n	80073ba <__sflush_r+0x36>
 800742e:	2b1d      	cmp	r3, #29
 8007430:	d001      	beq.n	8007436 <__sflush_r+0xb2>
 8007432:	2b16      	cmp	r3, #22
 8007434:	d101      	bne.n	800743a <__sflush_r+0xb6>
 8007436:	602f      	str	r7, [r5, #0]
 8007438:	e7b1      	b.n	800739e <__sflush_r+0x1a>
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007440:	81a3      	strh	r3, [r4, #12]
 8007442:	e7ad      	b.n	80073a0 <__sflush_r+0x1c>
 8007444:	690f      	ldr	r7, [r1, #16]
 8007446:	2f00      	cmp	r7, #0
 8007448:	d0a9      	beq.n	800739e <__sflush_r+0x1a>
 800744a:	0793      	lsls	r3, r2, #30
 800744c:	680e      	ldr	r6, [r1, #0]
 800744e:	bf08      	it	eq
 8007450:	694b      	ldreq	r3, [r1, #20]
 8007452:	600f      	str	r7, [r1, #0]
 8007454:	bf18      	it	ne
 8007456:	2300      	movne	r3, #0
 8007458:	eba6 0807 	sub.w	r8, r6, r7
 800745c:	608b      	str	r3, [r1, #8]
 800745e:	f1b8 0f00 	cmp.w	r8, #0
 8007462:	dd9c      	ble.n	800739e <__sflush_r+0x1a>
 8007464:	4643      	mov	r3, r8
 8007466:	463a      	mov	r2, r7
 8007468:	6a21      	ldr	r1, [r4, #32]
 800746a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800746c:	4628      	mov	r0, r5
 800746e:	47b0      	blx	r6
 8007470:	2800      	cmp	r0, #0
 8007472:	dc06      	bgt.n	8007482 <__sflush_r+0xfe>
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747a:	81a3      	strh	r3, [r4, #12]
 800747c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007480:	e78e      	b.n	80073a0 <__sflush_r+0x1c>
 8007482:	4407      	add	r7, r0
 8007484:	eba8 0800 	sub.w	r8, r8, r0
 8007488:	e7e9      	b.n	800745e <__sflush_r+0xda>
 800748a:	bf00      	nop
 800748c:	20400001 	.word	0x20400001

08007490 <_fflush_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	690b      	ldr	r3, [r1, #16]
 8007494:	4605      	mov	r5, r0
 8007496:	460c      	mov	r4, r1
 8007498:	b1db      	cbz	r3, 80074d2 <_fflush_r+0x42>
 800749a:	b118      	cbz	r0, 80074a4 <_fflush_r+0x14>
 800749c:	6983      	ldr	r3, [r0, #24]
 800749e:	b90b      	cbnz	r3, 80074a4 <_fflush_r+0x14>
 80074a0:	f7ff f8be 	bl	8006620 <__sinit>
 80074a4:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <_fflush_r+0x48>)
 80074a6:	429c      	cmp	r4, r3
 80074a8:	d109      	bne.n	80074be <_fflush_r+0x2e>
 80074aa:	686c      	ldr	r4, [r5, #4]
 80074ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b0:	b17b      	cbz	r3, 80074d2 <_fflush_r+0x42>
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ba:	f7ff bf63 	b.w	8007384 <__sflush_r>
 80074be:	4b07      	ldr	r3, [pc, #28]	; (80074dc <_fflush_r+0x4c>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	d101      	bne.n	80074c8 <_fflush_r+0x38>
 80074c4:	68ac      	ldr	r4, [r5, #8]
 80074c6:	e7f1      	b.n	80074ac <_fflush_r+0x1c>
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <_fflush_r+0x50>)
 80074ca:	429c      	cmp	r4, r3
 80074cc:	bf08      	it	eq
 80074ce:	68ec      	ldreq	r4, [r5, #12]
 80074d0:	e7ec      	b.n	80074ac <_fflush_r+0x1c>
 80074d2:	2000      	movs	r0, #0
 80074d4:	bd38      	pop	{r3, r4, r5, pc}
 80074d6:	bf00      	nop
 80074d8:	08007c94 	.word	0x08007c94
 80074dc:	08007cb4 	.word	0x08007cb4
 80074e0:	08007c74 	.word	0x08007c74

080074e4 <_lseek_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4c07      	ldr	r4, [pc, #28]	; (8007504 <_lseek_r+0x20>)
 80074e8:	4605      	mov	r5, r0
 80074ea:	4608      	mov	r0, r1
 80074ec:	4611      	mov	r1, r2
 80074ee:	2200      	movs	r2, #0
 80074f0:	6022      	str	r2, [r4, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f000 f961 	bl	80077ba <_lseek>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_lseek_r+0x1e>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_lseek_r+0x1e>
 8007500:	602b      	str	r3, [r5, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	20000424 	.word	0x20000424

08007508 <__swhatbuf_r>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	460e      	mov	r6, r1
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	2900      	cmp	r1, #0
 8007512:	b096      	sub	sp, #88	; 0x58
 8007514:	4614      	mov	r4, r2
 8007516:	461d      	mov	r5, r3
 8007518:	da07      	bge.n	800752a <__swhatbuf_r+0x22>
 800751a:	2300      	movs	r3, #0
 800751c:	602b      	str	r3, [r5, #0]
 800751e:	89b3      	ldrh	r3, [r6, #12]
 8007520:	061a      	lsls	r2, r3, #24
 8007522:	d410      	bmi.n	8007546 <__swhatbuf_r+0x3e>
 8007524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007528:	e00e      	b.n	8007548 <__swhatbuf_r+0x40>
 800752a:	466a      	mov	r2, sp
 800752c:	f000 f884 	bl	8007638 <_fstat_r>
 8007530:	2800      	cmp	r0, #0
 8007532:	dbf2      	blt.n	800751a <__swhatbuf_r+0x12>
 8007534:	9a01      	ldr	r2, [sp, #4]
 8007536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800753a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800753e:	425a      	negs	r2, r3
 8007540:	415a      	adcs	r2, r3
 8007542:	602a      	str	r2, [r5, #0]
 8007544:	e7ee      	b.n	8007524 <__swhatbuf_r+0x1c>
 8007546:	2340      	movs	r3, #64	; 0x40
 8007548:	2000      	movs	r0, #0
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	b016      	add	sp, #88	; 0x58
 800754e:	bd70      	pop	{r4, r5, r6, pc}

08007550 <__smakebuf_r>:
 8007550:	898b      	ldrh	r3, [r1, #12]
 8007552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007554:	079d      	lsls	r5, r3, #30
 8007556:	4606      	mov	r6, r0
 8007558:	460c      	mov	r4, r1
 800755a:	d507      	bpl.n	800756c <__smakebuf_r+0x1c>
 800755c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	6123      	str	r3, [r4, #16]
 8007564:	2301      	movs	r3, #1
 8007566:	6163      	str	r3, [r4, #20]
 8007568:	b002      	add	sp, #8
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	ab01      	add	r3, sp, #4
 800756e:	466a      	mov	r2, sp
 8007570:	f7ff ffca 	bl	8007508 <__swhatbuf_r>
 8007574:	9900      	ldr	r1, [sp, #0]
 8007576:	4605      	mov	r5, r0
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff fc33 	bl	8006de4 <_malloc_r>
 800757e:	b948      	cbnz	r0, 8007594 <__smakebuf_r+0x44>
 8007580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007584:	059a      	lsls	r2, r3, #22
 8007586:	d4ef      	bmi.n	8007568 <__smakebuf_r+0x18>
 8007588:	f023 0303 	bic.w	r3, r3, #3
 800758c:	f043 0302 	orr.w	r3, r3, #2
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	e7e3      	b.n	800755c <__smakebuf_r+0xc>
 8007594:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <__smakebuf_r+0x7c>)
 8007596:	62b3      	str	r3, [r6, #40]	; 0x28
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	6020      	str	r0, [r4, #0]
 800759c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a0:	81a3      	strh	r3, [r4, #12]
 80075a2:	9b00      	ldr	r3, [sp, #0]
 80075a4:	6163      	str	r3, [r4, #20]
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	6120      	str	r0, [r4, #16]
 80075aa:	b15b      	cbz	r3, 80075c4 <__smakebuf_r+0x74>
 80075ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075b0:	4630      	mov	r0, r6
 80075b2:	f000 f853 	bl	800765c <_isatty_r>
 80075b6:	b128      	cbz	r0, 80075c4 <__smakebuf_r+0x74>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	431d      	orrs	r5, r3
 80075c8:	81a5      	strh	r5, [r4, #12]
 80075ca:	e7cd      	b.n	8007568 <__smakebuf_r+0x18>
 80075cc:	080065e9 	.word	0x080065e9

080075d0 <__ascii_mbtowc>:
 80075d0:	b082      	sub	sp, #8
 80075d2:	b901      	cbnz	r1, 80075d6 <__ascii_mbtowc+0x6>
 80075d4:	a901      	add	r1, sp, #4
 80075d6:	b142      	cbz	r2, 80075ea <__ascii_mbtowc+0x1a>
 80075d8:	b14b      	cbz	r3, 80075ee <__ascii_mbtowc+0x1e>
 80075da:	7813      	ldrb	r3, [r2, #0]
 80075dc:	600b      	str	r3, [r1, #0]
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	1c10      	adds	r0, r2, #0
 80075e2:	bf18      	it	ne
 80075e4:	2001      	movne	r0, #1
 80075e6:	b002      	add	sp, #8
 80075e8:	4770      	bx	lr
 80075ea:	4610      	mov	r0, r2
 80075ec:	e7fb      	b.n	80075e6 <__ascii_mbtowc+0x16>
 80075ee:	f06f 0001 	mvn.w	r0, #1
 80075f2:	e7f8      	b.n	80075e6 <__ascii_mbtowc+0x16>

080075f4 <__malloc_lock>:
 80075f4:	4770      	bx	lr

080075f6 <__malloc_unlock>:
 80075f6:	4770      	bx	lr

080075f8 <_read_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4c07      	ldr	r4, [pc, #28]	; (8007618 <_read_r+0x20>)
 80075fc:	4605      	mov	r5, r0
 80075fe:	4608      	mov	r0, r1
 8007600:	4611      	mov	r1, r2
 8007602:	2200      	movs	r2, #0
 8007604:	6022      	str	r2, [r4, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	f000 f880 	bl	800770c <_read>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d102      	bne.n	8007616 <_read_r+0x1e>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	b103      	cbz	r3, 8007616 <_read_r+0x1e>
 8007614:	602b      	str	r3, [r5, #0]
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	20000424 	.word	0x20000424

0800761c <__ascii_wctomb>:
 800761c:	b149      	cbz	r1, 8007632 <__ascii_wctomb+0x16>
 800761e:	2aff      	cmp	r2, #255	; 0xff
 8007620:	bf85      	ittet	hi
 8007622:	238a      	movhi	r3, #138	; 0x8a
 8007624:	6003      	strhi	r3, [r0, #0]
 8007626:	700a      	strbls	r2, [r1, #0]
 8007628:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800762c:	bf98      	it	ls
 800762e:	2001      	movls	r0, #1
 8007630:	4770      	bx	lr
 8007632:	4608      	mov	r0, r1
 8007634:	4770      	bx	lr
	...

08007638 <_fstat_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4c07      	ldr	r4, [pc, #28]	; (8007658 <_fstat_r+0x20>)
 800763c:	2300      	movs	r3, #0
 800763e:	4605      	mov	r5, r0
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	f000 f940 	bl	80078ca <_fstat>
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	d102      	bne.n	8007654 <_fstat_r+0x1c>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	b103      	cbz	r3, 8007654 <_fstat_r+0x1c>
 8007652:	602b      	str	r3, [r5, #0]
 8007654:	bd38      	pop	{r3, r4, r5, pc}
 8007656:	bf00      	nop
 8007658:	20000424 	.word	0x20000424

0800765c <_isatty_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4c06      	ldr	r4, [pc, #24]	; (8007678 <_isatty_r+0x1c>)
 8007660:	2300      	movs	r3, #0
 8007662:	4605      	mov	r5, r0
 8007664:	4608      	mov	r0, r1
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	f000 fa94 	bl	8007b94 <_isatty>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_isatty_r+0x1a>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	b103      	cbz	r3, 8007676 <_isatty_r+0x1a>
 8007674:	602b      	str	r3, [r5, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	20000424 	.word	0x20000424

0800767c <findslot>:
 800767c:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <findslot+0x2c>)
 800767e:	b510      	push	{r4, lr}
 8007680:	4604      	mov	r4, r0
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	b118      	cbz	r0, 800768e <findslot+0x12>
 8007686:	6983      	ldr	r3, [r0, #24]
 8007688:	b90b      	cbnz	r3, 800768e <findslot+0x12>
 800768a:	f7fe ffc9 	bl	8006620 <__sinit>
 800768e:	2c13      	cmp	r4, #19
 8007690:	d807      	bhi.n	80076a2 <findslot+0x26>
 8007692:	4806      	ldr	r0, [pc, #24]	; (80076ac <findslot+0x30>)
 8007694:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8007698:	3301      	adds	r3, #1
 800769a:	d002      	beq.n	80076a2 <findslot+0x26>
 800769c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80076a0:	bd10      	pop	{r4, pc}
 80076a2:	2000      	movs	r0, #0
 80076a4:	e7fc      	b.n	80076a0 <findslot+0x24>
 80076a6:	bf00      	nop
 80076a8:	2000000c 	.word	0x2000000c
 80076ac:	2000021c 	.word	0x2000021c

080076b0 <checkerror>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	1c43      	adds	r3, r0, #1
 80076b4:	4605      	mov	r5, r0
 80076b6:	d109      	bne.n	80076cc <checkerror+0x1c>
 80076b8:	f7fd fc86 	bl	8004fc8 <__errno>
 80076bc:	2413      	movs	r4, #19
 80076be:	4606      	mov	r6, r0
 80076c0:	2700      	movs	r7, #0
 80076c2:	4620      	mov	r0, r4
 80076c4:	4639      	mov	r1, r7
 80076c6:	beab      	bkpt	0x00ab
 80076c8:	4604      	mov	r4, r0
 80076ca:	6034      	str	r4, [r6, #0]
 80076cc:	4628      	mov	r0, r5
 80076ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076d0 <error>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	4605      	mov	r5, r0
 80076d4:	f7fd fc78 	bl	8004fc8 <__errno>
 80076d8:	2413      	movs	r4, #19
 80076da:	4606      	mov	r6, r0
 80076dc:	2700      	movs	r7, #0
 80076de:	4620      	mov	r0, r4
 80076e0:	4639      	mov	r1, r7
 80076e2:	beab      	bkpt	0x00ab
 80076e4:	4604      	mov	r4, r0
 80076e6:	6034      	str	r4, [r6, #0]
 80076e8:	4628      	mov	r0, r5
 80076ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076ec <_swiread>:
 80076ec:	b530      	push	{r4, r5, lr}
 80076ee:	b085      	sub	sp, #20
 80076f0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80076f4:	9203      	str	r2, [sp, #12]
 80076f6:	2406      	movs	r4, #6
 80076f8:	ad01      	add	r5, sp, #4
 80076fa:	4620      	mov	r0, r4
 80076fc:	4629      	mov	r1, r5
 80076fe:	beab      	bkpt	0x00ab
 8007700:	4604      	mov	r4, r0
 8007702:	4620      	mov	r0, r4
 8007704:	f7ff ffd4 	bl	80076b0 <checkerror>
 8007708:	b005      	add	sp, #20
 800770a:	bd30      	pop	{r4, r5, pc}

0800770c <_read>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	460e      	mov	r6, r1
 8007710:	4615      	mov	r5, r2
 8007712:	f7ff ffb3 	bl	800767c <findslot>
 8007716:	4604      	mov	r4, r0
 8007718:	b930      	cbnz	r0, 8007728 <_read+0x1c>
 800771a:	f7fd fc55 	bl	8004fc8 <__errno>
 800771e:	2309      	movs	r3, #9
 8007720:	6003      	str	r3, [r0, #0]
 8007722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	462a      	mov	r2, r5
 800772a:	4631      	mov	r1, r6
 800772c:	6800      	ldr	r0, [r0, #0]
 800772e:	f7ff ffdd 	bl	80076ec <_swiread>
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	bf1f      	itttt	ne
 8007736:	6863      	ldrne	r3, [r4, #4]
 8007738:	1a28      	subne	r0, r5, r0
 800773a:	181b      	addne	r3, r3, r0
 800773c:	6063      	strne	r3, [r4, #4]
 800773e:	e7f2      	b.n	8007726 <_read+0x1a>

08007740 <_swilseek>:
 8007740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007742:	460c      	mov	r4, r1
 8007744:	4616      	mov	r6, r2
 8007746:	f7ff ff99 	bl	800767c <findslot>
 800774a:	4605      	mov	r5, r0
 800774c:	b940      	cbnz	r0, 8007760 <_swilseek+0x20>
 800774e:	f7fd fc3b 	bl	8004fc8 <__errno>
 8007752:	2309      	movs	r3, #9
 8007754:	6003      	str	r3, [r0, #0]
 8007756:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800775a:	4620      	mov	r0, r4
 800775c:	b003      	add	sp, #12
 800775e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007760:	2e02      	cmp	r6, #2
 8007762:	d903      	bls.n	800776c <_swilseek+0x2c>
 8007764:	f7fd fc30 	bl	8004fc8 <__errno>
 8007768:	2316      	movs	r3, #22
 800776a:	e7f3      	b.n	8007754 <_swilseek+0x14>
 800776c:	2e01      	cmp	r6, #1
 800776e:	d112      	bne.n	8007796 <_swilseek+0x56>
 8007770:	6843      	ldr	r3, [r0, #4]
 8007772:	18e4      	adds	r4, r4, r3
 8007774:	d4f6      	bmi.n	8007764 <_swilseek+0x24>
 8007776:	682b      	ldr	r3, [r5, #0]
 8007778:	260a      	movs	r6, #10
 800777a:	e9cd 3400 	strd	r3, r4, [sp]
 800777e:	466f      	mov	r7, sp
 8007780:	4630      	mov	r0, r6
 8007782:	4639      	mov	r1, r7
 8007784:	beab      	bkpt	0x00ab
 8007786:	4606      	mov	r6, r0
 8007788:	4630      	mov	r0, r6
 800778a:	f7ff ff91 	bl	80076b0 <checkerror>
 800778e:	2800      	cmp	r0, #0
 8007790:	dbe1      	blt.n	8007756 <_swilseek+0x16>
 8007792:	606c      	str	r4, [r5, #4]
 8007794:	e7e1      	b.n	800775a <_swilseek+0x1a>
 8007796:	2e02      	cmp	r6, #2
 8007798:	d1ed      	bne.n	8007776 <_swilseek+0x36>
 800779a:	af02      	add	r7, sp, #8
 800779c:	6803      	ldr	r3, [r0, #0]
 800779e:	f847 3d08 	str.w	r3, [r7, #-8]!
 80077a2:	260c      	movs	r6, #12
 80077a4:	4630      	mov	r0, r6
 80077a6:	4639      	mov	r1, r7
 80077a8:	beab      	bkpt	0x00ab
 80077aa:	4606      	mov	r6, r0
 80077ac:	4630      	mov	r0, r6
 80077ae:	f7ff ff7f 	bl	80076b0 <checkerror>
 80077b2:	1c43      	adds	r3, r0, #1
 80077b4:	d0cf      	beq.n	8007756 <_swilseek+0x16>
 80077b6:	4404      	add	r4, r0
 80077b8:	e7dd      	b.n	8007776 <_swilseek+0x36>

080077ba <_lseek>:
 80077ba:	f7ff bfc1 	b.w	8007740 <_swilseek>

080077be <_swiwrite>:
 80077be:	b530      	push	{r4, r5, lr}
 80077c0:	b085      	sub	sp, #20
 80077c2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80077c6:	9203      	str	r2, [sp, #12]
 80077c8:	2405      	movs	r4, #5
 80077ca:	ad01      	add	r5, sp, #4
 80077cc:	4620      	mov	r0, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	beab      	bkpt	0x00ab
 80077d2:	4604      	mov	r4, r0
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7ff ff6b 	bl	80076b0 <checkerror>
 80077da:	b005      	add	sp, #20
 80077dc:	bd30      	pop	{r4, r5, pc}

080077de <_write>:
 80077de:	b570      	push	{r4, r5, r6, lr}
 80077e0:	460e      	mov	r6, r1
 80077e2:	4615      	mov	r5, r2
 80077e4:	f7ff ff4a 	bl	800767c <findslot>
 80077e8:	4604      	mov	r4, r0
 80077ea:	b930      	cbnz	r0, 80077fa <_write+0x1c>
 80077ec:	f7fd fbec 	bl	8004fc8 <__errno>
 80077f0:	2309      	movs	r3, #9
 80077f2:	6003      	str	r3, [r0, #0]
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077f8:	bd70      	pop	{r4, r5, r6, pc}
 80077fa:	462a      	mov	r2, r5
 80077fc:	4631      	mov	r1, r6
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	f7ff ffdd 	bl	80077be <_swiwrite>
 8007804:	1e02      	subs	r2, r0, #0
 8007806:	dbf5      	blt.n	80077f4 <_write+0x16>
 8007808:	6863      	ldr	r3, [r4, #4]
 800780a:	1aa8      	subs	r0, r5, r2
 800780c:	4403      	add	r3, r0
 800780e:	42aa      	cmp	r2, r5
 8007810:	6063      	str	r3, [r4, #4]
 8007812:	d1f1      	bne.n	80077f8 <_write+0x1a>
 8007814:	2000      	movs	r0, #0
 8007816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800781a:	f7ff bf59 	b.w	80076d0 <error>

0800781e <_swiclose>:
 800781e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007820:	ad02      	add	r5, sp, #8
 8007822:	2402      	movs	r4, #2
 8007824:	f845 0d04 	str.w	r0, [r5, #-4]!
 8007828:	4620      	mov	r0, r4
 800782a:	4629      	mov	r1, r5
 800782c:	beab      	bkpt	0x00ab
 800782e:	4604      	mov	r4, r0
 8007830:	4620      	mov	r0, r4
 8007832:	f7ff ff3d 	bl	80076b0 <checkerror>
 8007836:	b003      	add	sp, #12
 8007838:	bd30      	pop	{r4, r5, pc}
	...

0800783c <_close>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4605      	mov	r5, r0
 8007840:	f7ff ff1c 	bl	800767c <findslot>
 8007844:	4604      	mov	r4, r0
 8007846:	b930      	cbnz	r0, 8007856 <_close+0x1a>
 8007848:	f7fd fbbe 	bl	8004fc8 <__errno>
 800784c:	2309      	movs	r3, #9
 800784e:	6003      	str	r3, [r0, #0]
 8007850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007854:	bd38      	pop	{r3, r4, r5, pc}
 8007856:	3d01      	subs	r5, #1
 8007858:	2d01      	cmp	r5, #1
 800785a:	d809      	bhi.n	8007870 <_close+0x34>
 800785c:	4b09      	ldr	r3, [pc, #36]	; (8007884 <_close+0x48>)
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	429a      	cmp	r2, r3
 8007864:	d104      	bne.n	8007870 <_close+0x34>
 8007866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800786a:	6003      	str	r3, [r0, #0]
 800786c:	2000      	movs	r0, #0
 800786e:	e7f1      	b.n	8007854 <_close+0x18>
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	f7ff ffd4 	bl	800781e <_swiclose>
 8007876:	2800      	cmp	r0, #0
 8007878:	d1ec      	bne.n	8007854 <_close+0x18>
 800787a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800787e:	6023      	str	r3, [r4, #0]
 8007880:	e7e8      	b.n	8007854 <_close+0x18>
 8007882:	bf00      	nop
 8007884:	2000021c 	.word	0x2000021c

08007888 <_swistat>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	460c      	mov	r4, r1
 800788c:	f7ff fef6 	bl	800767c <findslot>
 8007890:	4606      	mov	r6, r0
 8007892:	b930      	cbnz	r0, 80078a2 <_swistat+0x1a>
 8007894:	f7fd fb98 	bl	8004fc8 <__errno>
 8007898:	2309      	movs	r3, #9
 800789a:	6003      	str	r3, [r0, #0]
 800789c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078a0:	bd70      	pop	{r4, r5, r6, pc}
 80078a2:	6863      	ldr	r3, [r4, #4]
 80078a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078a8:	6063      	str	r3, [r4, #4]
 80078aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ae:	6463      	str	r3, [r4, #68]	; 0x44
 80078b0:	250c      	movs	r5, #12
 80078b2:	4628      	mov	r0, r5
 80078b4:	4631      	mov	r1, r6
 80078b6:	beab      	bkpt	0x00ab
 80078b8:	4605      	mov	r5, r0
 80078ba:	4628      	mov	r0, r5
 80078bc:	f7ff fef8 	bl	80076b0 <checkerror>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	bf1c      	itt	ne
 80078c4:	6120      	strne	r0, [r4, #16]
 80078c6:	2000      	movne	r0, #0
 80078c8:	e7ea      	b.n	80078a0 <_swistat+0x18>

080078ca <_fstat>:
 80078ca:	460b      	mov	r3, r1
 80078cc:	b510      	push	{r4, lr}
 80078ce:	2100      	movs	r1, #0
 80078d0:	4604      	mov	r4, r0
 80078d2:	2258      	movs	r2, #88	; 0x58
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fd fba1 	bl	800501c <memset>
 80078da:	4601      	mov	r1, r0
 80078dc:	4620      	mov	r0, r4
 80078de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e2:	f7ff bfd1 	b.w	8007888 <_swistat>

080078e6 <_stat>:
 80078e6:	b538      	push	{r3, r4, r5, lr}
 80078e8:	460d      	mov	r5, r1
 80078ea:	4604      	mov	r4, r0
 80078ec:	2258      	movs	r2, #88	; 0x58
 80078ee:	2100      	movs	r1, #0
 80078f0:	4628      	mov	r0, r5
 80078f2:	f7fd fb93 	bl	800501c <memset>
 80078f6:	4620      	mov	r0, r4
 80078f8:	2100      	movs	r1, #0
 80078fa:	f000 f811 	bl	8007920 <_swiopen>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	4604      	mov	r4, r0
 8007902:	d00b      	beq.n	800791c <_stat+0x36>
 8007904:	686b      	ldr	r3, [r5, #4]
 8007906:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800790a:	606b      	str	r3, [r5, #4]
 800790c:	4629      	mov	r1, r5
 800790e:	f7ff ffbb 	bl	8007888 <_swistat>
 8007912:	4605      	mov	r5, r0
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff ff91 	bl	800783c <_close>
 800791a:	462c      	mov	r4, r5
 800791c:	4620      	mov	r0, r4
 800791e:	bd38      	pop	{r3, r4, r5, pc}

08007920 <_swiopen>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	4b2b      	ldr	r3, [pc, #172]	; (80079d4 <_swiopen+0xb4>)
 8007926:	b096      	sub	sp, #88	; 0x58
 8007928:	4682      	mov	sl, r0
 800792a:	460e      	mov	r6, r1
 800792c:	2500      	movs	r5, #0
 800792e:	4698      	mov	r8, r3
 8007930:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8007934:	1c61      	adds	r1, r4, #1
 8007936:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 800793a:	d036      	beq.n	80079aa <_swiopen+0x8a>
 800793c:	3501      	adds	r5, #1
 800793e:	2d14      	cmp	r5, #20
 8007940:	d1f6      	bne.n	8007930 <_swiopen+0x10>
 8007942:	f7fd fb41 	bl	8004fc8 <__errno>
 8007946:	2318      	movs	r3, #24
 8007948:	6003      	str	r3, [r0, #0]
 800794a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800794e:	e03c      	b.n	80079ca <_swiopen+0xaa>
 8007950:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8007954:	f240 6301 	movw	r3, #1537	; 0x601
 8007958:	07b2      	lsls	r2, r6, #30
 800795a:	bf48      	it	mi
 800795c:	f044 0402 	orrmi.w	r4, r4, #2
 8007960:	421e      	tst	r6, r3
 8007962:	bf18      	it	ne
 8007964:	f044 0404 	orrne.w	r4, r4, #4
 8007968:	0733      	lsls	r3, r6, #28
 800796a:	bf48      	it	mi
 800796c:	f024 0404 	bicmi.w	r4, r4, #4
 8007970:	4650      	mov	r0, sl
 8007972:	bf48      	it	mi
 8007974:	f044 0408 	orrmi.w	r4, r4, #8
 8007978:	f8cd a000 	str.w	sl, [sp]
 800797c:	f7f8 fc28 	bl	80001d0 <strlen>
 8007980:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8007984:	2401      	movs	r4, #1
 8007986:	4620      	mov	r0, r4
 8007988:	4649      	mov	r1, r9
 800798a:	beab      	bkpt	0x00ab
 800798c:	4604      	mov	r4, r0
 800798e:	2c00      	cmp	r4, #0
 8007990:	db06      	blt.n	80079a0 <_swiopen+0x80>
 8007992:	4447      	add	r7, r8
 8007994:	2300      	movs	r3, #0
 8007996:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800799a:	607b      	str	r3, [r7, #4]
 800799c:	462c      	mov	r4, r5
 800799e:	e014      	b.n	80079ca <_swiopen+0xaa>
 80079a0:	4620      	mov	r0, r4
 80079a2:	f7ff fe95 	bl	80076d0 <error>
 80079a6:	4604      	mov	r4, r0
 80079a8:	e00f      	b.n	80079ca <_swiopen+0xaa>
 80079aa:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80079ae:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80079b2:	46e9      	mov	r9, sp
 80079b4:	d1cc      	bne.n	8007950 <_swiopen+0x30>
 80079b6:	4649      	mov	r1, r9
 80079b8:	4650      	mov	r0, sl
 80079ba:	f7ff ff94 	bl	80078e6 <_stat>
 80079be:	3001      	adds	r0, #1
 80079c0:	d0c6      	beq.n	8007950 <_swiopen+0x30>
 80079c2:	f7fd fb01 	bl	8004fc8 <__errno>
 80079c6:	2311      	movs	r3, #17
 80079c8:	6003      	str	r3, [r0, #0]
 80079ca:	4620      	mov	r0, r4
 80079cc:	b016      	add	sp, #88	; 0x58
 80079ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d2:	bf00      	nop
 80079d4:	2000021c 	.word	0x2000021c

080079d8 <_get_semihosting_exts>:
 80079d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	4607      	mov	r7, r0
 80079de:	4688      	mov	r8, r1
 80079e0:	4829      	ldr	r0, [pc, #164]	; (8007a88 <_get_semihosting_exts+0xb0>)
 80079e2:	2100      	movs	r1, #0
 80079e4:	4615      	mov	r5, r2
 80079e6:	f7ff ff9b 	bl	8007920 <_swiopen>
 80079ea:	462a      	mov	r2, r5
 80079ec:	4604      	mov	r4, r0
 80079ee:	2100      	movs	r1, #0
 80079f0:	4638      	mov	r0, r7
 80079f2:	f7fd fb13 	bl	800501c <memset>
 80079f6:	1c63      	adds	r3, r4, #1
 80079f8:	d015      	beq.n	8007a26 <_get_semihosting_exts+0x4e>
 80079fa:	4620      	mov	r0, r4
 80079fc:	f7ff fe3e 	bl	800767c <findslot>
 8007a00:	260c      	movs	r6, #12
 8007a02:	4681      	mov	r9, r0
 8007a04:	4630      	mov	r0, r6
 8007a06:	4649      	mov	r1, r9
 8007a08:	beab      	bkpt	0x00ab
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7ff fe4f 	bl	80076b0 <checkerror>
 8007a12:	2803      	cmp	r0, #3
 8007a14:	dd02      	ble.n	8007a1c <_get_semihosting_exts+0x44>
 8007a16:	3803      	subs	r0, #3
 8007a18:	42a8      	cmp	r0, r5
 8007a1a:	dc08      	bgt.n	8007a2e <_get_semihosting_exts+0x56>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f7ff ff0d 	bl	800783c <_close>
 8007a22:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a26:	4620      	mov	r0, r4
 8007a28:	b003      	add	sp, #12
 8007a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a2e:	2204      	movs	r2, #4
 8007a30:	eb0d 0102 	add.w	r1, sp, r2
 8007a34:	4620      	mov	r0, r4
 8007a36:	f7ff fe69 	bl	800770c <_read>
 8007a3a:	2803      	cmp	r0, #3
 8007a3c:	ddee      	ble.n	8007a1c <_get_semihosting_exts+0x44>
 8007a3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007a42:	2b53      	cmp	r3, #83	; 0x53
 8007a44:	d1ea      	bne.n	8007a1c <_get_semihosting_exts+0x44>
 8007a46:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007a4a:	2b48      	cmp	r3, #72	; 0x48
 8007a4c:	d1e6      	bne.n	8007a1c <_get_semihosting_exts+0x44>
 8007a4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007a52:	2b46      	cmp	r3, #70	; 0x46
 8007a54:	d1e2      	bne.n	8007a1c <_get_semihosting_exts+0x44>
 8007a56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007a5a:	2b42      	cmp	r3, #66	; 0x42
 8007a5c:	d1de      	bne.n	8007a1c <_get_semihosting_exts+0x44>
 8007a5e:	2201      	movs	r2, #1
 8007a60:	4641      	mov	r1, r8
 8007a62:	4620      	mov	r0, r4
 8007a64:	f7ff fe6c 	bl	8007740 <_swilseek>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	dbd7      	blt.n	8007a1c <_get_semihosting_exts+0x44>
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	4639      	mov	r1, r7
 8007a70:	4620      	mov	r0, r4
 8007a72:	f7ff fe4b 	bl	800770c <_read>
 8007a76:	4605      	mov	r5, r0
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f7ff fedf 	bl	800783c <_close>
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f7ff fe16 	bl	80076b0 <checkerror>
 8007a84:	4604      	mov	r4, r0
 8007a86:	e7ce      	b.n	8007a26 <_get_semihosting_exts+0x4e>
 8007a88:	08007ef0 	.word	0x08007ef0

08007a8c <initialise_semihosting_exts>:
 8007a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a8e:	4d0a      	ldr	r5, [pc, #40]	; (8007ab8 <initialise_semihosting_exts+0x2c>)
 8007a90:	4c0a      	ldr	r4, [pc, #40]	; (8007abc <initialise_semihosting_exts+0x30>)
 8007a92:	2100      	movs	r1, #0
 8007a94:	2201      	movs	r2, #1
 8007a96:	a801      	add	r0, sp, #4
 8007a98:	6029      	str	r1, [r5, #0]
 8007a9a:	6022      	str	r2, [r4, #0]
 8007a9c:	f7ff ff9c 	bl	80079d8 <_get_semihosting_exts>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	dd07      	ble.n	8007ab4 <initialise_semihosting_exts+0x28>
 8007aa4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007aa8:	f003 0201 	and.w	r2, r3, #1
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	602a      	str	r2, [r5, #0]
 8007ab2:	6023      	str	r3, [r4, #0]
 8007ab4:	b003      	add	sp, #12
 8007ab6:	bd30      	pop	{r4, r5, pc}
 8007ab8:	200001dc 	.word	0x200001dc
 8007abc:	200001e0 	.word	0x200001e0

08007ac0 <_has_ext_stdout_stderr>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	4c04      	ldr	r4, [pc, #16]	; (8007ad4 <_has_ext_stdout_stderr+0x14>)
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	da01      	bge.n	8007ace <_has_ext_stdout_stderr+0xe>
 8007aca:	f7ff ffdf 	bl	8007a8c <initialise_semihosting_exts>
 8007ace:	6820      	ldr	r0, [r4, #0]
 8007ad0:	bd10      	pop	{r4, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200001e0 	.word	0x200001e0

08007ad8 <initialise_monitor_handles>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	b085      	sub	sp, #20
 8007ade:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007b90 <initialise_monitor_handles+0xb8>
 8007ae2:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	2400      	movs	r4, #0
 8007aea:	9303      	str	r3, [sp, #12]
 8007aec:	f10d 0804 	add.w	r8, sp, #4
 8007af0:	9402      	str	r4, [sp, #8]
 8007af2:	2501      	movs	r5, #1
 8007af4:	4628      	mov	r0, r5
 8007af6:	4641      	mov	r1, r8
 8007af8:	beab      	bkpt	0x00ab
 8007afa:	4605      	mov	r5, r0
 8007afc:	4e20      	ldr	r6, [pc, #128]	; (8007b80 <initialise_monitor_handles+0xa8>)
 8007afe:	4a21      	ldr	r2, [pc, #132]	; (8007b84 <initialise_monitor_handles+0xac>)
 8007b00:	6035      	str	r5, [r6, #0]
 8007b02:	4623      	mov	r3, r4
 8007b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b08:	4614      	mov	r4, r2
 8007b0a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	2b14      	cmp	r3, #20
 8007b12:	d1fa      	bne.n	8007b0a <initialise_monitor_handles+0x32>
 8007b14:	f7ff ffd4 	bl	8007ac0 <_has_ext_stdout_stderr>
 8007b18:	4d1b      	ldr	r5, [pc, #108]	; (8007b88 <initialise_monitor_handles+0xb0>)
 8007b1a:	b1d0      	cbz	r0, 8007b52 <initialise_monitor_handles+0x7a>
 8007b1c:	f04f 0a03 	mov.w	sl, #3
 8007b20:	2304      	movs	r3, #4
 8007b22:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b26:	2701      	movs	r7, #1
 8007b28:	f8cd a00c 	str.w	sl, [sp, #12]
 8007b2c:	9302      	str	r3, [sp, #8]
 8007b2e:	4638      	mov	r0, r7
 8007b30:	4641      	mov	r1, r8
 8007b32:	beab      	bkpt	0x00ab
 8007b34:	4683      	mov	fp, r0
 8007b36:	4b15      	ldr	r3, [pc, #84]	; (8007b8c <initialise_monitor_handles+0xb4>)
 8007b38:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b3c:	f8c3 b000 	str.w	fp, [r3]
 8007b40:	2308      	movs	r3, #8
 8007b42:	f8cd a00c 	str.w	sl, [sp, #12]
 8007b46:	9302      	str	r3, [sp, #8]
 8007b48:	4638      	mov	r0, r7
 8007b4a:	4641      	mov	r1, r8
 8007b4c:	beab      	bkpt	0x00ab
 8007b4e:	4607      	mov	r7, r0
 8007b50:	602f      	str	r7, [r5, #0]
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	bf02      	ittt	eq
 8007b58:	4b0c      	ldreq	r3, [pc, #48]	; (8007b8c <initialise_monitor_handles+0xb4>)
 8007b5a:	681b      	ldreq	r3, [r3, #0]
 8007b5c:	602b      	streq	r3, [r5, #0]
 8007b5e:	6833      	ldr	r3, [r6, #0]
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	2600      	movs	r6, #0
 8007b64:	6066      	str	r6, [r4, #4]
 8007b66:	f7ff ffab 	bl	8007ac0 <_has_ext_stdout_stderr>
 8007b6a:	b130      	cbz	r0, 8007b7a <initialise_monitor_handles+0xa2>
 8007b6c:	4b07      	ldr	r3, [pc, #28]	; (8007b8c <initialise_monitor_handles+0xb4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007b7a:	b005      	add	sp, #20
 8007b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b80:	20000214 	.word	0x20000214
 8007b84:	2000021c 	.word	0x2000021c
 8007b88:	20000210 	.word	0x20000210
 8007b8c:	20000218 	.word	0x20000218
 8007b90:	08007f06 	.word	0x08007f06

08007b94 <_isatty>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	f7ff fd71 	bl	800767c <findslot>
 8007b9a:	2509      	movs	r5, #9
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	b920      	cbnz	r0, 8007baa <_isatty+0x16>
 8007ba0:	f7fd fa12 	bl	8004fc8 <__errno>
 8007ba4:	6005      	str	r5, [r0, #0]
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	bd70      	pop	{r4, r5, r6, pc}
 8007baa:	4628      	mov	r0, r5
 8007bac:	4621      	mov	r1, r4
 8007bae:	beab      	bkpt	0x00ab
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	2c01      	cmp	r4, #1
 8007bb4:	d0f7      	beq.n	8007ba6 <_isatty+0x12>
 8007bb6:	f7fd fa07 	bl	8004fc8 <__errno>
 8007bba:	2400      	movs	r4, #0
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	2513      	movs	r5, #19
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	beab      	bkpt	0x00ab
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	6035      	str	r5, [r6, #0]
 8007bca:	e7ec      	b.n	8007ba6 <_isatty+0x12>

08007bcc <_init>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	bf00      	nop
 8007bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd2:	bc08      	pop	{r3}
 8007bd4:	469e      	mov	lr, r3
 8007bd6:	4770      	bx	lr

08007bd8 <_fini>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr
