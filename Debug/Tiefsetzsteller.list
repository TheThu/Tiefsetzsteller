
Tiefsetzsteller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba4  08003ba4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ba4  08003ba4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ba4  08003ba4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08003bb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003bb8  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a714  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016fc  00000000  00000000  0002a750  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  0002be50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  0002c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017055  00000000  00000000  0002d468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000881f  00000000  00000000  000444bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000869be  00000000  00000000  0004ccdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d369a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000311c  00000000  00000000  000d3718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b54 	.word	0x08003b54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b54 	.word	0x08003b54

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a8:	f000 fa94 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f80e 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f000 f936 	bl	8000c20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009b4:	f000 f904 	bl	8000bc0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80009b8:	f000 f85e 	bl	8000a78 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80009bc:	2100      	movs	r1, #0
 80009be:	4802      	ldr	r0, [pc, #8]	; (80009c8 <main+0x24>)
 80009c0:	f001 ffd6 	bl	8002970 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <main+0x20>
 80009c6:	bf00      	nop
 80009c8:	20000028 	.word	0x20000028

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	; 0x58
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d6:	2228      	movs	r2, #40	; 0x28
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 f8b2 	bl	8003b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
 80009fe:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a00:	2302      	movs	r3, #2
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	2310      	movs	r3, #16
 8000a0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fd1b 	bl	8001450 <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a20:	f000 f922 	bl	8000c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fc0e 	bl	8002260 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a4a:	f000 f90d 	bl	8000c68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fe36 	bl	80026cc <HAL_RCCEx_PeriphCLKConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a66:	f000 f8ff 	bl	8000c68 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3758      	adds	r7, #88	; 0x58
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	0000      	movs	r0, r0
 8000a74:	0000      	movs	r0, r0
	...

08000a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b097      	sub	sp, #92	; 0x5c
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	222c      	movs	r2, #44	; 0x2c
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 f84d 	bl	8003b44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aaa:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000aac:	4a43      	ldr	r2, [pc, #268]	; (8000bbc <MX_TIM1_Init+0x144>)
 8000aae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8000ab0:	4b41      	ldr	r3, [pc, #260]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7;
 8000abc:	4b3e      	ldr	r3, [pc, #248]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000abe:	2207      	movs	r2, #7
 8000ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac2:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac8:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad4:	4838      	ldr	r0, [pc, #224]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000ad6:	f001 ff1f 	bl	8002918 <HAL_TIM_PWM_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ae0:	f000 f8c2 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000af4:	4619      	mov	r1, r3
 8000af6:	4830      	ldr	r0, [pc, #192]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000af8:	f002 fbe8 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000b02:	f000 f8b1 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b06:	2360      	movs	r3, #96	; 0x60
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = htim1.Init.Period*0.2;
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fc9c 	bl	800044c <__aeabi_ui2d>
 8000b14:	a326      	add	r3, pc, #152	; (adr r3, 8000bb0 <MX_TIM1_Init+0x138>)
 8000b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1a:	f7ff fd11 	bl	8000540 <__aeabi_dmul>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	460c      	mov	r4, r1
 8000b22:	4618      	mov	r0, r3
 8000b24:	4621      	mov	r1, r4
 8000b26:	f7ff ff1d 	bl	8000964 <__aeabi_d2uiz>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000b4c:	f001 ff62 	bl	8002a14 <HAL_TIM_PWM_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8000b56:	f000 f887 	bl	8000c68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000b90:	f002 fc0a 	bl	80033a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000b9a:	f000 f865 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <MX_TIM1_Init+0x140>)
 8000ba0:	f000 f8ae 	bl	8000d00 <HAL_TIM_MspPostInit>

}
 8000ba4:	bf00      	nop
 8000ba6:	375c      	adds	r7, #92	; 0x5c
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	f3af 8000 	nop.w
 8000bb0:	9999999a 	.word	0x9999999a
 8000bb4:	3fc99999 	.word	0x3fc99999
 8000bb8:	20000028 	.word	0x20000028
 8000bbc:	40012c00 	.word	0x40012c00

08000bc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <MX_USART2_UART_Init+0x5c>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bcc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000c04:	f002 fc48 	bl	8003498 <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c0e:	f000 f82b 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000068 	.word	0x20000068
 8000c1c:	40004400 	.word	0x40004400

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_GPIO_Init+0x44>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <MX_GPIO_Init+0x44>)
 8000c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_GPIO_Init+0x44>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_GPIO_Init+0x44>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <MX_GPIO_Init+0x44>)
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	6153      	str	r3, [r2, #20]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_GPIO_Init+0x44>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_MspInit+0x44>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_MspInit+0x44>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6193      	str	r3, [r2, #24]
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_MspInit+0x44>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x44>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x44>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	61d3      	str	r3, [r2, #28]
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x44>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x38>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10b      	bne.n	8000cea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_TIM_PWM_MspInit+0x3c>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <HAL_TIM_PWM_MspInit+0x3c>)
 8000cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cdc:	6193      	str	r3, [r2, #24]
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <HAL_TIM_PWM_MspInit+0x3c>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40012c00 	.word	0x40012c00
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <HAL_TIM_MspPostInit+0x68>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d11d      	bne.n	8000d5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_TIM_MspPostInit+0x6c>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_TIM_MspPostInit+0x6c>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d4c:	2306      	movs	r3, #6
 8000d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f000 fa07 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40012c00 	.word	0x40012c00
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <HAL_UART_MspInit+0x80>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d129      	bne.n	8000de6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_UART_MspInit+0x84>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0x84>)
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_UART_MspInit+0x84>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_UART_MspInit+0x84>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0x84>)
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_UART_MspInit+0x84>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000dc2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f000 f9c3 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40004400 	.word	0x40004400
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4c:	f000 f888 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <SystemInit+0x28>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <SystemInit+0x28>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SystemInit+0x28>)
 8000e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e86:	e003      	b.n	8000e90 <LoopCopyDataInit>

08000e88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e8e:	3104      	adds	r1, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e98:	d3f6      	bcc.n	8000e88 <CopyDataInit>
	ldr	r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e9c:	e002      	b.n	8000ea4 <LoopFillZerobss>

08000e9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ea0:	f842 3b04 	str.w	r3, [r2], #4

08000ea4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <LoopForever+0x16>)
	cmp	r2, r3
 8000ea6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ea8:	d3f9      	bcc.n	8000e9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eaa:	f7ff ffd3 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f002 fe25 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb2:	f7ff fd77 	bl	80009a4 <main>

08000eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eb8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000ebc:	08003bac 	.word	0x08003bac
	ldr	r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ec4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ec8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ecc:	200000ec 	.word	0x200000ec

08000ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_2_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_Init+0x28>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_Init+0x28>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f90d 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fec2 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f917 	bl	8001152 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f3c:	f000 f8ed 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200000e8 	.word	0x200000e8

08000f88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200000e8 	.word	0x200000e8

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff47 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff5c 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff8e 	bl	8001058 <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffb0 	bl	80010c0 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e14e      	b.n	800141a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8140 	beq.w	8001414 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d00b      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d007      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a8:	2b11      	cmp	r3, #17
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b12      	cmp	r3, #18
 80011b2:	d130      	bne.n	8001216 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 0201 	and.w	r2, r3, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0xea>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b12      	cmp	r3, #18
 8001254:	d123      	bne.n	800129e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	6939      	ldr	r1, [r7, #16]
 800129a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0203 	and.w	r2, r3, #3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 809a 	beq.w	8001414 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e0:	4b55      	ldr	r3, [pc, #340]	; (8001438 <HAL_GPIO_Init+0x2cc>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a54      	ldr	r2, [pc, #336]	; (8001438 <HAL_GPIO_Init+0x2cc>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b52      	ldr	r3, [pc, #328]	; (8001438 <HAL_GPIO_Init+0x2cc>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f8:	4a50      	ldr	r2, [pc, #320]	; (800143c <HAL_GPIO_Init+0x2d0>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001322:	d013      	beq.n	800134c <HAL_GPIO_Init+0x1e0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a46      	ldr	r2, [pc, #280]	; (8001440 <HAL_GPIO_Init+0x2d4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00d      	beq.n	8001348 <HAL_GPIO_Init+0x1dc>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a45      	ldr	r2, [pc, #276]	; (8001444 <HAL_GPIO_Init+0x2d8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x1d8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a44      	ldr	r2, [pc, #272]	; (8001448 <HAL_GPIO_Init+0x2dc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_GPIO_Init+0x1d4>
 800133c:	2303      	movs	r3, #3
 800133e:	e006      	b.n	800134e <HAL_GPIO_Init+0x1e2>
 8001340:	2305      	movs	r3, #5
 8001342:	e004      	b.n	800134e <HAL_GPIO_Init+0x1e2>
 8001344:	2302      	movs	r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x1e2>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_GPIO_Init+0x1e2>
 800134c:	2300      	movs	r3, #0
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	f002 0203 	and.w	r2, r2, #3
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	4093      	lsls	r3, r2
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800135e:	4937      	ldr	r1, [pc, #220]	; (800143c <HAL_GPIO_Init+0x2d0>)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <HAL_GPIO_Init+0x2e0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001390:	4a2e      	ldr	r2, [pc, #184]	; (800144c <HAL_GPIO_Init+0x2e0>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_GPIO_Init+0x2e0>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013ba:	4a24      	ldr	r2, [pc, #144]	; (800144c <HAL_GPIO_Init+0x2e0>)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <HAL_GPIO_Init+0x2e0>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013e4:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_GPIO_Init+0x2e0>)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_GPIO_Init+0x2e0>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_GPIO_Init+0x2e0>)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	f47f aea9 	bne.w	800117c <HAL_GPIO_Init+0x10>
  }
}
 800142a:	bf00      	nop
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	48000400 	.word	0x48000400
 8001444:	48000800 	.word	0x48000800
 8001448:	48000c00 	.word	0x48000c00
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001456:	af00      	add	r7, sp, #0
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	f000 bef4 	b.w	8002252 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 816a 	beq.w	800174e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800147a:	4bb3      	ldr	r3, [pc, #716]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b04      	cmp	r3, #4
 8001484:	d00c      	beq.n	80014a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001486:	4bb0      	ldr	r3, [pc, #704]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d159      	bne.n	8001546 <HAL_RCC_OscConfig+0xf6>
 8001492:	4bad      	ldr	r3, [pc, #692]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149e:	d152      	bne.n	8001546 <HAL_RCC_OscConfig+0xf6>
 80014a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014ac:	fa93 f3a3 	rbit	r3, r3
 80014b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	fab3 f383 	clz	r3, r3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <HAL_RCC_OscConfig+0x82>
 80014cc:	4b9e      	ldr	r3, [pc, #632]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0xae>
 80014d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80014fa:	4b93      	ldr	r3, [pc, #588]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001502:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001506:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800150a:	fa92 f2a2 	rbit	r2, r2
 800150e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001512:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001516:	fab2 f282 	clz	r2, r2
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f042 0220 	orr.w	r2, r2, #32
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	f002 021f 	and.w	r2, r2, #31
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 810c 	beq.w	800174c <HAL_RCC_OscConfig+0x2fc>
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 8106 	bne.w	800174c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	f000 be86 	b.w	8002252 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001550:	d106      	bne.n	8001560 <HAL_RCC_OscConfig+0x110>
 8001552:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a7c      	ldr	r2, [pc, #496]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e030      	b.n	80015c2 <HAL_RCC_OscConfig+0x172>
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x134>
 800156a:	4b77      	ldr	r3, [pc, #476]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a76      	ldr	r2, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b74      	ldr	r3, [pc, #464]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a73      	ldr	r2, [pc, #460]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 800157c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e01e      	b.n	80015c2 <HAL_RCC_OscConfig+0x172>
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158e:	d10c      	bne.n	80015aa <HAL_RCC_OscConfig+0x15a>
 8001590:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a6c      	ldr	r2, [pc, #432]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 8001596:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a69      	ldr	r2, [pc, #420]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e00b      	b.n	80015c2 <HAL_RCC_OscConfig+0x172>
 80015aa:	4b67      	ldr	r3, [pc, #412]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a66      	ldr	r2, [pc, #408]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 80015b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b64      	ldr	r3, [pc, #400]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a63      	ldr	r2, [pc, #396]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 80015bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015c2:	4b61      	ldr	r3, [pc, #388]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	f023 020f 	bic.w	r2, r3, #15
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	495d      	ldr	r1, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d059      	beq.n	8001694 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fcd2 	bl	8000f88 <HAL_GetTick>
 80015e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ea:	f7ff fccd 	bl	8000f88 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d902      	bls.n	8001600 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	f000 be29 	b.w	8002252 <HAL_RCC_OscConfig+0xe02>
 8001600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001604:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001614:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <HAL_RCC_OscConfig+0x1e2>
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	e015      	b.n	800165e <HAL_RCC_OscConfig+0x20e>
 8001632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001636:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800164e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001662:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001666:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800166a:	fa92 f2a2 	rbit	r2, r2
 800166e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001672:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001676:	fab2 f282 	clz	r2, r2
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f042 0220 	orr.w	r2, r2, #32
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	f002 021f 	and.w	r2, r2, #31
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0ab      	beq.n	80015ea <HAL_RCC_OscConfig+0x19a>
 8001692:	e05c      	b.n	800174e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fc78 	bl	8000f88 <HAL_GetTick>
 8001698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169e:	f7ff fc73 	bl	8000f88 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d902      	bls.n	80016b4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	f000 bdcf 	b.w	8002252 <HAL_RCC_OscConfig+0xe02>
 80016b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d102      	bne.n	80016e6 <HAL_RCC_OscConfig+0x296>
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	e015      	b.n	8001712 <HAL_RCC_OscConfig+0x2c2>
 80016e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001702:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_RCC_OscConfig+0x2f8>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001716:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800171a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800171e:	fa92 f2a2 	rbit	r2, r2
 8001722:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001726:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800172a:	fab2 f282 	clz	r2, r2
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	f042 0220 	orr.w	r2, r2, #32
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	f002 021f 	and.w	r2, r2, #31
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ab      	bne.n	800169e <HAL_RCC_OscConfig+0x24e>
 8001746:	e002      	b.n	800174e <HAL_RCC_OscConfig+0x2fe>
 8001748:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 816f 	beq.w	8001a3c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800175e:	4bd0      	ldr	r3, [pc, #832]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800176a:	4bcd      	ldr	r3, [pc, #820]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b08      	cmp	r3, #8
 8001774:	d16c      	bne.n	8001850 <HAL_RCC_OscConfig+0x400>
 8001776:	4bca      	ldr	r3, [pc, #808]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d166      	bne.n	8001850 <HAL_RCC_OscConfig+0x400>
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001794:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d102      	bne.n	80017b2 <HAL_RCC_OscConfig+0x362>
 80017ac:	4bbc      	ldr	r3, [pc, #752]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	e013      	b.n	80017da <HAL_RCC_OscConfig+0x38a>
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80017d6:	4bb2      	ldr	r3, [pc, #712]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2202      	movs	r2, #2
 80017dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80017e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017e4:	fa92 f2a2 	rbit	r2, r2
 80017e8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80017ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f042 0220 	orr.w	r2, r2, #32
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_RCC_OscConfig+0x3cc>
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d002      	beq.n	800181c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f000 bd1b 	b.w	8002252 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4ba0      	ldr	r3, [pc, #640]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	21f8      	movs	r1, #248	; 0xf8
 800182c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001834:	fa91 f1a1 	rbit	r1, r1
 8001838:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800183c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001840:	fab1 f181 	clz	r1, r1
 8001844:	b2c9      	uxtb	r1, r1
 8001846:	408b      	lsls	r3, r1
 8001848:	4995      	ldr	r1, [pc, #596]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184e:	e0f5      	b.n	8001a3c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8085 	beq.w	8001966 <HAL_RCC_OscConfig+0x516>
 800185c:	2301      	movs	r3, #1
 800185e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800186e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800187c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	461a      	mov	r2, r3
 8001884:	2301      	movs	r3, #1
 8001886:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fb7e 	bl	8000f88 <HAL_GetTick>
 800188c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fb79 	bl	8000f88 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d902      	bls.n	80018a8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	f000 bcd5 	b.w	8002252 <HAL_RCC_OscConfig+0xe02>
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80018ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <HAL_RCC_OscConfig+0x488>
 80018d2:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	e013      	b.n	8001900 <HAL_RCC_OscConfig+0x4b0>
 80018d8:	2302      	movs	r3, #2
 80018da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018ea:	2302      	movs	r3, #2
 80018ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	2202      	movs	r2, #2
 8001902:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001906:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800190a:	fa92 f2a2 	rbit	r2, r2
 800190e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001912:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	f042 0220 	orr.w	r2, r2, #32
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	f002 021f 	and.w	r2, r2, #31
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0af      	beq.n	8001892 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b5b      	ldr	r3, [pc, #364]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	21f8      	movs	r1, #248	; 0xf8
 8001942:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800194a:	fa91 f1a1 	rbit	r1, r1
 800194e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001952:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001956:	fab1 f181 	clz	r1, r1
 800195a:	b2c9      	uxtb	r1, r1
 800195c:	408b      	lsls	r3, r1
 800195e:	4950      	ldr	r1, [pc, #320]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
 8001964:	e06a      	b.n	8001a3c <HAL_RCC_OscConfig+0x5ec>
 8001966:	2301      	movs	r3, #1
 8001968:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001978:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001986:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	461a      	mov	r2, r3
 800198e:	2300      	movs	r3, #0
 8001990:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff faf9 	bl	8000f88 <HAL_GetTick>
 8001996:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff faf4 	bl	8000f88 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d902      	bls.n	80019b2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	f000 bc50 	b.w	8002252 <HAL_RCC_OscConfig+0xe02>
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80019c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d102      	bne.n	80019e2 <HAL_RCC_OscConfig+0x592>
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	e013      	b.n	8001a0a <HAL_RCC_OscConfig+0x5ba>
 80019e2:	2302      	movs	r3, #2
 80019e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019f4:	2302      	movs	r3, #2
 80019f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80019fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <HAL_RCC_OscConfig+0x650>)
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a14:	fa92 f2a2 	rbit	r2, r2
 8001a18:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a1c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a20:	fab2 f282 	clz	r2, r2
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f042 0220 	orr.w	r2, r2, #32
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f002 021f 	and.w	r2, r2, #31
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1af      	bne.n	800199c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80da 	beq.w	8001c00 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d069      	beq.n	8001b2a <HAL_RCC_OscConfig+0x6da>
 8001a56:	2301      	movs	r3, #1
 8001a58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_OscConfig+0x654>)
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff fa82 	bl	8000f88 <HAL_GetTick>
 8001a84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a88:	e00e      	b.n	8001aa8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fa7d 	bl	8000f88 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d906      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e3d9      	b.n	8002252 <HAL_RCC_OscConfig+0xe02>
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	10908120 	.word	0x10908120
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001aba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001abe:	2202      	movs	r2, #2
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fa93 f2a3 	rbit	r2, r3
 8001acc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ae8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4ba5      	ldr	r3, [pc, #660]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001af2:	2102      	movs	r1, #2
 8001af4:	6019      	str	r1, [r3, #0]
 8001af6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	fa93 f1a3 	rbit	r1, r3
 8001b00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b04:	6019      	str	r1, [r3, #0]
  return result;
 8001b06:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0b0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x63a>
 8001b28:	e06a      	b.n	8001c00 <HAL_RCC_OscConfig+0x7b0>
 8001b2a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fa93 f2a3 	rbit	r2, r3
 8001b3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b40:	601a      	str	r2, [r3, #0]
  return result;
 8001b42:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b46:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b8c      	ldr	r3, [pc, #560]	; (8001d84 <HAL_RCC_OscConfig+0x934>)
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	461a      	mov	r2, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fa14 	bl	8000f88 <HAL_GetTick>
 8001b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	e009      	b.n	8001b7a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b66:	f7ff fa0f 	bl	8000f88 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e36b      	b.n	8002252 <HAL_RCC_OscConfig+0xe02>
 8001b7a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b7e:	2202      	movs	r2, #2
 8001b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b96:	2202      	movs	r2, #2
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bae:	2202      	movs	r2, #2
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc2:	4b6f      	ldr	r3, [pc, #444]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bca:	2102      	movs	r1, #2
 8001bcc:	6019      	str	r1, [r3, #0]
 8001bce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f1a3 	rbit	r1, r3
 8001bd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bdc:	6019      	str	r1, [r3, #0]
  return result;
 8001bde:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1b2      	bne.n	8001b66 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8158 	beq.w	8001ec0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b5a      	ldr	r3, [pc, #360]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d112      	bne.n	8001c48 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a56      	ldr	r2, [pc, #344]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]
 8001c2e:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <HAL_RCC_OscConfig+0x938>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d11a      	bne.n	8001c8a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c54:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <HAL_RCC_OscConfig+0x938>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a4b      	ldr	r2, [pc, #300]	; (8001d88 <HAL_RCC_OscConfig+0x938>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c60:	f7ff f992 	bl	8000f88 <HAL_GetTick>
 8001c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	e009      	b.n	8001c7e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff f98d 	bl	8000f88 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e2e9      	b.n	8002252 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <HAL_RCC_OscConfig+0x938>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0ef      	beq.n	8001c6a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x852>
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a39      	ldr	r2, [pc, #228]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6213      	str	r3, [r2, #32]
 8001ca0:	e02f      	b.n	8001d02 <HAL_RCC_OscConfig+0x8b2>
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10c      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x876>
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a30      	ldr	r2, [pc, #192]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cbe:	f023 0304 	bic.w	r3, r3, #4
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	e01d      	b.n	8001d02 <HAL_RCC_OscConfig+0x8b2>
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d10c      	bne.n	8001cea <HAL_RCC_OscConfig+0x89a>
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a2a      	ldr	r2, [pc, #168]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	e00b      	b.n	8001d02 <HAL_RCC_OscConfig+0x8b2>
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a24      	ldr	r2, [pc, #144]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d06b      	beq.n	8001de4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f93c 	bl	8000f88 <HAL_GetTick>
 8001d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	e00b      	b.n	8001d2e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff f937 	bl	8000f88 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e291      	b.n	8002252 <HAL_RCC_OscConfig+0xe02>
 8001d2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f2a3 	rbit	r2, r3
 8001d58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d5c:	601a      	str	r2, [r3, #0]
  return result;
 8001d5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d109      	bne.n	8001d8c <HAL_RCC_OscConfig+0x93c>
 8001d78:	4b01      	ldr	r3, [pc, #4]	; (8001d80 <HAL_RCC_OscConfig+0x930>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	e014      	b.n	8001da8 <HAL_RCC_OscConfig+0x958>
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	10908120 	.word	0x10908120
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001d90:	2202      	movs	r2, #2
 8001d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	4bbb      	ldr	r3, [pc, #748]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dac:	2102      	movs	r1, #2
 8001dae:	6011      	str	r1, [r2, #0]
 8001db0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	fa92 f1a2 	rbit	r1, r2
 8001dba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001dbe:	6011      	str	r1, [r2, #0]
  return result;
 8001dc0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	fab2 f282 	clz	r2, r2
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	f002 021f 	and.w	r2, r2, #31
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d099      	beq.n	8001d16 <HAL_RCC_OscConfig+0x8c6>
 8001de2:	e063      	b.n	8001eac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7ff f8d0 	bl	8000f88 <HAL_GetTick>
 8001de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff f8cb 	bl	8000f88 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e225      	b.n	8002252 <HAL_RCC_OscConfig+0xe02>
 8001e06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e22:	2202      	movs	r2, #2
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e34:	601a      	str	r2, [r3, #0]
  return result;
 8001e36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_OscConfig+0xa06>
 8001e50:	4b90      	ldr	r3, [pc, #576]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	e00d      	b.n	8001e72 <HAL_RCC_OscConfig+0xa22>
 8001e56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fa93 f2a3 	rbit	r2, r3
 8001e68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	4b89      	ldr	r3, [pc, #548]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e76:	2102      	movs	r1, #2
 8001e78:	6011      	str	r1, [r2, #0]
 8001e7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	fa92 f1a2 	rbit	r1, r2
 8001e84:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001e88:	6011      	str	r1, [r2, #0]
  return result;
 8001e8a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	fab2 f282 	clz	r2, r2
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f002 021f 	and.w	r2, r2, #31
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1a0      	bne.n	8001dee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b77      	ldr	r3, [pc, #476]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	4a76      	ldr	r2, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 81c2 	beq.w	8002250 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ecc:	4b71      	ldr	r3, [pc, #452]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	f000 819c 	beq.w	8002212 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	f040 8114 	bne.w	800210e <HAL_RCC_OscConfig+0xcbe>
 8001ee6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001efe:	601a      	str	r2, [r3, #0]
  return result;
 8001f00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f04:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	461a      	mov	r2, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f834 	bl	8000f88 <HAL_GetTick>
 8001f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	e009      	b.n	8001f3a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff f82f 	bl	8000f88 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e18b      	b.n	8002252 <HAL_RCC_OscConfig+0xe02>
 8001f3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	fa93 f2a3 	rbit	r2, r3
 8001f4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f52:	601a      	str	r2, [r3, #0]
  return result;
 8001f54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	095b      	lsrs	r3, r3, #5
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d102      	bne.n	8001f74 <HAL_RCC_OscConfig+0xb24>
 8001f6e:	4b49      	ldr	r3, [pc, #292]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	e01b      	b.n	8001fac <HAL_RCC_OscConfig+0xb5c>
 8001f74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fa93 f2a3 	rbit	r2, r3
 8001f88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fb4:	6011      	str	r1, [r2, #0]
 8001fb6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	fa92 f1a2 	rbit	r1, r2
 8001fc0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fc4:	6011      	str	r1, [r2, #0]
  return result;
 8001fc6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	fab2 f282 	clz	r2, r2
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	f042 0220 	orr.w	r2, r2, #32
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f002 021f 	and.w	r2, r2, #31
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d19e      	bne.n	8001f26 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	4925      	ldr	r1, [pc, #148]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
 8002004:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800201c:	601a      	str	r2, [r3, #0]
  return result;
 800201e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002022:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800202e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	461a      	mov	r2, r3
 8002036:	2301      	movs	r3, #1
 8002038:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203a:	f7fe ffa5 	bl	8000f88 <HAL_GetTick>
 800203e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002042:	e009      	b.n	8002058 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe ffa0 	bl	8000f88 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0fc      	b.n	8002252 <HAL_RCC_OscConfig+0xe02>
 8002058:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800205c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	fa93 f2a3 	rbit	r2, r3
 800206c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002070:	601a      	str	r2, [r3, #0]
  return result;
 8002072:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002076:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0xc48>
 800208c:	4b01      	ldr	r3, [pc, #4]	; (8002094 <HAL_RCC_OscConfig+0xc44>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	e01e      	b.n	80020d0 <HAL_RCC_OscConfig+0xc80>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800209c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	fa93 f2a3 	rbit	r2, r3
 80020ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fa93 f2a3 	rbit	r2, r3
 80020c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	4b63      	ldr	r3, [pc, #396]	; (800225c <HAL_RCC_OscConfig+0xe0c>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020d8:	6011      	str	r1, [r2, #0]
 80020da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	fa92 f1a2 	rbit	r1, r2
 80020e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80020e8:	6011      	str	r1, [r2, #0]
  return result;
 80020ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	fab2 f282 	clz	r2, r2
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f042 0220 	orr.w	r2, r2, #32
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f002 021f 	and.w	r2, r2, #31
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d09b      	beq.n	8002044 <HAL_RCC_OscConfig+0xbf4>
 800210c:	e0a0      	b.n	8002250 <HAL_RCC_OscConfig+0xe00>
 800210e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002112:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002126:	601a      	str	r2, [r3, #0]
  return result;
 8002128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800212c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002138:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	461a      	mov	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe ff20 	bl	8000f88 <HAL_GetTick>
 8002148:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214c:	e009      	b.n	8002162 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214e:	f7fe ff1b 	bl	8000f88 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e077      	b.n	8002252 <HAL_RCC_OscConfig+0xe02>
 8002162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002166:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800216a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fa93 f2a3 	rbit	r2, r3
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	601a      	str	r2, [r3, #0]
  return result;
 800217c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002180:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_RCC_OscConfig+0xd4c>
 8002196:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_RCC_OscConfig+0xe0c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	e01b      	b.n	80021d4 <HAL_RCC_OscConfig+0xd84>
 800219c:	f107 0320 	add.w	r3, r7, #32
 80021a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	fa93 f2a3 	rbit	r2, r3
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	f107 0318 	add.w	r3, r7, #24
 80021ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f107 0318 	add.w	r3, r7, #24
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <HAL_RCC_OscConfig+0xe0c>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	f107 0210 	add.w	r2, r7, #16
 80021d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021dc:	6011      	str	r1, [r2, #0]
 80021de:	f107 0210 	add.w	r2, r7, #16
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	fa92 f1a2 	rbit	r1, r2
 80021e8:	f107 020c 	add.w	r2, r7, #12
 80021ec:	6011      	str	r1, [r2, #0]
  return result;
 80021ee:	f107 020c 	add.w	r2, r7, #12
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	fab2 f282 	clz	r2, r2
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	f042 0220 	orr.w	r2, r2, #32
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f002 021f 	and.w	r2, r2, #31
 8002204:	2101      	movs	r1, #1
 8002206:	fa01 f202 	lsl.w	r2, r1, r2
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d19e      	bne.n	800214e <HAL_RCC_OscConfig+0xcfe>
 8002210:	e01e      	b.n	8002250 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e018      	b.n	8002252 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_RCC_OscConfig+0xe0c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002228:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800222c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	429a      	cmp	r2, r3
 8002238:	d108      	bne.n	800224c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800223a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800223e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000

08002260 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b09e      	sub	sp, #120	; 0x78
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e162      	b.n	800253e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002278:	4b90      	ldr	r3, [pc, #576]	; (80024bc <HAL_RCC_ClockConfig+0x25c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d910      	bls.n	80022a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b8d      	ldr	r3, [pc, #564]	; (80024bc <HAL_RCC_ClockConfig+0x25c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0207 	bic.w	r2, r3, #7
 800228e:	498b      	ldr	r1, [pc, #556]	; (80024bc <HAL_RCC_ClockConfig+0x25c>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b89      	ldr	r3, [pc, #548]	; (80024bc <HAL_RCC_ClockConfig+0x25c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e14a      	b.n	800253e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b82      	ldr	r3, [pc, #520]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	497f      	ldr	r1, [pc, #508]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80dc 	beq.w	800248c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d13c      	bne.n	8002356 <HAL_RCC_ClockConfig+0xf6>
 80022dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d102      	bne.n	8002306 <HAL_RCC_ClockConfig+0xa6>
 8002300:	4b6f      	ldr	r3, [pc, #444]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	e00f      	b.n	8002326 <HAL_RCC_ClockConfig+0xc6>
 8002306:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800230a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	667b      	str	r3, [r7, #100]	; 0x64
 8002314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002318:	663b      	str	r3, [r7, #96]	; 0x60
 800231a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002322:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800232a:	65ba      	str	r2, [r7, #88]	; 0x58
 800232c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800232e:	fa92 f2a2 	rbit	r2, r2
 8002332:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0220 	orr.w	r2, r2, #32
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d17b      	bne.n	800244a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0f3      	b.n	800253e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d13c      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x178>
 800235e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002362:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800236c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <HAL_RCC_ClockConfig+0x128>
 8002382:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	e00f      	b.n	80023a8 <HAL_RCC_ClockConfig+0x148>
 8002388:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	647b      	str	r3, [r7, #68]	; 0x44
 8002396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800239a:	643b      	str	r3, [r7, #64]	; 0x40
 800239c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a4:	4b46      	ldr	r3, [pc, #280]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80023ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023b0:	fa92 f2a2 	rbit	r2, r2
 80023b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023b8:	fab2 f282 	clz	r2, r2
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	f042 0220 	orr.w	r2, r2, #32
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	f002 021f 	and.w	r2, r2, #31
 80023c8:	2101      	movs	r1, #1
 80023ca:	fa01 f202 	lsl.w	r2, r1, r2
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d13a      	bne.n	800244a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0b2      	b.n	800253e <HAL_RCC_ClockConfig+0x2de>
 80023d8:	2302      	movs	r3, #2
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	095b      	lsrs	r3, r3, #5
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d102      	bne.n	8002400 <HAL_RCC_ClockConfig+0x1a0>
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	e00d      	b.n	800241c <HAL_RCC_ClockConfig+0x1bc>
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	2202      	movs	r2, #2
 800241e:	61ba      	str	r2, [r7, #24]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	fa92 f2a2 	rbit	r2, r2
 8002426:	617a      	str	r2, [r7, #20]
  return result;
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	fab2 f282 	clz	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f042 0220 	orr.w	r2, r2, #32
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	f002 021f 	and.w	r2, r2, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e079      	b.n	800253e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f023 0203 	bic.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	491a      	ldr	r1, [pc, #104]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800245c:	f7fe fd94 	bl	8000f88 <HAL_GetTick>
 8002460:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	e00a      	b.n	800247a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002464:	f7fe fd90 	bl	8000f88 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e061      	b.n	800253e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_RCC_ClockConfig+0x260>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 020c 	and.w	r2, r3, #12
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	429a      	cmp	r2, r3
 800248a:	d1eb      	bne.n	8002464 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x25c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d214      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_RCC_ClockConfig+0x25c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4906      	ldr	r1, [pc, #24]	; (80024bc <HAL_RCC_ClockConfig+0x25c>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <HAL_RCC_ClockConfig+0x25c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e040      	b.n	800253e <HAL_RCC_ClockConfig+0x2de>
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_RCC_ClockConfig+0x2e8>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	491a      	ldr	r1, [pc, #104]	; (8002548 <HAL_RCC_ClockConfig+0x2e8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_RCC_ClockConfig+0x2e8>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4912      	ldr	r1, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x2e8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002502:	f000 f829 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002506:	4601      	mov	r1, r0
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_RCC_ClockConfig+0x2e8>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002510:	22f0      	movs	r2, #240	; 0xf0
 8002512:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	fa92 f2a2 	rbit	r2, r2
 800251a:	60fa      	str	r2, [r7, #12]
  return result;
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	40d3      	lsrs	r3, r2
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x2ec>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	fa21 f303 	lsr.w	r3, r1, r3
 800252e:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HAL_RCC_ClockConfig+0x2f0>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_RCC_ClockConfig+0x2f4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fce2 	bl	8000f00 <HAL_InitTick>
  
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3778      	adds	r7, #120	; 0x78
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	08003b6c 	.word	0x08003b6c
 8002550:	20000000 	.word	0x20000000
 8002554:	20000004 	.word	0x20000004

08002558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b08b      	sub	sp, #44	; 0x2c
 800255c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d002      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x30>
 8002582:	2b08      	cmp	r3, #8
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x36>
 8002586:	e03c      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_GetSysClockFreq+0xc4>)
 800258a:	623b      	str	r3, [r7, #32]
      break;
 800258c:	e03c      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002594:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002598:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	fa92 f2a2 	rbit	r2, r2
 80025a0:	607a      	str	r2, [r7, #4]
  return result;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	fab2 f282 	clz	r2, r2
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	40d3      	lsrs	r3, r2
 80025ac:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	220f      	movs	r2, #15
 80025bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	fa92 f2a2 	rbit	r2, r2
 80025c4:	60fa      	str	r2, [r7, #12]
  return result;
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	fab2 f282 	clz	r2, r2
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	40d3      	lsrs	r3, r2
 80025d0:	4a14      	ldr	r2, [pc, #80]	; (8002624 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025d2:	5cd3      	ldrb	r3, [r2, r3]
 80025d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025e0:	4a0e      	ldr	r2, [pc, #56]	; (800261c <HAL_RCC_GetSysClockFreq+0xc4>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	e004      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	623b      	str	r3, [r7, #32]
      break;
 8002600:	e002      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002604:	623b      	str	r3, [r7, #32]
      break;
 8002606:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002608:	6a3b      	ldr	r3, [r7, #32]
}
 800260a:	4618      	mov	r0, r3
 800260c:	372c      	adds	r7, #44	; 0x2c
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	007a1200 	.word	0x007a1200
 8002620:	08003b84 	.word	0x08003b84
 8002624:	08003b94 	.word	0x08003b94
 8002628:	003d0900 	.word	0x003d0900

0800262c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_GetHCLKFreq+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800264a:	f7ff ffef 	bl	800262c <HAL_RCC_GetHCLKFreq>
 800264e:	4601      	mov	r1, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002658:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800265c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	fa92 f2a2 	rbit	r2, r2
 8002664:	603a      	str	r2, [r7, #0]
  return result;
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	fab2 f282 	clz	r2, r2
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	40d3      	lsrs	r3, r2
 8002670:	4a04      	ldr	r2, [pc, #16]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002672:	5cd3      	ldrb	r3, [r2, r3]
 8002674:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	08003b7c 	.word	0x08003b7c

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800268e:	f7ff ffcd 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002692:	4601      	mov	r1, r0
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800269c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	fa92 f2a2 	rbit	r2, r2
 80026a8:	603a      	str	r2, [r7, #0]
  return result;
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	fab2 f282 	clz	r2, r2
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	40d3      	lsrs	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	08003b7c 	.word	0x08003b7c

080026cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b092      	sub	sp, #72	; 0x48
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80d0 	beq.w	800288a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f0:	4b86      	ldr	r3, [pc, #536]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10e      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fc:	4b83      	ldr	r3, [pc, #524]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	4a82      	ldr	r2, [pc, #520]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002706:	61d3      	str	r3, [r2, #28]
 8002708:	4b80      	ldr	r3, [pc, #512]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b7d      	ldr	r3, [pc, #500]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d118      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b7a      	ldr	r3, [pc, #488]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a79      	ldr	r2, [pc, #484]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002730:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002732:	f7fe fc29 	bl	8000f88 <HAL_GetTick>
 8002736:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	e008      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273a:	f7fe fc25 	bl	8000f88 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b64      	cmp	r3, #100	; 0x64
 8002746:	d901      	bls.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0db      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	4b70      	ldr	r3, [pc, #448]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002758:	4b6c      	ldr	r3, [pc, #432]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d07d      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002772:	429a      	cmp	r2, r3
 8002774:	d076      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002776:	4b65      	ldr	r3, [pc, #404]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	fa93 f3a3 	rbit	r3, r3
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	4b5e      	ldr	r3, [pc, #376]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	461a      	mov	r2, r3
 80027a0:	2301      	movs	r3, #1
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b55      	ldr	r3, [pc, #340]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	2300      	movs	r3, #0
 80027c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027c8:	4a50      	ldr	r2, [pc, #320]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d045      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe fbd6 	bl	8000f88 <HAL_GetTick>
 80027dc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fbd2 	bl	8000f88 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e086      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80027f6:	2302      	movs	r3, #2
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	2302      	movs	r3, #2
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	61fb      	str	r3, [r7, #28]
  return result;
 800280e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d102      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	e007      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800282a:	2302      	movs	r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	4b35      	ldr	r3, [pc, #212]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	2202      	movs	r2, #2
 800283c:	613a      	str	r2, [r7, #16]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	fa92 f2a2 	rbit	r2, r2
 8002844:	60fa      	str	r2, [r7, #12]
  return result;
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f002 021f 	and.w	r2, r2, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0bd      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002864:	4b29      	ldr	r3, [pc, #164]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4926      	ldr	r1, [pc, #152]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002872:	4313      	orrs	r3, r2
 8002874:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002876:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a22      	ldr	r2, [pc, #136]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	491a      	ldr	r1, [pc, #104]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	f023 0210 	bic.w	r2, r3, #16
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4912      	ldr	r1, [pc, #72]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	490b      	ldr	r1, [pc, #44]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	4903      	ldr	r1, [pc, #12]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3748      	adds	r7, #72	; 0x48
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	40007000 	.word	0x40007000
 8002914:	10908100 	.word	0x10908100

08002918 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e01d      	b.n	8002966 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe f9be 	bl	8000cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 f974 	bl	8002c44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2201      	movs	r2, #1
 8002980:	6839      	ldr	r1, [r7, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fc7c 	bl	8003280 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <HAL_TIM_PWM_Start+0x90>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00e      	beq.n	80029b0 <HAL_TIM_PWM_Start+0x40>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_TIM_PWM_Start+0x94>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d009      	beq.n	80029b0 <HAL_TIM_PWM_Start+0x40>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <HAL_TIM_PWM_Start+0x98>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_TIM_PWM_Start+0x40>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <HAL_TIM_PWM_Start+0x9c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_TIM_PWM_Start+0x44>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_TIM_PWM_Start+0x46>
 80029b4:	2300      	movs	r3, #0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_TIM_PWM_Start+0xa0>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d00b      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x84>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e2:	d007      	beq.n	80029f4 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40014000 	.word	0x40014000
 8002a08:	40014400 	.word	0x40014400
 8002a0c:	40014800 	.word	0x40014800
 8002a10:	00010007 	.word	0x00010007

08002a14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e105      	b.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x226>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b14      	cmp	r3, #20
 8002a42:	f200 80f0 	bhi.w	8002c26 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002aa1 	.word	0x08002aa1
 8002a50:	08002c27 	.word	0x08002c27
 8002a54:	08002c27 	.word	0x08002c27
 8002a58:	08002c27 	.word	0x08002c27
 8002a5c:	08002ae1 	.word	0x08002ae1
 8002a60:	08002c27 	.word	0x08002c27
 8002a64:	08002c27 	.word	0x08002c27
 8002a68:	08002c27 	.word	0x08002c27
 8002a6c:	08002b23 	.word	0x08002b23
 8002a70:	08002c27 	.word	0x08002c27
 8002a74:	08002c27 	.word	0x08002c27
 8002a78:	08002c27 	.word	0x08002c27
 8002a7c:	08002b63 	.word	0x08002b63
 8002a80:	08002c27 	.word	0x08002c27
 8002a84:	08002c27 	.word	0x08002c27
 8002a88:	08002c27 	.word	0x08002c27
 8002a8c:	08002ba5 	.word	0x08002ba5
 8002a90:	08002c27 	.word	0x08002c27
 8002a94:	08002c27 	.word	0x08002c27
 8002a98:	08002c27 	.word	0x08002c27
 8002a9c:	08002be5 	.word	0x08002be5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f944 	bl	8002d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0208 	orr.w	r2, r2, #8
 8002aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0204 	bic.w	r2, r2, #4
 8002aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6999      	ldr	r1, [r3, #24]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	619a      	str	r2, [r3, #24]
      break;
 8002ade:	e0a3      	b.n	8002c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f9aa 	bl	8002e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6999      	ldr	r1, [r3, #24]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	021a      	lsls	r2, r3, #8
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	619a      	str	r2, [r3, #24]
      break;
 8002b20:	e082      	b.n	8002c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fa09 	bl	8002f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0208 	orr.w	r2, r2, #8
 8002b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0204 	bic.w	r2, r2, #4
 8002b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	61da      	str	r2, [r3, #28]
      break;
 8002b60:	e062      	b.n	8002c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fa67 	bl	800303c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69d9      	ldr	r1, [r3, #28]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	021a      	lsls	r2, r3, #8
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	61da      	str	r2, [r3, #28]
      break;
 8002ba2:	e041      	b.n	8002c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 faaa 	bl	8003104 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0208 	orr.w	r2, r2, #8
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0204 	bic.w	r2, r2, #4
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002be2:	e021      	b.n	8002c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fae8 	bl	80031c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	021a      	lsls	r2, r3, #8
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c24:	e000      	b.n	8002c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002c26:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop

08002c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a32      	ldr	r2, [pc, #200]	; (8002d20 <TIM_Base_SetConfig+0xdc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d007      	beq.n	8002c6c <TIM_Base_SetConfig+0x28>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c62:	d003      	beq.n	8002c6c <TIM_Base_SetConfig+0x28>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a2f      	ldr	r2, [pc, #188]	; (8002d24 <TIM_Base_SetConfig+0xe0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d108      	bne.n	8002c7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <TIM_Base_SetConfig+0xdc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <TIM_Base_SetConfig+0x6a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8c:	d00f      	beq.n	8002cae <TIM_Base_SetConfig+0x6a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <TIM_Base_SetConfig+0xe0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00b      	beq.n	8002cae <TIM_Base_SetConfig+0x6a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <TIM_Base_SetConfig+0xe4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_Base_SetConfig+0x6a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a22      	ldr	r2, [pc, #136]	; (8002d2c <TIM_Base_SetConfig+0xe8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0x6a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a21      	ldr	r2, [pc, #132]	; (8002d30 <TIM_Base_SetConfig+0xec>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <TIM_Base_SetConfig+0xdc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <TIM_Base_SetConfig+0xc0>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <TIM_Base_SetConfig+0xe4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <TIM_Base_SetConfig+0xc0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <TIM_Base_SetConfig+0xe8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_Base_SetConfig+0xc0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a0c      	ldr	r2, [pc, #48]	; (8002d30 <TIM_Base_SetConfig+0xec>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d103      	bne.n	8002d0c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	615a      	str	r2, [r3, #20]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40000400 	.word	0x40000400
 8002d28:	40014000 	.word	0x40014000
 8002d2c:	40014400 	.word	0x40014400
 8002d30:	40014800 	.word	0x40014800

08002d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0201 	bic.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f023 0302 	bic.w	r3, r3, #2
 8002d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <TIM_OC1_SetConfig+0xfc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00b      	beq.n	8002dac <TIM_OC1_SetConfig+0x78>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <TIM_OC1_SetConfig+0x100>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d007      	beq.n	8002dac <TIM_OC1_SetConfig+0x78>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <TIM_OC1_SetConfig+0x104>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d003      	beq.n	8002dac <TIM_OC1_SetConfig+0x78>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a25      	ldr	r2, [pc, #148]	; (8002e3c <TIM_OC1_SetConfig+0x108>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d10c      	bne.n	8002dc6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f023 0308 	bic.w	r3, r3, #8
 8002db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <TIM_OC1_SetConfig+0xfc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00b      	beq.n	8002de6 <TIM_OC1_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <TIM_OC1_SetConfig+0x100>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <TIM_OC1_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a17      	ldr	r2, [pc, #92]	; (8002e38 <TIM_OC1_SetConfig+0x104>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_OC1_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <TIM_OC1_SetConfig+0x108>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d111      	bne.n	8002e0a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	621a      	str	r2, [r3, #32]
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	40014800 	.word	0x40014800

08002e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0210 	bic.w	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 0320 	bic.w	r3, r3, #32
 8002e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <TIM_OC2_SetConfig+0xf0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10d      	bne.n	8002ec0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <TIM_OC2_SetConfig+0xf0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_OC2_SetConfig+0xa0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <TIM_OC2_SetConfig+0xf4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <TIM_OC2_SetConfig+0xa0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <TIM_OC2_SetConfig+0xf8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_OC2_SetConfig+0xa0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <TIM_OC2_SetConfig+0xfc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d113      	bne.n	8002f08 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ee6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40014000 	.word	0x40014000
 8002f38:	40014400 	.word	0x40014400
 8002f3c:	40014800 	.word	0x40014800

08002f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <TIM_OC3_SetConfig+0xec>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10d      	bne.n	8002fbe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fbc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1a      	ldr	r2, [pc, #104]	; (800302c <TIM_OC3_SetConfig+0xec>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <TIM_OC3_SetConfig+0x9e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <TIM_OC3_SetConfig+0xf0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <TIM_OC3_SetConfig+0x9e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	; (8003034 <TIM_OC3_SetConfig+0xf4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_OC3_SetConfig+0x9e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a17      	ldr	r2, [pc, #92]	; (8003038 <TIM_OC3_SetConfig+0xf8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d113      	bne.n	8003006 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	621a      	str	r2, [r3, #32]
}
 8003020:	bf00      	nop
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40014000 	.word	0x40014000
 8003034:	40014400 	.word	0x40014400
 8003038:	40014800 	.word	0x40014800

0800303c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800308a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	031b      	lsls	r3, r3, #12
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <TIM_OC4_SetConfig+0xb8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00b      	beq.n	80030b8 <TIM_OC4_SetConfig+0x7c>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <TIM_OC4_SetConfig+0xbc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <TIM_OC4_SetConfig+0x7c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <TIM_OC4_SetConfig+0xc0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <TIM_OC4_SetConfig+0x7c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <TIM_OC4_SetConfig+0xc4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d109      	bne.n	80030cc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	019b      	lsls	r3, r3, #6
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	621a      	str	r2, [r3, #32]
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40014000 	.word	0x40014000
 80030fc:	40014400 	.word	0x40014400
 8003100:	40014800 	.word	0x40014800

08003104 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003148:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <TIM_OC5_SetConfig+0xac>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_OC5_SetConfig+0x72>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <TIM_OC5_SetConfig+0xb0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d007      	beq.n	8003176 <TIM_OC5_SetConfig+0x72>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <TIM_OC5_SetConfig+0xb4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_OC5_SetConfig+0x72>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a12      	ldr	r2, [pc, #72]	; (80031bc <TIM_OC5_SetConfig+0xb8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d109      	bne.n	800318a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	621a      	str	r2, [r3, #32]
}
 80031a4:	bf00      	nop
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40014400 	.word	0x40014400
 80031bc:	40014800 	.word	0x40014800

080031c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	051b      	lsls	r3, r3, #20
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a16      	ldr	r2, [pc, #88]	; (8003270 <TIM_OC6_SetConfig+0xb0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00b      	beq.n	8003234 <TIM_OC6_SetConfig+0x74>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a15      	ldr	r2, [pc, #84]	; (8003274 <TIM_OC6_SetConfig+0xb4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <TIM_OC6_SetConfig+0x74>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a14      	ldr	r2, [pc, #80]	; (8003278 <TIM_OC6_SetConfig+0xb8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_OC6_SetConfig+0x74>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a13      	ldr	r2, [pc, #76]	; (800327c <TIM_OC6_SetConfig+0xbc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d109      	bne.n	8003248 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	029b      	lsls	r3, r3, #10
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40014000 	.word	0x40014000
 8003278:	40014400 	.word	0x40014400
 800327c:	40014800 	.word	0x40014800

08003280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	2201      	movs	r2, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1a      	ldr	r2, [r3, #32]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	401a      	ands	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	431a      	orrs	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e054      	b.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a24      	ldr	r2, [pc, #144]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003314:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a17      	ldr	r2, [pc, #92]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00e      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d009      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10c      	bne.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4313      	orrs	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40014000 	.word	0x40014000

080033a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e060      	b.n	8003486 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d115      	bne.n	8003474 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	051b      	lsls	r3, r3, #20
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40012c00 	.word	0x40012c00

08003498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e040      	b.n	800352c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd fc58 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2224      	movs	r2, #36	; 0x24
 80034c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f82c 	bl	8003534 <UART_SetConfig>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e022      	b.n	800352c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9a2 	bl	8003838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa29 	bl	800397c <UART_CheckIdleState>
 800352a:	4603      	mov	r3, r0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4ba2      	ldr	r3, [pc, #648]	; (80037ec <UART_SetConfig+0x2b8>)
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	6939      	ldr	r1, [r7, #16]
 800356c:	430b      	orrs	r3, r1
 800356e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a90      	ldr	r2, [pc, #576]	; (80037f0 <UART_SetConfig+0x2bc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d121      	bne.n	80035f8 <UART_SetConfig+0xc4>
 80035b4:	4b8f      	ldr	r3, [pc, #572]	; (80037f4 <UART_SetConfig+0x2c0>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d817      	bhi.n	80035f0 <UART_SetConfig+0xbc>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x94>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035e5 	.word	0x080035e5
 80035d0:	080035eb 	.word	0x080035eb
 80035d4:	080035df 	.word	0x080035df
 80035d8:	2300      	movs	r3, #0
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e01e      	b.n	800361c <UART_SetConfig+0xe8>
 80035de:	2302      	movs	r3, #2
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e01b      	b.n	800361c <UART_SetConfig+0xe8>
 80035e4:	2304      	movs	r3, #4
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e018      	b.n	800361c <UART_SetConfig+0xe8>
 80035ea:	2308      	movs	r3, #8
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e015      	b.n	800361c <UART_SetConfig+0xe8>
 80035f0:	2310      	movs	r3, #16
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	bf00      	nop
 80035f6:	e011      	b.n	800361c <UART_SetConfig+0xe8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a7e      	ldr	r2, [pc, #504]	; (80037f8 <UART_SetConfig+0x2c4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d102      	bne.n	8003608 <UART_SetConfig+0xd4>
 8003602:	2300      	movs	r3, #0
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e009      	b.n	800361c <UART_SetConfig+0xe8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a7b      	ldr	r2, [pc, #492]	; (80037fc <UART_SetConfig+0x2c8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d102      	bne.n	8003618 <UART_SetConfig+0xe4>
 8003612:	2300      	movs	r3, #0
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e001      	b.n	800361c <UART_SetConfig+0xe8>
 8003618:	2310      	movs	r3, #16
 800361a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003624:	f040 8082 	bne.w	800372c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003628:	7ffb      	ldrb	r3, [r7, #31]
 800362a:	2b08      	cmp	r3, #8
 800362c:	d85e      	bhi.n	80036ec <UART_SetConfig+0x1b8>
 800362e:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <UART_SetConfig+0x100>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003659 	.word	0x08003659
 8003638:	08003679 	.word	0x08003679
 800363c:	08003699 	.word	0x08003699
 8003640:	080036ed 	.word	0x080036ed
 8003644:	080036b5 	.word	0x080036b5
 8003648:	080036ed 	.word	0x080036ed
 800364c:	080036ed 	.word	0x080036ed
 8003650:	080036ed 	.word	0x080036ed
 8003654:	080036d5 	.word	0x080036d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003658:	f7fe fff4 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 800365c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	005a      	lsls	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	441a      	add	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	b29b      	uxth	r3, r3
 8003674:	61bb      	str	r3, [r7, #24]
        break;
 8003676:	e03c      	b.n	80036f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003678:	f7ff f806 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 800367c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	005a      	lsls	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	441a      	add	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003692:	b29b      	uxth	r3, r3
 8003694:	61bb      	str	r3, [r7, #24]
        break;
 8003696:	e02c      	b.n	80036f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80036a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6852      	ldr	r2, [r2, #4]
 80036aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	61bb      	str	r3, [r7, #24]
        break;
 80036b2:	e01e      	b.n	80036f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036b4:	f7fe ff50 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 80036b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	005a      	lsls	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	441a      	add	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	61bb      	str	r3, [r7, #24]
        break;
 80036d2:	e00e      	b.n	80036f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	61bb      	str	r3, [r7, #24]
        break;
 80036ea:	e002      	b.n	80036f2 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
        break;
 80036f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b0f      	cmp	r3, #15
 80036f6:	d916      	bls.n	8003726 <UART_SetConfig+0x1f2>
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fe:	d212      	bcs.n	8003726 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	b29b      	uxth	r3, r3
 8003704:	f023 030f 	bic.w	r3, r3, #15
 8003708:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	b29b      	uxth	r3, r3
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	b29a      	uxth	r2, r3
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	4313      	orrs	r3, r2
 800371a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	897a      	ldrh	r2, [r7, #10]
 8003722:	60da      	str	r2, [r3, #12]
 8003724:	e07d      	b.n	8003822 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
 800372a:	e07a      	b.n	8003822 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 800372c:	7ffb      	ldrb	r3, [r7, #31]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d866      	bhi.n	8003800 <UART_SetConfig+0x2cc>
 8003732:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <UART_SetConfig+0x204>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	0800375d 	.word	0x0800375d
 800373c:	0800377b 	.word	0x0800377b
 8003740:	08003799 	.word	0x08003799
 8003744:	08003801 	.word	0x08003801
 8003748:	080037b5 	.word	0x080037b5
 800374c:	08003801 	.word	0x08003801
 8003750:	08003801 	.word	0x08003801
 8003754:	08003801 	.word	0x08003801
 8003758:	080037d3 	.word	0x080037d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7fe ff72 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8003760:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	085a      	lsrs	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	441a      	add	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	b29b      	uxth	r3, r3
 8003776:	61bb      	str	r3, [r7, #24]
        break;
 8003778:	e045      	b.n	8003806 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800377a:	f7fe ff85 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 800377e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	085a      	lsrs	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	b29b      	uxth	r3, r3
 8003794:	61bb      	str	r3, [r7, #24]
        break;
 8003796:	e036      	b.n	8003806 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80037a2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6852      	ldr	r2, [r2, #4]
 80037aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	61bb      	str	r3, [r7, #24]
        break;
 80037b2:	e028      	b.n	8003806 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b4:	f7fe fed0 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 80037b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	085a      	lsrs	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	441a      	add	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	61bb      	str	r3, [r7, #24]
        break;
 80037d0:	e019      	b.n	8003806 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	61bb      	str	r3, [r7, #24]
        break;
 80037e8:	e00d      	b.n	8003806 <UART_SetConfig+0x2d2>
 80037ea:	bf00      	nop
 80037ec:	efff69f3 	.word	0xefff69f3
 80037f0:	40013800 	.word	0x40013800
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40004400 	.word	0x40004400
 80037fc:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	75fb      	strb	r3, [r7, #23]
        break;
 8003804:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b0f      	cmp	r3, #15
 800380a:	d908      	bls.n	800381e <UART_SetConfig+0x2ea>
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003812:	d204      	bcs.n	800381e <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	e001      	b.n	8003822 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800382e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01a      	beq.n	800394e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003936:	d10a      	bne.n	800394e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800398a:	f7fd fafd 	bl	8000f88 <HAL_GetTick>
 800398e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b08      	cmp	r3, #8
 800399c:	d10e      	bne.n	80039bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800399e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f82a 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e020      	b.n	80039fe <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d10e      	bne.n	80039e8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f814 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e00a      	b.n	80039fe <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a16:	e05d      	b.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a1e:	d059      	beq.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a20:	f7fd fab2 	bl	8000f88 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d302      	bcc.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11b      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e042      	b.n	8003af4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02b      	beq.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8a:	d123      	bne.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a94:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aa4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e00f      	b.n	8003af4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d092      	beq.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4e0d      	ldr	r6, [pc, #52]	; (8003b34 <__libc_init_array+0x38>)
 8003b00:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b02:	1ba4      	subs	r4, r4, r6
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	2500      	movs	r5, #0
 8003b08:	42a5      	cmp	r5, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	4e0b      	ldr	r6, [pc, #44]	; (8003b3c <__libc_init_array+0x40>)
 8003b0e:	4c0c      	ldr	r4, [pc, #48]	; (8003b40 <__libc_init_array+0x44>)
 8003b10:	f000 f820 	bl	8003b54 <_init>
 8003b14:	1ba4      	subs	r4, r4, r6
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	2500      	movs	r5, #0
 8003b1a:	42a5      	cmp	r5, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b24:	4798      	blx	r3
 8003b26:	3501      	adds	r5, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b2e:	4798      	blx	r3
 8003b30:	3501      	adds	r5, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08003ba4 	.word	0x08003ba4
 8003b38:	08003ba4 	.word	0x08003ba4
 8003b3c:	08003ba4 	.word	0x08003ba4
 8003b40:	08003ba8 	.word	0x08003ba8

08003b44 <memset>:
 8003b44:	4402      	add	r2, r0
 8003b46:	4603      	mov	r3, r0
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <memset+0xa>
 8003b4c:	4770      	bx	lr
 8003b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b52:	e7f9      	b.n	8003b48 <memset+0x4>

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
